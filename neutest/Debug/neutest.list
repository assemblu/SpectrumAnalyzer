
neutest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013470  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bcc  08016bcc  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  08016bcc  08016bcc  00026bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016bd4  08016bd4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016bd4  08016bd4  00026bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bd8  08016bd8  00026bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08016bdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014198  2000000c  08016be8  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200141a4  08016be8  000341a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008db8  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e5  00000000  00000000  00038df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0003a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  0003ad60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cfe  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084aa  00000000  00000000  0005bffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76cc  00000000  00000000  000644a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0012bb74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000182c  00000000  00000000  0012bc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000001a6  00000000  00000000  0012d464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003744 	.word	0x08003744

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003744 	.word	0x08003744

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbb0 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f824 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f94c 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f914 	bl	8000738 <MX_DMA_Init>
  MX_I2S1_Init();
 8000510:	f000 f8b6 	bl	8000680 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000514:	f000 f8e2 	bl	80006dc <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Transmit_DMA(&hi2s2, txBuf, 16384);
 8000518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <main+0x40>)
 800051e:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x44>)
 8000520:	f001 fb20 	bl	8001b64 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s1, rxBuf, 16384);
 8000524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000528:	4906      	ldr	r1, [pc, #24]	; (8000544 <main+0x48>)
 800052a:	4807      	ldr	r0, [pc, #28]	; (8000548 <main+0x4c>)
 800052c:	f001 fbc2 	bl	8001cb4 <HAL_I2S_Receive_DMA>

  arm_rfft_fast_init_f32(&fftHandler, 2048);
 8000530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <main+0x50>)
 8000536:	f003 f855 	bl	80035e4 <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x3e>
 800053c:	20004040 	.word	0x20004040
 8000540:	20014158 	.word	0x20014158
 8000544:	2000c040 	.word	0x2000c040
 8000548:	20014040 	.word	0x20014040
 800054c:	20004028 	.word	0x20004028

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ac      	sub	sp, #176	; 0xb0
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 f8e8 	bl	8003734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	225c      	movs	r2, #92	; 0x5c
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f8d9 	bl	8003734 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	4b3c      	ldr	r3, [pc, #240]	; (8000678 <SystemClock_Config+0x128>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	4a3b      	ldr	r2, [pc, #236]	; (8000678 <SystemClock_Config+0x128>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	6413      	str	r3, [r2, #64]	; 0x40
 8000592:	4b39      	ldr	r3, [pc, #228]	; (8000678 <SystemClock_Config+0x128>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b36      	ldr	r3, [pc, #216]	; (800067c <SystemClock_Config+0x12c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005aa:	4a34      	ldr	r2, [pc, #208]	; (800067c <SystemClock_Config+0x12c>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <SystemClock_Config+0x12c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005da:	2308      	movs	r3, #8
 80005dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fd53 	bl	80030a8 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000608:	f000 f95e 	bl	80008c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fd89 	bl	8002140 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000634:	f000 f948 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8000638:	2303      	movs	r3, #3
 800063a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800063c:	2332      	movs	r3, #50	; 0x32
 800063e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000654:	2300      	movs	r3, #0
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000658:	2300      	movs	r3, #0
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fe53 	bl	800230c <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800066c:	f000 f92c 	bl	80008c8 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	37b0      	adds	r7, #176	; 0xb0
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_I2S1_Init+0x54>)
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <MX_I2S1_Init+0x58>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2S1_Init+0x54>)
 800068c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000690:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_I2S1_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2S1_Init+0x54>)
 800069a:	2203      	movs	r2, #3
 800069c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006a8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006ac:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2S1_Init+0x54>)
 80006c2:	f001 f957 	bl	8001974 <HAL_I2S_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80006cc:	f000 f8fc 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20014040 	.word	0x20014040
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_I2S2_Init+0x54>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <MX_I2S2_Init+0x58>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2S2_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_I2S2_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2S2_Init+0x54>)
 80006f6:	2203      	movs	r2, #3
 80006f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_I2S2_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_I2S2_Init+0x54>)
 8000702:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000706:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2S2_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_I2S2_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2S2_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2S2_Init+0x54>)
 800071c:	f001 f92a 	bl	8001974 <HAL_I2S_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000726:	f000 f8cf 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20014158 	.word	0x20014158
 8000734:	40003800 	.word	0x40003800

08000738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_DMA_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_DMA_Init+0x68>)
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_DMA_Init+0x68>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_DMA_Init+0x68>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_DMA_Init+0x68>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_DMA_Init+0x68>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200f      	movs	r0, #15
 800077c:	f000 fbbf 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000780:	200f      	movs	r0, #15
 8000782:	f000 fbd8 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2038      	movs	r0, #56	; 0x38
 800078c:	f000 fbb7 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	; 0x38
 8000792:	f000 fbd0 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_GPIO_Init+0x68>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_GPIO_Init+0x68>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0x68>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	  int left=(rxBuf[0]<<16 | rxBuf[1]);
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_I2S_RxHalfCpltCallback+0x54>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <HAL_I2S_RxHalfCpltCallback+0x54>)
 8000820:	8852      	ldrh	r2, [r2, #2]
 8000822:	4313      	orrs	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
	  int right=(rxBuf[2]<<16 | rxBuf[3]);
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_I2S_RxHalfCpltCallback+0x54>)
 8000828:	889b      	ldrh	r3, [r3, #4]
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_I2S_RxHalfCpltCallback+0x54>)
 800082e:	88d2      	ldrh	r2, [r2, #6]
 8000830:	4313      	orrs	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
	  txBuf[0]=(left>>16)&0xFFFF;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x58>)
 800083c:	801a      	strh	r2, [r3, #0]
	  txBuf[1]=left&0xFFFF;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	b29a      	uxth	r2, r3
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x58>)
 8000844:	805a      	strh	r2, [r3, #2]
	  txBuf[2]=(right>>16)&0xFFFF;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	0c1b      	lsrs	r3, r3, #16
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x58>)
 800084e:	809a      	strh	r2, [r3, #4]
	  txBuf[3]=right&0xFFFF;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x58>)
 8000856:	80da      	strh	r2, [r3, #6]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	2000c040 	.word	0x2000c040
 8000868:	20004040 	.word	0x20004040

0800086c <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	  int left=(rxBuf[4]<<16 | rxBuf[5]);
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_I2S_RxCpltCallback+0x54>)
 8000876:	891b      	ldrh	r3, [r3, #8]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_I2S_RxCpltCallback+0x54>)
 800087c:	8952      	ldrh	r2, [r2, #10]
 800087e:	4313      	orrs	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
	  int right=(rxBuf[6]<<16 | rxBuf[7]);
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_I2S_RxCpltCallback+0x54>)
 8000884:	899b      	ldrh	r3, [r3, #12]
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_I2S_RxCpltCallback+0x54>)
 800088a:	89d2      	ldrh	r2, [r2, #14]
 800088c:	4313      	orrs	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
	  txBuf[4]=(left>>16)&0xFFFF;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_I2S_RxCpltCallback+0x58>)
 8000898:	811a      	strh	r2, [r3, #8]
	  txBuf[5]=left&0xFFFF;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_I2S_RxCpltCallback+0x58>)
 80008a0:	815a      	strh	r2, [r3, #10]
	  txBuf[6]=(right>>16)&0xFFFF;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	0c1b      	lsrs	r3, r3, #16
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_I2S_RxCpltCallback+0x58>)
 80008aa:	819a      	strh	r2, [r3, #12]
	  txBuf[7]=right&0xFFFF;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_I2S_RxCpltCallback+0x58>)
 80008b2:	81da      	strh	r2, [r3, #14]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	2000c040 	.word	0x2000c040
 80008c4:	20004040 	.word	0x20004040

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a81      	ldr	r2, [pc, #516]	; (8000b48 <HAL_I2S_MspInit+0x224>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d17b      	bne.n	8000a3e <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	4b80      	ldr	r3, [pc, #512]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a7f      	ldr	r2, [pc, #508]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	4b79      	ldr	r3, [pc, #484]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a78      	ldr	r2, [pc, #480]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b76      	ldr	r3, [pc, #472]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	4b72      	ldr	r3, [pc, #456]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a71      	ldr	r2, [pc, #452]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b6f      	ldr	r3, [pc, #444]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800099a:	23b0      	movs	r3, #176	; 0xb0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009aa:	2305      	movs	r3, #5
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4866      	ldr	r0, [pc, #408]	; (8000b50 <HAL_I2S_MspInit+0x22c>)
 80009b6:	f000 fe49 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ba:	2310      	movs	r3, #16
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ca:	2305      	movs	r3, #5
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	485f      	ldr	r0, [pc, #380]	; (8000b54 <HAL_I2S_MspInit+0x230>)
 80009d6:	f000 fe39 	bl	800164c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80009da:	4b5f      	ldr	r3, [pc, #380]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009dc:	4a5f      	ldr	r2, [pc, #380]	; (8000b5c <HAL_I2S_MspInit+0x238>)
 80009de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80009e0:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e8:	4b5b      	ldr	r3, [pc, #364]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ee:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f4:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009fc:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 80009fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a04:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a0c:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a12:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a14:	4b50      	ldr	r3, [pc, #320]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a20:	484d      	ldr	r0, [pc, #308]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a22:	f000 faa3 	bl	8000f6c <HAL_DMA_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8000a2c:	f7ff ff4c 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a49      	ldr	r2, [pc, #292]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a36:	4a48      	ldr	r2, [pc, #288]	; (8000b58 <HAL_I2S_MspInit+0x234>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a3c:	e07f      	b.n	8000b3e <HAL_I2S_MspInit+0x21a>
  else if(hi2s->Instance==SPI2)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <HAL_I2S_MspInit+0x23c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d17a      	bne.n	8000b3e <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_I2S_MspInit+0x228>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4827      	ldr	r0, [pc, #156]	; (8000b54 <HAL_I2S_MspInit+0x230>)
 8000ab8:	f000 fdc8 	bl	800164c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000abc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4822      	ldr	r0, [pc, #136]	; (8000b64 <HAL_I2S_MspInit+0x240>)
 8000ada:	f000 fdb7 	bl	800164c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <HAL_I2S_MspInit+0x248>)
 8000ae2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000aec:	2240      	movs	r2, #64	; 0x40
 8000aee:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b24:	f000 fa22 	bl	8000f6c <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 8000b2e:	f7ff fecb 	bl	80008c8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_I2S_MspInit+0x244>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	; 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020800 	.word	0x40020800
 8000b58:	20014088 	.word	0x20014088
 8000b5c:	40026410 	.word	0x40026410
 8000b60:	40003800 	.word	0x40003800
 8000b64:	40020400 	.word	0x40020400
 8000b68:	200140e8 	.word	0x200140e8
 8000b6c:	40026070 	.word	0x40026070

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8a4 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Stream4_IRQHandler+0x10>)
 8000bca:	f000 fad5 	bl	8001178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200140e8 	.word	0x200140e8

08000bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA2_Stream0_IRQHandler+0x10>)
 8000bde:	f000 facb 	bl	8001178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20014088 	.word	0x20014088

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fd55 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc5b 	bl	80004fc <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08016bdc 	.word	0x08016bdc
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	200141a4 	.word	0x200141a4

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f92b 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe1c 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f943 	bl	8000f52 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f90b 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200141a0 	.word	0x200141a0

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200141a0 	.word	0x200141a0

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff feda 	bl	8000d30 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e099      	b.n	80010bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e00f      	b.n	8000fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff fec1 	bl	8000d30 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d908      	bls.n	8000fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e078      	b.n	80010bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e8      	bne.n	8000faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_DMA_Init+0x158>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2b04      	cmp	r3, #4
 8001022:	d107      	bne.n	8001034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4313      	orrs	r3, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f023 0307 	bic.w	r3, r3, #7
 800104a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b04      	cmp	r3, #4
 800105c:	d117      	bne.n	800108e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fa6f 	bl	8001554 <DMA_CheckFifoParam>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800108a:	2301      	movs	r3, #1
 800108c:	e016      	b.n	80010bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fa26 	bl	80014e8 <DMA_CalcBaseAndBitshift>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	223f      	movs	r2, #63	; 0x3f
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f010803f 	.word	0xf010803f

080010c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_DMA_Start_IT+0x26>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e040      	b.n	8001170 <HAL_DMA_Start_IT+0xa8>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d12f      	bne.n	8001162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f9b8 	bl	800148c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0216 	orr.w	r2, r2, #22
 8001136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e005      	b.n	800116e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001184:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <HAL_DMA_IRQHandler+0x258>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <HAL_DMA_IRQHandler+0x25c>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0a9b      	lsrs	r3, r3, #10
 8001190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a2:	2208      	movs	r2, #8
 80011a4:	409a      	lsls	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01a      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0204 	bic.w	r2, r2, #4
 80011ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2208      	movs	r2, #8
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	2201      	movs	r2, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d012      	beq.n	800121a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2201      	movs	r2, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001212:	f043 0202 	orr.w	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	2204      	movs	r2, #4
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d012      	beq.n	8001250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	2204      	movs	r2, #4
 800123e:	409a      	lsls	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	f043 0204 	orr.w	r2, r3, #4
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2210      	movs	r2, #16
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d043      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d03c      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	2210      	movs	r2, #16
 8001274:	409a      	lsls	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d018      	beq.n	80012ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d024      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4798      	blx	r3
 80012a6:	e01f      	b.n	80012e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d01b      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
 80012b8:	e016      	b.n	80012e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0208 	bic.w	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2220      	movs	r2, #32
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 808e 	beq.w	8001416 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8086 	beq.w	8001416 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2220      	movs	r2, #32
 8001310:	409a      	lsls	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b05      	cmp	r3, #5
 8001320:	d136      	bne.n	8001390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0216 	bic.w	r2, r2, #22
 8001330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_DMA_IRQHandler+0x1da>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0208 	bic.w	r2, r2, #8
 8001360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	223f      	movs	r2, #63	; 0x3f
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	2b00      	cmp	r3, #0
 8001384:	d07d      	beq.n	8001482 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
        }
        return;
 800138e:	e078      	b.n	8001482 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01c      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d108      	bne.n	80013be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d030      	beq.n	8001416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
 80013bc:	e02b      	b.n	8001416 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d027      	beq.n	8001416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4798      	blx	r3
 80013ce:	e022      	b.n	8001416 <HAL_DMA_IRQHandler+0x29e>
 80013d0:	20000000 	.word	0x20000000
 80013d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	2b00      	cmp	r3, #0
 800141c:	d032      	beq.n	8001484 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d022      	beq.n	8001470 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2205      	movs	r2, #5
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	429a      	cmp	r2, r3
 800144c:	d307      	bcc.n	800145e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f2      	bne.n	8001442 <HAL_DMA_IRQHandler+0x2ca>
 800145c:	e000      	b.n	8001460 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800145e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
 8001480:	e000      	b.n	8001484 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001482:	bf00      	nop
    }
  }
}
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop

0800148c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	d108      	bne.n	80014cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ca:	e007      	b.n	80014dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3b10      	subs	r3, #16
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <DMA_CalcBaseAndBitshift+0x64>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <DMA_CalcBaseAndBitshift+0x68>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d909      	bls.n	800152a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	1d1a      	adds	r2, r3, #4
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	659a      	str	r2, [r3, #88]	; 0x58
 8001528:	e007      	b.n	800153a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	aaaaaaab 	.word	0xaaaaaaab
 8001550:	0800376c 	.word	0x0800376c

08001554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11f      	bne.n	80015ae <DMA_CheckFifoParam+0x5a>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d856      	bhi.n	8001622 <DMA_CheckFifoParam+0xce>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <DMA_CheckFifoParam+0x28>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	0800158d 	.word	0x0800158d
 8001580:	0800159f 	.word	0x0800159f
 8001584:	0800158d 	.word	0x0800158d
 8001588:	08001623 	.word	0x08001623
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d046      	beq.n	8001626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159c:	e043      	b.n	8001626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a6:	d140      	bne.n	800162a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ac:	e03d      	b.n	800162a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	d121      	bne.n	80015fc <DMA_CheckFifoParam+0xa8>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d837      	bhi.n	800162e <DMA_CheckFifoParam+0xda>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <DMA_CheckFifoParam+0x70>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015db 	.word	0x080015db
 80015cc:	080015d5 	.word	0x080015d5
 80015d0:	080015ed 	.word	0x080015ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
      break;
 80015d8:	e030      	b.n	800163c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d025      	beq.n	8001632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ea:	e022      	b.n	8001632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015f4:	d11f      	bne.n	8001636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015fa:	e01c      	b.n	8001636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d903      	bls.n	800160a <DMA_CheckFifoParam+0xb6>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d003      	beq.n	8001610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001608:	e018      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
      break;
 800160e:	e015      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00e      	beq.n	800163a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      break;
 8001620:	e00b      	b.n	800163a <DMA_CheckFifoParam+0xe6>
      break;
 8001622:	bf00      	nop
 8001624:	e00a      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e008      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800162a:	bf00      	nop
 800162c:	e006      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
 8001630:	e004      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 8001632:	bf00      	nop
 8001634:	e002      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;   
 8001636:	bf00      	nop
 8001638:	e000      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
    }
  } 
  
  return status; 
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e165      	b.n	8001934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8154 	bne.w	800192e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	2b02      	cmp	r3, #2
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80ae 	beq.w	800192e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_GPIO_Init+0x300>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a5c      	ldr	r2, [pc, #368]	; (800194c <HAL_GPIO_Init+0x300>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <HAL_GPIO_Init+0x300>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x304>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_GPIO_Init+0x308>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x21a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4e      	ldr	r2, [pc, #312]	; (8001958 <HAL_GPIO_Init+0x30c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x216>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4d      	ldr	r2, [pc, #308]	; (800195c <HAL_GPIO_Init+0x310>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x212>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x314>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x20e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x318>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x20a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x31c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x206>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x320>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x202>
 800184a:	2306      	movs	r3, #6
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800184e:	2307      	movs	r3, #7
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x304>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d4:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_GPIO_Init+0x324>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae96 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e1      	b.n	8001b4a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a6d      	ldr	r2, [pc, #436]	; (8001b54 <HAL_I2S_Init+0x1e0>)
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe ffbf 	bl	8000924 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019bc:	f023 030f 	bic.w	r3, r3, #15
 80019c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2202      	movs	r2, #2
 80019c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d06f      	beq.n	8001ab2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80019da:	2310      	movs	r3, #16
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e001      	b.n	80019e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d802      	bhi.n	80019f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_I2S_Init+0x1e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_I2S_Init+0x92>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <HAL_I2S_Init+0x1e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d104      	bne.n	8001a10 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 ffaa 	bl	8002960 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	e003      	b.n	8001a18 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f000 ffa5 	bl	8002960 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a16:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d125      	bne.n	8001a6e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	3305      	adds	r3, #5
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e01f      	b.n	8001a8c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	3305      	adds	r3, #5
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e00e      	b.n	8001a8c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	3305      	adds	r3, #5
 8001a8a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4a34      	ldr	r2, [pc, #208]	; (8001b60 <HAL_I2S_Init+0x1ec>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	e003      	b.n	8001aba <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d902      	bls.n	8001ac6 <HAL_I2S_Init+0x152>
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d907      	bls.n	8001ad6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e039      	b.n	8001b4a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	ea42 0103 	orr.w	r1, r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001af4:	f023 030f 	bic.w	r3, r3, #15
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6851      	ldr	r1, [r2, #4]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6892      	ldr	r2, [r2, #8]
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6992      	ldr	r2, [r2, #24]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b18:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b30      	cmp	r3, #48	; 0x30
 8001b20:	d003      	beq.n	8001b2a <HAL_I2S_Init+0x1b6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2bb0      	cmp	r3, #176	; 0xb0
 8001b28:	d107      	bne.n	8001b3a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b38:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	0800202b 	.word	0x0800202b
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	40003c00 	.word	0x40003c00
 8001b60:	cccccccd 	.word	0xcccccccd

08001b64 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_I2S_Transmit_DMA+0x1a>
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e08e      	b.n	8001ca0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2S_Transmit_DMA+0x2e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e086      	b.n	8001ca0 <HAL_I2S_Transmit_DMA+0x13c>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e076      	b.n	8001ca0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d002      	beq.n	8001bde <HAL_I2S_Transmit_DMA+0x7a>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf2:	e005      	b.n	8001c00 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_I2S_Transmit_DMA+0x144>)
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_I2S_Transmit_DMA+0x148>)
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_I2S_Transmit_DMA+0x14c>)
 8001c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001c20:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001c28:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001c30:	f7ff fa4a 	bl	80010c8 <HAL_DMA_Start_IT>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00f      	beq.n	8001c5a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0208 	orr.w	r2, r3, #8
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e022      	b.n	8001ca0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c76:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0202 	orr.w	r2, r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08001eab 	.word	0x08001eab
 8001cac:	08001e69 	.word	0x08001e69
 8001cb0:	08001f25 	.word	0x08001f25

08001cb4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_I2S_Receive_DMA+0x1a>
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0a1      	b.n	8001e16 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2S_Receive_DMA+0x2e>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e099      	b.n	8001e16 <HAL_I2S_Receive_DMA+0x162>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e089      	b.n	8001e16 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2204      	movs	r2, #4
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d002      	beq.n	8001d2e <HAL_I2S_Receive_DMA+0x7a>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10a      	bne.n	8001d44 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	865a      	strh	r2, [r3, #50]	; 0x32
 8001d42:	e005      	b.n	8001d50 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_I2S_Receive_DMA+0x16c>)
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_I2S_Receive_DMA+0x170>)
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_I2S_Receive_DMA+0x174>)
 8001d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d76:	d10a      	bne.n	8001d8e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	330c      	adds	r3, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001da4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001da6:	f7ff f98f 	bl	80010c8 <HAL_DMA_Start_IT>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00f      	beq.n	8001dd0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f043 0208 	orr.w	r2, r3, #8
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e022      	b.n	8001e16 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dec:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08001f09 	.word	0x08001f09
 8001e24:	08001ec7 	.word	0x08001ec7
 8001e28:	08001f25 	.word	0x08001f25

08001e2c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10e      	bne.n	8001e9c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0202 	bic.w	r2, r2, #2
 8001e8c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff ffcf 	bl	8001e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff ffb7 	bl	8001e2c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10e      	bne.n	8001efa <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7fe fcb6 	bl	800086c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fc7a 	bl	8000810 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0203 	bic.w	r2, r2, #3
 8001f40:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0208 	orr.w	r2, r3, #8
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff ff76 	bl	8001e54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c9a      	adds	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fb4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff3e 	bl	8001e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	1c9a      	adds	r2, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10e      	bne.n	8002022 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002012:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fc25 	bl	800086c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b04      	cmp	r3, #4
 8002044:	d13a      	bne.n	80020bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d109      	bne.n	8002064 <I2S_IRQHandler+0x3a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d102      	bne.n	8002064 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffb4 	bl	8001fcc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d126      	bne.n	80020bc <I2S_IRQHandler+0x92>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d11f      	bne.n	80020bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800208a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fecc 	bl	8001e54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d136      	bne.n	8002136 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d109      	bne.n	80020e6 <I2S_IRQHandler+0xbc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d102      	bne.n	80020e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff45 	bl	8001f70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d122      	bne.n	8002136 <I2S_IRQHandler+0x10c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d11b      	bne.n	8002136 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800210c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe8f 	bl	8001e54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cc      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d90c      	bls.n	800217c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d044      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e067      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b37      	ldr	r3, [pc, #220]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4934      	ldr	r1, [pc, #208]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe fd7e 	bl	8000d30 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fd7a 	bl	8000d30 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d20c      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 fd93 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fcde 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	0800375c 	.word	0x0800375c
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	496c      	ldr	r1, [pc, #432]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002362:	2301      	movs	r3, #1
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002372:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002378:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	4960      	ldr	r1, [pc, #384]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002390:	2301      	movs	r3, #1
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b58      	ldr	r3, [pc, #352]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4955      	ldr	r1, [pc, #340]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023be:	d101      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80023c0:	2301      	movs	r3, #1
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d017      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	4946      	ldr	r1, [pc, #280]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d101      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002408:	2301      	movs	r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808a 	beq.w	800252e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a38      	ldr	r2, [pc, #224]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a33      	ldr	r2, [pc, #204]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002442:	f7fe fc75 	bl	8000d30 <HAL_GetTick>
 8002446:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fc71 	bl	8000d30 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e278      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002470:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02f      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	429a      	cmp	r2, r3
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d114      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fc3f 	bl	8000d30 <HAL_GetTick>
 80024b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fc3b 	bl	8000d30 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e240      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e4:	d114      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fa:	4902      	ldr	r1, [pc, #8]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
 8002500:	e00c      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40007000 	.word	0x40007000
 800250c:	42470e40 	.word	0x42470e40
 8002510:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002516:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800251e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	4944      	ldr	r1, [pc, #272]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252a:	4313      	orrs	r3, r2
 800252c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002542:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4937      	ldr	r1, [pc, #220]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002572:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	492e      	ldr	r1, [pc, #184]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	4926      	ldr	r1, [pc, #152]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b2:	d101      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	491a      	ldr	r1, [pc, #104]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d011      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002618:	f040 80ff 	bne.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002622:	f7fe fb85 	bl	8000d30 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002628:	e00e      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800262a:	f7fe fb81 	bl	8000d30 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d907      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e188      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800263c:	40023800 	.word	0x40023800
 8002640:	424711e0 	.word	0x424711e0
 8002644:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ea      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002670:	2b00      	cmp	r3, #0
 8002672:	d028      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d124      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800267c:	4b71      	ldr	r3, [pc, #452]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800267e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	3301      	adds	r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800268e:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002694:	0e1b      	lsrs	r3, r3, #24
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	071b      	lsls	r3, r3, #28
 80026be:	4961      	ldr	r1, [pc, #388]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d035      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f0:	d130      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026f2:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270a:	0f1b      	lsrs	r3, r3, #28
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	019b      	lsls	r3, r3, #6
 800271c:	431a      	orrs	r2, r3
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	071b      	lsls	r3, r3, #28
 8002734:	4943      	ldr	r1, [pc, #268]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800273e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002742:	f023 021f 	bic.w	r2, r3, #31
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	493d      	ldr	r1, [pc, #244]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d029      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d124      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800276c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002782:	0f1b      	lsrs	r3, r3, #28
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	071b      	lsls	r3, r3, #28
 80027ac:	4925      	ldr	r1, [pc, #148]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fa9c 	bl	8000d30 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027fc:	f7fe fa98 	bl	8000d30 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e09f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 8095 	bne.w	800294c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fa82 	bl	8000d30 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800282e:	e00f      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002830:	f7fe fa7e 	bl	8000d30 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d908      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e085      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	42470068 	.word	0x42470068
 800284c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002850:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285c:	d0e8      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02b      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	d127      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	431a      	orrs	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	4928      	ldr	r1, [pc, #160]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	3b01      	subs	r3, #1
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	4922      	ldr	r1, [pc, #136]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01d      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ea:	d118      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	0e1b      	lsrs	r3, r3, #24
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	4910      	ldr	r1, [pc, #64]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe fa04 	bl	8000d30 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800292c:	f7fe fa00 	bl	8000d30 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e007      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294a:	d1ef      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3730      	adds	r7, #48	; 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	42470070 	.word	0x42470070

08002960 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	2b07      	cmp	r3, #7
 8002986:	f200 8224 	bhi.w	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002b93 	.word	0x08002b93
 8002994:	08002cbd 	.word	0x08002cbd
 8002998:	08002dd3 	.word	0x08002dd3
 800299c:	080029b1 	.word	0x080029b1
 80029a0:	08002dd3 	.word	0x08002dd3
 80029a4:	08002dd3 	.word	0x08002dd3
 80029a8:	08002dd3 	.word	0x08002dd3
 80029ac:	080029b1 	.word	0x080029b1
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80029b0:	4ba8      	ldr	r3, [pc, #672]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029c6:	f000 80d6 	beq.w	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029d0:	f200 80dd 	bhi.w	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029da:	f000 809f 	beq.w	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029e4:	f200 80d3 	bhi.w	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f6:	f200 80ca 	bhi.w	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a00:	f000 80b6 	beq.w	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a0a:	f200 80c0 	bhi.w	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a14:	f000 8082 	beq.w	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a1e:	f200 80b6 	bhi.w	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002a30:	e0ad      	b.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002a3e:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a48:	4a83      	ldr	r2, [pc, #524]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e008      	b.n	8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8002a52:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5c:	4a7f      	ldr	r2, [pc, #508]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002a64:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	0e1b      	lsrs	r3, r3, #24
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8002a72:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	fb02 f203 	mul.w	r2, r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8002a8c:	4b71      	ldr	r3, [pc, #452]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	61fb      	str	r3, [r7, #28]
          break;
 8002aa6:	e073      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002ab4:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002abe:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad2:	4a62      	ldr	r2, [pc, #392]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae0:	0e1b      	lsrs	r3, r3, #24
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	fb02 f203 	mul.w	r2, r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	61fb      	str	r3, [r7, #28]
          break;
 8002b1a:	e039      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b28:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b30:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e007      	b.n	8002b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b42:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0f1b      	lsrs	r3, r3, #28
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	fb02 f203 	mul.w	r2, r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	61fb      	str	r3, [r7, #28]
          break;
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002b72:	61fb      	str	r3, [r7, #28]
          break;
 8002b74:	e00c      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b84:	61fb      	str	r3, [r7, #28]
          break;
 8002b86:	e003      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002b8a:	61fb      	str	r3, [r7, #28]
          break;
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002b8e:	bf00      	nop
        }
      }
      break;
 8002b90:	e11f      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ba4:	d079      	beq.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002bac:	f200 8082 	bhi.w	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb6:	d03c      	beq.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bbe:	d879      	bhi.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bcc:	d172      	bne.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002bd0:	61fb      	str	r3, [r7, #28]
          break;
 8002bd2:	e072      	b.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	0f1b      	lsrs	r3, r3, #28
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
          break;
 8002c30:	e043      	b.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	e010      	b.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	017d7840 	.word	0x017d7840
 8002c60:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c64:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002c74:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0f1b      	lsrs	r3, r3, #28
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	61fb      	str	r3, [r7, #28]
          break;
 8002c98:	e00f      	b.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca6:	d102      	bne.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002caa:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002cac:	e005      	b.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002cb0:	61fb      	str	r3, [r7, #28]
          break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
          break;
 8002cb8:	bf00      	nop
        }
      }
      break;
 8002cba:	e08a      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002cce:	d06f      	beq.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002cd6:	d878      	bhi.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cde:	d03c      	beq.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce6:	d870      	bhi.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf4:	d169      	bne.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002cf8:	61fb      	str	r3, [r7, #28]
          break;
 8002cfa:	e069      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cfc:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d08:	d109      	bne.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d14:	4a34      	ldr	r2, [pc, #208]	; (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e008      	b.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	0f1b      	lsrs	r3, r3, #28
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	61fb      	str	r3, [r7, #28]
          break;
 8002d58:	e03a      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d66:	d108      	bne.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e007      	b.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0f1b      	lsrs	r3, r3, #28
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]
          break;
 8002dae:	e00f      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbc:	d102      	bne.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002dc0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002dc6:	61fb      	str	r3, [r7, #28]
          break;
 8002dc8:	e002      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
          break;
 8002dce:	bf00      	nop
        }
      }
      break;
 8002dd0:	bf00      	nop
    }
  }
  return frequency;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3724      	adds	r7, #36	; 0x24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	017d7840 	.word	0x017d7840
 8002dec:	00bb8000 	.word	0x00bb8000

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df8:	2600      	movs	r6, #0
 8002dfa:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002e00:	2600      	movs	r6, #0
 8002e02:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002e04:	2600      	movs	r6, #0
 8002e06:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e08:	2600      	movs	r6, #0
 8002e0a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0c:	4ea3      	ldr	r6, [pc, #652]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e0e:	68b6      	ldr	r6, [r6, #8]
 8002e10:	f006 060c 	and.w	r6, r6, #12
 8002e14:	2e0c      	cmp	r6, #12
 8002e16:	f200 8137 	bhi.w	8003088 <HAL_RCC_GetSysClockFreq+0x298>
 8002e1a:	f20f 0c08 	addw	ip, pc, #8
 8002e1e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08003089 	.word	0x08003089
 8002e2c:	08003089 	.word	0x08003089
 8002e30:	08003089 	.word	0x08003089
 8002e34:	08002e5f 	.word	0x08002e5f
 8002e38:	08003089 	.word	0x08003089
 8002e3c:	08003089 	.word	0x08003089
 8002e40:	08003089 	.word	0x08003089
 8002e44:	08002e65 	.word	0x08002e65
 8002e48:	08003089 	.word	0x08003089
 8002e4c:	08003089 	.word	0x08003089
 8002e50:	08003089 	.word	0x08003089
 8002e54:	08002f7b 	.word	0x08002f7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002e5a:	613b      	str	r3, [r7, #16]
       break;
 8002e5c:	e117      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002e60:	613b      	str	r3, [r7, #16]
      break;
 8002e62:	e114      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b8d      	ldr	r3, [pc, #564]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d024      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002e8a:	f04f 0500 	mov.w	r5, #0
 8002e8e:	ea02 0004 	and.w	r0, r2, r4
 8002e92:	ea03 0105 	and.w	r1, r3, r5
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002e98:	fb03 f201 	mul.w	r2, r3, r1
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	fb03 f300 	mul.w	r3, r3, r0
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002ea6:	fba0 0102 	umull	r0, r1, r0, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	f7fd f9a5 	bl	8000204 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e04c      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec4:	4b75      	ldr	r3, [pc, #468]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	ea02 0800 	and.w	r8, r2, r0
 8002edc:	ea03 0901 	and.w	r9, r3, r1
 8002ee0:	4640      	mov	r0, r8
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	014b      	lsls	r3, r1, #5
 8002eee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ef2:	0142      	lsls	r2, r0, #5
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	ebb0 0008 	subs.w	r0, r0, r8
 8002efc:	eb61 0109 	sbc.w	r1, r1, r9
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	018b      	lsls	r3, r1, #6
 8002f0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f0e:	0182      	lsls	r2, r0, #6
 8002f10:	1a12      	subs	r2, r2, r0
 8002f12:	eb63 0301 	sbc.w	r3, r3, r1
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	00d9      	lsls	r1, r3, #3
 8002f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f24:	00d0      	lsls	r0, r2, #3
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	eb12 0208 	adds.w	r2, r2, r8
 8002f2e:	eb43 0309 	adc.w	r3, r3, r9
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	0299      	lsls	r1, r3, #10
 8002f3c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f40:	0290      	lsls	r0, r2, #10
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	f7fd f957 	bl	8000204 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	613b      	str	r3, [r7, #16]
      break;
 8002f78:	e089      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7a:	4948      	ldr	r1, [pc, #288]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f7c:	6849      	ldr	r1, [r1, #4]
 8002f7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f82:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f84:	4945      	ldr	r1, [pc, #276]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f86:	6849      	ldr	r1, [r1, #4]
 8002f88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d024      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4942      	ldr	r1, [pc, #264]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f92:	6849      	ldr	r1, [r1, #4]
 8002f94:	0989      	lsrs	r1, r1, #6
 8002f96:	4608      	mov	r0, r1
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002fa0:	f04f 0500 	mov.w	r5, #0
 8002fa4:	ea00 0204 	and.w	r2, r0, r4
 8002fa8:	ea01 0305 	and.w	r3, r1, r5
 8002fac:	493d      	ldr	r1, [pc, #244]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002fae:	fb01 f003 	mul.w	r0, r1, r3
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	fb01 f102 	mul.w	r1, r1, r2
 8002fb8:	1844      	adds	r4, r0, r1
 8002fba:	493a      	ldr	r1, [pc, #232]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002fbc:	fba2 0101 	umull	r0, r1, r2, r1
 8002fc0:	1863      	adds	r3, r4, r1
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	f7fd f91a 	bl	8000204 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e04a      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	ea02 0400 	and.w	r4, r2, r0
 8002ff2:	ea03 0501 	and.w	r5, r3, r1
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	014b      	lsls	r3, r1, #5
 8003004:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003008:	0142      	lsls	r2, r0, #5
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	1b00      	subs	r0, r0, r4
 8003010:	eb61 0105 	sbc.w	r1, r1, r5
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	018b      	lsls	r3, r1, #6
 800301e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003022:	0182      	lsls	r2, r0, #6
 8003024:	1a12      	subs	r2, r2, r0
 8003026:	eb63 0301 	sbc.w	r3, r3, r1
 800302a:	f04f 0000 	mov.w	r0, #0
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	00d9      	lsls	r1, r3, #3
 8003034:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003038:	00d0      	lsls	r0, r2, #3
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	1912      	adds	r2, r2, r4
 8003040:	eb45 0303 	adc.w	r3, r5, r3
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	0299      	lsls	r1, r3, #10
 800304e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003052:	0290      	lsls	r0, r2, #10
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f7fd f8ce 	bl	8000204 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0f1b      	lsrs	r3, r3, #28
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	613b      	str	r3, [r7, #16]
      break;
 8003086:	e002      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800308a:	613b      	str	r3, [r7, #16]
      break;
 800308c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308e:	693b      	ldr	r3, [r7, #16]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	017d7840 	.word	0x017d7840

080030a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e28d      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8083 	beq.w	80031ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030c8:	4b94      	ldr	r3, [pc, #592]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d019      	beq.n	8003108 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d4:	4b91      	ldr	r3, [pc, #580]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e0:	4b8e      	ldr	r3, [pc, #568]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b8b      	ldr	r3, [pc, #556]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b84      	ldr	r3, [pc, #528]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x124>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e25a      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x90>
 800312a:	4b7c      	ldr	r3, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7b      	ldr	r2, [pc, #492]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xcc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0xb4>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b73      	ldr	r3, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a72      	ldr	r2, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xcc>
 800315c:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6e      	ldr	r2, [pc, #440]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b6c      	ldr	r3, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6b      	ldr	r2, [pc, #428]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fd fdd8 	bl	8000d30 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fd fdd4 	bl	8000d30 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e21f      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b61      	ldr	r3, [pc, #388]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xdc>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fdc4 	bl	8000d30 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fd fdc0 	bl	8000d30 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e20b      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x104>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06f      	beq.n	80032ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031da:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031e6:	4b4d      	ldr	r3, [pc, #308]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d105      	bne.n	80031fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x186>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1d3      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x278>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fd6d 	bl	8000d30 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7fd fd69 	bl	8000d30 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1b4      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x274>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x278>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fd4c 	bl	8000d30 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7fd fd48 	bl	8000d30 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e193      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fd2c 	bl	8000d30 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fd fd28 	bl	8000d30 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e173      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x234>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fd fd15 	bl	8000d30 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7fd fd11 	bl	8000d30 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e15c      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b83      	ldr	r3, [pc, #524]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fd fcd1 	bl	8000d30 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fd fccd 	bl	8000d30 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e118      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <HAL_RCC_OscConfig+0x4b0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x31e>
 80033b8:	4b66      	ldr	r3, [pc, #408]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a65      	ldr	r2, [pc, #404]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x358>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x340>
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a60      	ldr	r2, [pc, #384]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x358>
 80033e8:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a59      	ldr	r2, [pc, #356]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fd fc92 	bl	8000d30 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fc8e 	bl	8000d30 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0d7      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x368>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fc7c 	bl	8000d30 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fc78 	bl	8000d30 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0c1      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80ad 	beq.w	80035d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d060      	beq.n	8003548 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d145      	bne.n	800351a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0x4b4>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd fc4c 	bl	8000d30 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fc48 	bl	8000d30 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e093      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	491b      	ldr	r1, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x4b4>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fd fc1d 	bl	8000d30 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fd fc19 	bl	8000d30 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e064      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x452>
 8003518:	e05c      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_OscConfig+0x4b4>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fd fc06 	bl	8000d30 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd fc02 	bl	8000d30 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04d      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x480>
 8003546:	e045      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e040      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
 8003554:	40023800 	.word	0x40023800
 8003558:	40007000 	.word	0x40007000
 800355c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCC_OscConfig+0x538>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d030      	beq.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d129      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d122      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003598:	4293      	cmp	r3, r2
 800359a:	d119      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10f      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <arm_rfft_fast_init_f32>:
 80035e4:	084b      	lsrs	r3, r1, #1
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	b410      	push	{r4}
 80035ea:	8201      	strh	r1, [r0, #16]
 80035ec:	8003      	strh	r3, [r0, #0]
 80035ee:	d047      	beq.n	8003680 <arm_rfft_fast_init_f32+0x9c>
 80035f0:	d917      	bls.n	8003622 <arm_rfft_fast_init_f32+0x3e>
 80035f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f6:	d03d      	beq.n	8003674 <arm_rfft_fast_init_f32+0x90>
 80035f8:	d929      	bls.n	800364e <arm_rfft_fast_init_f32+0x6a>
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d020      	beq.n	8003642 <arm_rfft_fast_init_f32+0x5e>
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003604:	d113      	bne.n	800362e <arm_rfft_fast_init_f32+0x4a>
 8003606:	4921      	ldr	r1, [pc, #132]	; (800368c <arm_rfft_fast_init_f32+0xa8>)
 8003608:	4a21      	ldr	r2, [pc, #132]	; (8003690 <arm_rfft_fast_init_f32+0xac>)
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <arm_rfft_fast_init_f32+0xb0>)
 800360c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003610:	8184      	strh	r4, [r0, #12]
 8003612:	6081      	str	r1, [r0, #8]
 8003614:	6042      	str	r2, [r0, #4]
 8003616:	6143      	str	r3, [r0, #20]
 8003618:	2000      	movs	r0, #0
 800361a:	b240      	sxtb	r0, r0
 800361c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	2b20      	cmp	r3, #32
 8003624:	d01c      	beq.n	8003660 <arm_rfft_fast_init_f32+0x7c>
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d006      	beq.n	8003638 <arm_rfft_fast_init_f32+0x54>
 800362a:	2b10      	cmp	r3, #16
 800362c:	d01d      	beq.n	800366a <arm_rfft_fast_init_f32+0x86>
 800362e:	20ff      	movs	r0, #255	; 0xff
 8003630:	b240      	sxtb	r0, r0
 8003632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	2438      	movs	r4, #56	; 0x38
 800363a:	4917      	ldr	r1, [pc, #92]	; (8003698 <arm_rfft_fast_init_f32+0xb4>)
 800363c:	4a17      	ldr	r2, [pc, #92]	; (800369c <arm_rfft_fast_init_f32+0xb8>)
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <arm_rfft_fast_init_f32+0xbc>)
 8003640:	e7e6      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 8003642:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8003646:	4917      	ldr	r1, [pc, #92]	; (80036a4 <arm_rfft_fast_init_f32+0xc0>)
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <arm_rfft_fast_init_f32+0xc4>)
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <arm_rfft_fast_init_f32+0xc8>)
 800364c:	e7e0      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	d1ec      	bne.n	800362e <arm_rfft_fast_init_f32+0x4a>
 8003654:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003658:	4915      	ldr	r1, [pc, #84]	; (80036b0 <arm_rfft_fast_init_f32+0xcc>)
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <arm_rfft_fast_init_f32+0xd0>)
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <arm_rfft_fast_init_f32+0xd4>)
 800365e:	e7d7      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 8003660:	2430      	movs	r4, #48	; 0x30
 8003662:	4916      	ldr	r1, [pc, #88]	; (80036bc <arm_rfft_fast_init_f32+0xd8>)
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <arm_rfft_fast_init_f32+0xdc>)
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <arm_rfft_fast_init_f32+0xe0>)
 8003668:	e7d2      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 800366a:	2414      	movs	r4, #20
 800366c:	4916      	ldr	r1, [pc, #88]	; (80036c8 <arm_rfft_fast_init_f32+0xe4>)
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <arm_rfft_fast_init_f32+0xe8>)
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <arm_rfft_fast_init_f32+0xec>)
 8003672:	e7cd      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 8003674:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <arm_rfft_fast_init_f32+0xf0>)
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <arm_rfft_fast_init_f32+0xf4>)
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <arm_rfft_fast_init_f32+0xf8>)
 800367e:	e7c7      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 8003680:	24d0      	movs	r4, #208	; 0xd0
 8003682:	4917      	ldr	r1, [pc, #92]	; (80036e0 <arm_rfft_fast_init_f32+0xfc>)
 8003684:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <arm_rfft_fast_init_f32+0x100>)
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <arm_rfft_fast_init_f32+0x104>)
 8003688:	e7c2      	b.n	8003610 <arm_rfft_fast_init_f32+0x2c>
 800368a:	bf00      	nop
 800368c:	0801257c 	.word	0x0801257c
 8003690:	08003774 	.word	0x08003774
 8003694:	080098e4 	.word	0x080098e4
 8003698:	08007874 	.word	0x08007874
 800369c:	0801433c 	.word	0x0801433c
 80036a0:	0801682c 	.word	0x0801682c
 80036a4:	08010264 	.word	0x08010264
 80036a8:	0800e164 	.word	0x0800e164
 80036ac:	080078e4 	.word	0x080078e4
 80036b0:	080164bc 	.word	0x080164bc
 80036b4:	0800d8e4 	.word	0x0800d8e4
 80036b8:	0801453c 	.word	0x0801453c
 80036bc:	0801111c 	.word	0x0801111c
 80036c0:	08010164 	.word	0x08010164
 80036c4:	08007774 	.word	0x08007774
 80036c8:	08011074 	.word	0x08011074
 80036cc:	0800e0e4 	.word	0x0800e0e4
 80036d0:	0801109c 	.word	0x0801109c
 80036d4:	08014d3c 	.word	0x08014d3c
 80036d8:	0801157c 	.word	0x0801157c
 80036dc:	080150bc 	.word	0x080150bc
 80036e0:	08016a2c 	.word	0x08016a2c
 80036e4:	0801117c 	.word	0x0801117c
 80036e8:	080160bc 	.word	0x080160bc

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4d0d      	ldr	r5, [pc, #52]	; (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	; (8003728 <__libc_init_array+0x3c>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2600      	movs	r6, #0
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4d0b      	ldr	r5, [pc, #44]	; (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	; (8003730 <__libc_init_array+0x44>)
 8003700:	f000 f820 	bl	8003744 <_init>
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2600      	movs	r6, #0
 800370a:	42a6      	cmp	r6, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f855 3b04 	ldr.w	r3, [r5], #4
 8003714:	4798      	blx	r3
 8003716:	3601      	adds	r6, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f855 3b04 	ldr.w	r3, [r5], #4
 800371e:	4798      	blx	r3
 8003720:	3601      	adds	r6, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	08016bd4 	.word	0x08016bd4
 8003728:	08016bd4 	.word	0x08016bd4
 800372c:	08016bd4 	.word	0x08016bd4
 8003730:	08016bd8 	.word	0x08016bd8

08003734 <memset>:
 8003734:	4402      	add	r2, r0
 8003736:	4603      	mov	r3, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	d100      	bne.n	800373e <memset+0xa>
 800373c:	4770      	bx	lr
 800373e:	f803 1b01 	strb.w	r1, [r3], #1
 8003742:	e7f9      	b.n	8003738 <memset+0x4>

08003744 <_init>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr

08003750 <_fini>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr
