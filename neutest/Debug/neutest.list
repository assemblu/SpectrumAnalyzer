
neutest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cb4  08018cb4  0003a078  2**0
                  CONTENTS
  4 .ARM          00000008  08018cb4  08018cb4  00028cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cbc  08018cbc  0003a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018cbc  08018cbc  00028cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018cc0  08018cc0  00028cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a078  20000000  08018cc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a138  2000a078  08022d3c  0003a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200141b0  08022d3c  000441b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2fa  00000000  00000000  0003a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002146  00000000  00000000  000463a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  000484e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  00048e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213e0  00000000  00000000  000496d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba81  00000000  00000000  0006aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f05  00000000  00000000  00076539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0014043e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  00140504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  00142d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000a078 	.word	0x2000a078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005820 	.word	0x08005820

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000a07c 	.word	0x2000a07c
 8000200:	08005820 	.word	0x08005820

08000204 <arm_bitreversal_32>:
 8000204:	1c4b      	adds	r3, r1, #1
 8000206:	2b01      	cmp	r3, #1
 8000208:	bf98      	it	ls
 800020a:	4770      	bxls	lr
 800020c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000210:	1c91      	adds	r1, r2, #2
 8000212:	089b      	lsrs	r3, r3, #2

08000214 <arm_bitreversal_32_0>:
 8000214:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000218:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800021c:	880a      	ldrh	r2, [r1, #0]
 800021e:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000222:	4480      	add	r8, r0
 8000224:	4481      	add	r9, r0
 8000226:	4402      	add	r2, r0
 8000228:	4484      	add	ip, r0
 800022a:	f8d9 7000 	ldr.w	r7, [r9]
 800022e:	f8d8 6000 	ldr.w	r6, [r8]
 8000232:	6815      	ldr	r5, [r2, #0]
 8000234:	f8dc 4000 	ldr.w	r4, [ip]
 8000238:	f8c9 6000 	str.w	r6, [r9]
 800023c:	f8c8 7000 	str.w	r7, [r8]
 8000240:	f8cc 5000 	str.w	r5, [ip]
 8000244:	6014      	str	r4, [r2, #0]
 8000246:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800024a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024e:	6855      	ldr	r5, [r2, #4]
 8000250:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000254:	f8c9 6004 	str.w	r6, [r9, #4]
 8000258:	f8c8 7004 	str.w	r7, [r8, #4]
 800025c:	f8cc 5004 	str.w	r5, [ip, #4]
 8000260:	6054      	str	r4, [r2, #4]
 8000262:	3108      	adds	r1, #8
 8000264:	3b01      	subs	r3, #1
 8000266:	d1d5      	bne.n	8000214 <arm_bitreversal_32_0>
 8000268:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800026c:	4770      	bx	lr

0800026e <arm_bitreversal_16>:
 800026e:	1c4b      	adds	r3, r1, #1
 8000270:	2b01      	cmp	r3, #1
 8000272:	bf98      	it	ls
 8000274:	4770      	bxls	lr
 8000276:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800027a:	1c91      	adds	r1, r2, #2
 800027c:	089b      	lsrs	r3, r3, #2

0800027e <arm_bitreversal_16_0>:
 800027e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000282:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000286:	880a      	ldrh	r2, [r1, #0]
 8000288:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800028c:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000290:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000294:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000298:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 800029c:	f8d9 7000 	ldr.w	r7, [r9]
 80002a0:	f8d8 6000 	ldr.w	r6, [r8]
 80002a4:	6815      	ldr	r5, [r2, #0]
 80002a6:	f8dc 4000 	ldr.w	r4, [ip]
 80002aa:	f8c9 6000 	str.w	r6, [r9]
 80002ae:	f8c8 7000 	str.w	r7, [r8]
 80002b2:	f8cc 5000 	str.w	r5, [ip]
 80002b6:	6014      	str	r4, [r2, #0]
 80002b8:	3108      	adds	r1, #8
 80002ba:	3b01      	subs	r3, #1
 80002bc:	d1df      	bne.n	800027e <arm_bitreversal_16_0>
 80002be:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpun>:
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x10>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d10a      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x20>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0001 	mov.w	r0, #1
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b96e 	b.w	8000f30 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	4604      	mov	r4, r0
 8000c74:	468c      	mov	ip, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8083 	bne.w	8000d82 <__udivmoddi4+0x116>
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	d947      	bls.n	8000d12 <__udivmoddi4+0xa6>
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	b142      	cbz	r2, 8000c9a <__udivmoddi4+0x2e>
 8000c88:	f1c2 0020 	rsb	r0, r2, #32
 8000c8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c90:	4091      	lsls	r1, r2
 8000c92:	4097      	lsls	r7, r2
 8000c94:	ea40 0c01 	orr.w	ip, r0, r1
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca4:	fa1f fe87 	uxth.w	lr, r7
 8000ca8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x60>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 8119 	bcs.w	8000ef4 <__udivmoddi4+0x288>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 8116 	bls.w	8000ef4 <__udivmoddi4+0x288>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	443b      	add	r3, r7
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x8c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	f080 8105 	bcs.w	8000ef8 <__udivmoddi4+0x28c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f240 8102 	bls.w	8000ef8 <__udivmoddi4+0x28c>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	443c      	add	r4, r7
 8000cf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfc:	eba4 040e 	sub.w	r4, r4, lr
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa0>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	b902      	cbnz	r2, 8000d16 <__udivmoddi4+0xaa>
 8000d14:	deff      	udf	#255	; 0xff
 8000d16:	fab2 f282 	clz	r2, r2
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d150      	bne.n	8000dc0 <__udivmoddi4+0x154>
 8000d1e:	1bcb      	subs	r3, r1, r7
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	fa1f f887 	uxth.w	r8, r7
 8000d28:	2601      	movs	r6, #1
 8000d2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2e:	0c21      	lsrs	r1, r4, #16
 8000d30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d38:	fb08 f30c 	mul.w	r3, r8, ip
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0xe4>
 8000d40:	1879      	adds	r1, r7, r1
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0xe2>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	f200 80e9 	bhi.w	8000f20 <__udivmoddi4+0x2b4>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1ac9      	subs	r1, r1, r3
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x10c>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x10a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80d9 	bhi.w	8000f28 <__udivmoddi4+0x2bc>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e7bf      	b.n	8000d02 <__udivmoddi4+0x96>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0x12e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80b1 	beq.w	8000eee <__udivmoddi4+0x282>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x1cc>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0x140>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80b8 	bhi.w	8000f1c <__udivmoddi4+0x2b0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0103 	sbc.w	r1, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	468c      	mov	ip, r1
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0a8      	beq.n	8000d0c <__udivmoddi4+0xa0>
 8000dba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dbe:	e7a5      	b.n	8000d0c <__udivmoddi4+0xa0>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc8:	4097      	lsls	r7, r2
 8000dca:	fa01 f002 	lsl.w	r0, r1, r2
 8000dce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd2:	40d9      	lsrs	r1, r3
 8000dd4:	4330      	orrs	r0, r6
 8000dd6:	0c03      	lsrs	r3, r0, #16
 8000dd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de8:	fb06 f108 	mul.w	r1, r6, r8
 8000dec:	4299      	cmp	r1, r3
 8000dee:	fa04 f402 	lsl.w	r4, r4, r2
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x19c>
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dfa:	f080 808d 	bcs.w	8000f18 <__udivmoddi4+0x2ac>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 808a 	bls.w	8000f18 <__udivmoddi4+0x2ac>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	443b      	add	r3, r7
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b281      	uxth	r1, r0
 8000e0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb00 f308 	mul.w	r3, r0, r8
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x1c4>
 8000e20:	1879      	adds	r1, r7, r1
 8000e22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e26:	d273      	bcs.n	8000f10 <__udivmoddi4+0x2a4>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d971      	bls.n	8000f10 <__udivmoddi4+0x2a4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4439      	add	r1, r7
 8000e30:	1acb      	subs	r3, r1, r3
 8000e32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e36:	e778      	b.n	8000d2a <__udivmoddi4+0xbe>
 8000e38:	f1c6 0c20 	rsb	ip, r6, #32
 8000e3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e44:	431c      	orrs	r4, r3
 8000e46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e56:	431f      	orrs	r7, r3
 8000e58:	0c3b      	lsrs	r3, r7, #16
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fa1f f884 	uxth.w	r8, r4
 8000e62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	fa02 f206 	lsl.w	r2, r2, r6
 8000e74:	fa00 f306 	lsl.w	r3, r0, r6
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x220>
 8000e7a:	1861      	adds	r1, r4, r1
 8000e7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e80:	d248      	bcs.n	8000f14 <__udivmoddi4+0x2a8>
 8000e82:	458a      	cmp	sl, r1
 8000e84:	d946      	bls.n	8000f14 <__udivmoddi4+0x2a8>
 8000e86:	f1a9 0902 	sub.w	r9, r9, #2
 8000e8a:	4421      	add	r1, r4
 8000e8c:	eba1 010a 	sub.w	r1, r1, sl
 8000e90:	b2bf      	uxth	r7, r7
 8000e92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ea2:	45b8      	cmp	r8, r7
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x24a>
 8000ea6:	19e7      	adds	r7, r4, r7
 8000ea8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eac:	d22e      	bcs.n	8000f0c <__udivmoddi4+0x2a0>
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d92c      	bls.n	8000f0c <__udivmoddi4+0x2a0>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4427      	add	r7, r4
 8000eb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eba:	eba7 0708 	sub.w	r7, r7, r8
 8000ebe:	fba0 8902 	umull	r8, r9, r0, r2
 8000ec2:	454f      	cmp	r7, r9
 8000ec4:	46c6      	mov	lr, r8
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	d31a      	bcc.n	8000f00 <__udivmoddi4+0x294>
 8000eca:	d017      	beq.n	8000efc <__udivmoddi4+0x290>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x27a>
 8000ece:	ebb3 020e 	subs.w	r2, r3, lr
 8000ed2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eda:	40f2      	lsrs	r2, r6
 8000edc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ee0:	40f7      	lsrs	r7, r6
 8000ee2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	462e      	mov	r6, r5
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	e70b      	b.n	8000d0c <__udivmoddi4+0xa0>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fd      	b.n	8000cf8 <__udivmoddi4+0x8c>
 8000efc:	4543      	cmp	r3, r8
 8000efe:	d2e5      	bcs.n	8000ecc <__udivmoddi4+0x260>
 8000f00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f04:	eb69 0104 	sbc.w	r1, r9, r4
 8000f08:	3801      	subs	r0, #1
 8000f0a:	e7df      	b.n	8000ecc <__udivmoddi4+0x260>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e7d2      	b.n	8000eb6 <__udivmoddi4+0x24a>
 8000f10:	4660      	mov	r0, ip
 8000f12:	e78d      	b.n	8000e30 <__udivmoddi4+0x1c4>
 8000f14:	4681      	mov	r9, r0
 8000f16:	e7b9      	b.n	8000e8c <__udivmoddi4+0x220>
 8000f18:	4666      	mov	r6, ip
 8000f1a:	e775      	b.n	8000e08 <__udivmoddi4+0x19c>
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	e74a      	b.n	8000db6 <__udivmoddi4+0x14a>
 8000f20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f24:	4439      	add	r1, r7
 8000f26:	e713      	b.n	8000d50 <__udivmoddi4+0xe4>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	443c      	add	r4, r7
 8000f2c:	e724      	b.n	8000d78 <__udivmoddi4+0x10c>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <complexABS>:
uint8_t callbackState = 0;
uint8_t outBuf[14];
uint8_t uartFree = 1;

float complexABS(float real, float compl)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f3e:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(real*real+compl*compl);
 8000f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f46:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f4a:	edd7 7a00 	vldr	s15, [r7]
 8000f4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	ee17 0a90 	vmov	r0, s15
 8000f5a:	f7ff fb17 	bl	800058c <__aeabi_f2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	ec43 2b10 	vmov	d0, r2, r3
 8000f66:	f004 f9ef 	bl	8005348 <sqrt>
 8000f6a:	ec53 2b10 	vmov	r2, r3, d0
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fe13 	bl	8000b9c <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	ee07 3a90 	vmov	s15, r3
}
 8000f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fb48 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f888 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f99a 	bl	80012d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f000 f978 	bl	8001290 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f94c 	bl	800123c <MX_USART2_UART_Init>
  MX_I2S1_Init();
 8000fa4:	f000 f91c 	bl	80011e0 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2S_Transmit_DMA(&hi2s2, txBuf, 16384);
  HAL_I2S_Receive_DMA(&hi2s1, rxBuf, 16384);
 8000fa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fac:	4937      	ldr	r1, [pc, #220]	; (800108c <main+0x104>)
 8000fae:	4838      	ldr	r0, [pc, #224]	; (8001090 <main+0x108>)
 8000fb0:	f001 fab8 	bl	8002524 <HAL_I2S_Receive_DMA>

  arm_rfft_fast_init_f32(&fftHandler, 2048);
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4836      	ldr	r0, [pc, #216]	; (8001094 <main+0x10c>)
 8000fba:	f003 f9bf 	bl	800433c <arm_rfft_fast_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  int fftInPtr = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
				  fftInPtr++;
	  		  }
	  	  }
	  	  */

	  	arm_rfft_fast_f32(&fftHandler, &fftInBuf[0], &fftOutBuf[0], 0);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <main+0x110>)
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <main+0x114>)
 8000fca:	4832      	ldr	r0, [pc, #200]	; (8001094 <main+0x10c>)
 8000fcc:	f003 fa3a 	bl	8004444 <arm_rfft_fast_f32>

	  		int freqs[512];
	  		int freqPoint = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	  		int offset = 150; // variable noisefloor
 8000fd6:	2396      	movs	r3, #150	; 0x96
 8000fd8:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

	  		int i = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
	  		for (i = 0; i< 1024; i += 2)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000fe8:	e043      	b.n	8001072 <main+0xea>
	  		{
	  			freqs[freqPoint] = (int)(28*log10f(complexABS(fftOutBuf[i], fftOutBuf[i+1]))) - offset;
 8000fea:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <main+0x110>)
 8000fec:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <main+0x110>)
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	eef0 0a47 	vmov.f32	s1, s14
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f7ff ff90 	bl	8000f34 <complexABS>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	f004 f9c8 	bl	80053b0 <log10f>
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8001038:	1ad1      	subs	r1, r2, r3
 800103a:	463b      	mov	r3, r7
 800103c:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  			if (freqs[freqPoint] < 0)
 8001044:	463b      	mov	r3, r7
 8001046:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 800104a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da05      	bge.n	800105e <main+0xd6>
	  			{
	  				freqs[freqPoint] = 0;
 8001052:	463b      	mov	r3, r7
 8001054:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8001058:	2100      	movs	r1, #0
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  			}
	  			freqPoint++;
 800105e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	  		for (i = 0; i< 1024; i += 2)
 8001068:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800106c:	3302      	adds	r3, #2
 800106e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8001072:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	dbb6      	blt.n	8000fea <main+0x62>
	  		}

	  		uartFree = 0;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <main+0x118>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	  		callbackState = 0;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <main+0x11c>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  {
 8001088:	e799      	b.n	8000fbe <main+0x36>
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000
 8001090:	200140b0 	.word	0x200140b0
 8001094:	2000c098 	.word	0x2000c098
 8001098:	2000a098 	.word	0x2000a098
 800109c:	20008000 	.word	0x20008000
 80010a0:	2000a000 	.word	0x2000a000
 80010a4:	2000a094 	.word	0x2000a094

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ac      	sub	sp, #176	; 0xb0
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010b2:	2234      	movs	r2, #52	; 0x34
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f93e 	bl	8005338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	225c      	movs	r2, #92	; 0x5c
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 f92f 	bl	8005338 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <SystemClock_Config+0x130>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <SystemClock_Config+0x130>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <SystemClock_Config+0x130>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <SystemClock_Config+0x134>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a37      	ldr	r2, [pc, #220]	; (80011dc <SystemClock_Config+0x134>)
 8001100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <SystemClock_Config+0x134>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2310      	movs	r3, #16
 800111e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800112e:	2308      	movs	r3, #8
 8001130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001134:	23b4      	movs	r3, #180	; 0xb4
 8001136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fc3f 	bl	80039d4 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800115c:	f000 f8e0 	bl	8001320 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001160:	f001 fc00 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800116a:	f000 f8d9 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2302      	movs	r3, #2
 8001174:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001186:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fc39 	bl	8002a04 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001198:	f000 f8c2 	bl	8001320 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 800119c:	2302      	movs	r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80011a0:	2332      	movs	r3, #50	; 0x32
 80011a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80011b8:	2300      	movs	r3, #0
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fd39 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80011cc:	f000 f8a8 	bl	8001320 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	37b0      	adds	r7, #176	; 0xb0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_I2S1_Init+0x54>)
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <MX_I2S1_Init+0x58>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2S1_Init+0x54>)
 80011ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011f0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_I2S1_Init+0x54>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2S1_Init+0x54>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_I2S1_Init+0x54>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_I2S1_Init+0x54>)
 8001208:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800120c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2S1_Init+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2S1_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2S1_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2S1_Init+0x54>)
 8001222:	f001 f887 	bl	8002334 <HAL_I2S_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 800122c:	f000 f878 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200140b0 	.word	0x200140b0
 8001238:	40013000 	.word	0x40013000

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART2_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001262:	2208      	movs	r2, #8
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001274:	f002 fe4c 	bl	8003f10 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f84f 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200140f8 	.word	0x200140f8
 800128c:	40004400 	.word	0x40004400

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_DMA_Init+0x3c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <MX_DMA_Init+0x3c>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_DMA_Init+0x3c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f000 fb01 	bl	80018be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f000 fb1a 	bl	80018f6 <HAL_NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_GPIO_Init+0x4c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <MX_GPIO_Init+0x4c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_GPIO_Init+0x4c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_GPIO_Init+0x4c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <MX_GPIO_Init+0x4c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_GPIO_Init+0x4c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a40      	ldr	r2, [pc, #256]	; (800149c <HAL_I2S_MspInit+0x120>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d17a      	bne.n	8001494 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a30      	ldr	r2, [pc, #192]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_I2S_MspInit+0x124>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80013f2:	23b0      	movs	r3, #176	; 0xb0
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4825      	ldr	r0, [pc, #148]	; (80014a4 <HAL_I2S_MspInit+0x128>)
 800140e:	f000 fdfd 	bl	800200c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001412:	2310      	movs	r3, #16
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	481e      	ldr	r0, [pc, #120]	; (80014a8 <HAL_I2S_MspInit+0x12c>)
 800142e:	f000 fded 	bl	800200c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001434:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <HAL_I2S_MspInit+0x134>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800143a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800143e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800144e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001452:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800145e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001462:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800147a:	f000 fa57 	bl	800192c <HAL_DMA_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001484:	f7ff ff4c 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_I2S_MspInit+0x130>)
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_I2S_MspInit+0x130>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40013000 	.word	0x40013000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020800 	.word	0x40020800
 80014ac:	2001413c 	.word	0x2001413c
 80014b0:	40026410 	.word	0x40026410

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_UART_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_UART_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_UART_MspInit+0x88>)
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_UART_MspInit+0x88>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_UART_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_UART_MspInit+0x88>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_UART_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_UART_MspInit+0x8c>)
 800152a:	f000 fd6f 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40004400 	.word	0x40004400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f89a 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA2_Stream0_IRQHandler+0x10>)
 800159e:	f000 facb 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2001413c 	.word	0x2001413c

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d6:	490e      	ldr	r1, [pc, #56]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ec:	4c0b      	ldr	r4, [pc, #44]	; (800161c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015fa:	f7ff ffd7 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f003 fe77 	bl	80052f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fcc1 	bl	8000f88 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	2000a078 	.word	0x2000a078
  ldr r2, =_sidata
 8001614:	08018cc4 	.word	0x08018cc4
  ldr r2, =_sbss
 8001618:	2000a078 	.word	0x2000a078
  ldr r4, =_ebss
 800161c:	200141b0 	.word	0x200141b0

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f92b 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fe68 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f943 	bl	8001912 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f90b 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000a004 	.word	0x2000a004
 80016c0:	2000a00c 	.word	0x2000a00c
 80016c4:	2000a008 	.word	0x2000a008

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000a00c 	.word	0x2000a00c
 80016ec:	200141ac 	.word	0x200141ac

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200141ac 	.word	0x200141ac

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff29 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff3e 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff31 	bl	800176c <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa2 	bl	8001864 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff feda 	bl	80016f0 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e099      	b.n	8001a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001968:	e00f      	b.n	800198a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196a:	f7ff fec1 	bl	80016f0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b05      	cmp	r3, #5
 8001976:	d908      	bls.n	800198a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e078      	b.n	8001a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e8      	bne.n	800196a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_DMA_Init+0x158>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d107      	bne.n	80019f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4313      	orrs	r3, r2
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f023 0307 	bic.w	r3, r3, #7
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d117      	bne.n	8001a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00e      	beq.n	8001a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fa6f 	bl	8001f14 <DMA_CheckFifoParam>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e016      	b.n	8001a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa26 	bl	8001ea8 <DMA_CalcBaseAndBitshift>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	223f      	movs	r2, #63	; 0x3f
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	f010803f 	.word	0xf010803f

08001a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_DMA_Start_IT+0x26>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e040      	b.n	8001b30 <HAL_DMA_Start_IT+0xa8>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12f      	bne.n	8001b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f9b8 	bl	8001e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	223f      	movs	r2, #63	; 0x3f
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0216 	orr.w	r2, r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e005      	b.n	8001b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_DMA_IRQHandler+0x258>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_DMA_IRQHandler+0x25c>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2208      	movs	r2, #8
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01a      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2208      	movs	r2, #8
 8001b92:	409a      	lsls	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2201      	movs	r2, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2204      	movs	r2, #4
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f043 0204 	orr.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2210      	movs	r2, #16
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d043      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03c      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2210      	movs	r2, #16
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d024      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e01f      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e016      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0208 	bic.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2220      	movs	r2, #32
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 808e 	beq.w	8001dd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8086 	beq.w	8001dd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2220      	movs	r2, #32
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d136      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0216 	bic.w	r2, r2, #22
 8001cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x1da>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0208 	bic.w	r2, r2, #8
 8001d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	223f      	movs	r2, #63	; 0x3f
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d07d      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
        }
        return;
 8001d4e:	e078      	b.n	8001e42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01c      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d108      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d030      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
 8001d7c:	e02b      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d027      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e022      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x29e>
 8001d90:	2000a004 	.word	0x2000a004
 8001d94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0210 	bic.w	r2, r2, #16
 8001db4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d032      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d022      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2205      	movs	r2, #5
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d307      	bcc.n	8001e1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f2      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x2ca>
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e42:	bf00      	nop
    }
  }
}
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop

08001e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d108      	bne.n	8001e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e8a:	e007      	b.n	8001e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3b10      	subs	r3, #16
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <DMA_CalcBaseAndBitshift+0x64>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <DMA_CalcBaseAndBitshift+0x68>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d909      	bls.n	8001eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	1d1a      	adds	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ee8:	e007      	b.n	8001efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	aaaaaaab 	.word	0xaaaaaaab
 8001f10:	08005850 	.word	0x08005850

08001f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11f      	bne.n	8001f6e <DMA_CheckFifoParam+0x5a>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d856      	bhi.n	8001fe2 <DMA_CheckFifoParam+0xce>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <DMA_CheckFifoParam+0x28>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f5f 	.word	0x08001f5f
 8001f44:	08001f4d 	.word	0x08001f4d
 8001f48:	08001fe3 	.word	0x08001fe3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d046      	beq.n	8001fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5c:	e043      	b.n	8001fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f66:	d140      	bne.n	8001fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6c:	e03d      	b.n	8001fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f76:	d121      	bne.n	8001fbc <DMA_CheckFifoParam+0xa8>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d837      	bhi.n	8001fee <DMA_CheckFifoParam+0xda>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <DMA_CheckFifoParam+0x70>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001f9b 	.word	0x08001f9b
 8001f8c:	08001f95 	.word	0x08001f95
 8001f90:	08001fad 	.word	0x08001fad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      break;
 8001f98:	e030      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d025      	beq.n	8001ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001faa:	e022      	b.n	8001ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fb4:	d11f      	bne.n	8001ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fba:	e01c      	b.n	8001ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d903      	bls.n	8001fca <DMA_CheckFifoParam+0xb6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d003      	beq.n	8001fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fc8:	e018      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001fce:	e015      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe0:	e00b      	b.n	8001ffa <DMA_CheckFifoParam+0xe6>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e00a      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e008      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fea:	bf00      	nop
 8001fec:	e006      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fee:	bf00      	nop
 8001ff0:	e004      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e002      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e165      	b.n	80022f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8154 	bne.w	80022ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ae 	beq.w	80022ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_GPIO_Init+0x300>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a5c      	ldr	r2, [pc, #368]	; (800230c <HAL_GPIO_Init+0x300>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_GPIO_Init+0x300>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_GPIO_Init+0x304>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x308>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d025      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_GPIO_Init+0x30c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01f      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_GPIO_Init+0x310>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x212>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x314>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x318>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x20a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_GPIO_Init+0x31c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x206>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a49      	ldr	r2, [pc, #292]	; (800232c <HAL_GPIO_Init+0x320>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x202>
 800220a:	2306      	movs	r3, #6
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800220e:	2307      	movs	r3, #7
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x304>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_GPIO_Init+0x324>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_GPIO_Init+0x324>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae96 	bls.w	8002028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0e1      	b.n	800250a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a6d      	ldr	r2, [pc, #436]	; (8002514 <HAL_I2S_Init+0x1e0>)
 800235e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff f80b 	bl	800137c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800237c:	f023 030f 	bic.w	r3, r3, #15
 8002380:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2202      	movs	r2, #2
 8002388:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d06f      	beq.n	8002472 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800239a:	2310      	movs	r3, #16
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e001      	b.n	80023a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d802      	bhi.n	80023b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_I2S_Init+0x1e4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_I2S_Init+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_I2S_Init+0x1e8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d104      	bne.n	80023d0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 ff60 	bl	800328c <HAL_RCCEx_GetPeriphCLKFreq>
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	e003      	b.n	80023d8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f000 ff5b 	bl	800328c <HAL_RCCEx_GetPeriphCLKFreq>
 80023d6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d125      	bne.n	800242e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	3305      	adds	r3, #5
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e01f      	b.n	800244c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	fbb2 f2f3 	udiv	r2, r2, r3
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	3305      	adds	r3, #5
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e00e      	b.n	800244c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fbb2 f2f3 	udiv	r2, r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	3305      	adds	r3, #5
 800244a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <HAL_I2S_Init+0x1ec>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e003      	b.n	800247a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002472:	2302      	movs	r3, #2
 8002474:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d902      	bls.n	8002486 <HAL_I2S_Init+0x152>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	d907      	bls.n	8002496 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e039      	b.n	800250a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6851      	ldr	r1, [r2, #4]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6992      	ldr	r2, [r2, #24]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d003      	beq.n	80024ea <HAL_I2S_Init+0x1b6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2bb0      	cmp	r3, #176	; 0xb0
 80024e8:	d107      	bne.n	80024fa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024f8:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	08002851 	.word	0x08002851
 8002518:	40003800 	.word	0x40003800
 800251c:	40003c00 	.word	0x40003c00
 8002520:	cccccccd 	.word	0xcccccccd

08002524 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_I2S_Receive_DMA+0x1a>
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0a1      	b.n	8002686 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2S_Receive_DMA+0x2e>
 800254e:	2302      	movs	r3, #2
 8002550:	e099      	b.n	8002686 <HAL_I2S_Receive_DMA+0x162>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	e089      	b.n	8002686 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2204      	movs	r2, #4
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d002      	beq.n	800259e <HAL_I2S_Receive_DMA+0x7a>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10a      	bne.n	80025b4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	865a      	strh	r2, [r3, #50]	; 0x32
 80025b2:	e005      	b.n	80025c0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	4a32      	ldr	r2, [pc, #200]	; (8002690 <HAL_I2S_Receive_DMA+0x16c>)
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_I2S_Receive_DMA+0x170>)
 80025ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_I2S_Receive_DMA+0x174>)
 80025d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e6:	d10a      	bne.n	80025fe <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	4619      	mov	r1, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002614:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002616:	f7ff fa37 	bl	8001a88 <HAL_DMA_Start_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f043 0208 	orr.w	r2, r3, #8
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e022      	b.n	8002686 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800265c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	0800272f 	.word	0x0800272f
 8002694:	080026ed 	.word	0x080026ed
 8002698:	0800274b 	.word	0x0800274b

0800269c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff ffcf 	bl	80026c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ffb7 	bl	80026b0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0203 	bic.w	r2, r2, #3
 8002766:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0208 	orr.w	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff ffa5 	bl	80026d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10e      	bne.n	80027ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff59 	bl	800269c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	b292      	uxth	r2, r2
 8002806:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10e      	bne.n	8002848 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002838:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff3e 	bl	80026c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b04      	cmp	r3, #4
 800286a:	d13a      	bne.n	80028e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d109      	bne.n	800288a <I2S_IRQHandler+0x3a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d102      	bne.n	800288a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ffb4 	bl	80027f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d126      	bne.n	80028e2 <I2S_IRQHandler+0x92>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d11f      	bne.n	80028e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fefb 	bl	80026d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d136      	bne.n	800295c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d109      	bne.n	800290c <I2S_IRQHandler+0xbc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d102      	bne.n	800290c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff45 	bl	8002796 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d122      	bne.n	800295c <I2S_IRQHandler+0x10c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b20      	cmp	r3, #32
 8002922:	d11b      	bne.n	800295c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002932:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff febe 	bl	80026d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7fe feae 	bl	80016f0 <HAL_GetTick>
 8002994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002996:	e009      	b.n	80029ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002998:	f7fe feaa 	bl	80016f0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a6:	d901      	bls.n	80029ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e01f      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d1ee      	bne.n	8002998 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c0:	f7fe fe96 	bl	80016f0 <HAL_GetTick>
 80029c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c6:	e009      	b.n	80029dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c8:	f7fe fe92 	bl	80016f0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d6:	d901      	bls.n	80029dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e007      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e8:	d1ee      	bne.n	80029c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	420e0040 	.word	0x420e0040
 80029fc:	40007000 	.word	0x40007000
 8002a00:	420e0044 	.word	0x420e0044

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0cc      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d044      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e067      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fdfc 	bl	80016f0 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fe fdf8 	bl	80016f0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e04f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d20c      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 fdc7 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fd5c 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08005838 	.word	0x08005838
 8002bc8:	2000a004 	.word	0x2000a004
 8002bcc:	2000a008 	.word	0x2000a008

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000a004 	.word	0x2000a004

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08005848 	.word	0x08005848

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffdc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0b5b      	lsrs	r3, r3, #13
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08005848 	.word	0x08005848

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c70:	4b6f      	ldr	r3, [pc, #444]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c76:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	496c      	ldr	r1, [pc, #432]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c9e:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	4960      	ldr	r1, [pc, #384]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4955      	ldr	r1, [pc, #340]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002cec:	2301      	movs	r3, #1
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d08:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	4946      	ldr	r1, [pc, #280]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d26:	d101      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d34:	2301      	movs	r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 808a 	beq.w	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fcbf 	bl	80016f0 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fcbb 	bl	80016f0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e278      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02f      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d028      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d114      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fc89 	bl	80016f0 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fc85 	bl	80016f0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e240      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ee      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e10:	d114      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	4902      	ldr	r1, [pc, #8]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42470e40 	.word	0x42470e40
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	4944      	ldr	r1, [pc, #272]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	492e      	ldr	r1, [pc, #184]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d011      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	4926      	ldr	r1, [pc, #152]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	491a      	ldr	r1, [pc, #104]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d011      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f18:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	4911      	ldr	r1, [pc, #68]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f32:	2301      	movs	r3, #1
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f44:	f040 80ff 	bne.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fbcf 	bl	80016f0 <HAL_GetTick>
 8002f52:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	e00e      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7fe fbcb 	bl	80016f0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d907      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e188      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	424711e0 	.word	0x424711e0
 8002f70:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	4b7e      	ldr	r3, [pc, #504]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ea      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d028      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d124      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fa8:	4b71      	ldr	r3, [pc, #452]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fba:	4b6d      	ldr	r3, [pc, #436]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc0:	0e1b      	lsrs	r3, r3, #24
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4961      	ldr	r1, [pc, #388]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003010:	2b00      	cmp	r3, #0
 8003012:	d035      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301c:	d130      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003036:	0f1b      	lsrs	r3, r3, #28
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	019b      	lsls	r3, r3, #6
 8003048:	431a      	orrs	r2, r3
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	3b01      	subs	r3, #1
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	071b      	lsls	r3, r3, #28
 8003060:	4943      	ldr	r1, [pc, #268]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800306e:	f023 021f 	bic.w	r2, r3, #31
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	493d      	ldr	r1, [pc, #244]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d029      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003094:	d124      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	0f1b      	lsrs	r3, r3, #28
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	019b      	lsls	r3, r3, #6
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	431a      	orrs	r2, r3
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	071b      	lsls	r3, r3, #28
 80030d8:	4925      	ldr	r1, [pc, #148]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003120:	f7fe fae6 	bl	80016f0 <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003128:	f7fe fae2 	bl	80016f0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e09f      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 8095 	bne.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003154:	f7fe facc 	bl	80016f0 <HAL_GetTick>
 8003158:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800315a:	e00f      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800315c:	f7fe fac8 	bl	80016f0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d908      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e085      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	42470068 	.word	0x42470068
 8003178:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800317c:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d0e8      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d127      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	4928      	ldr	r1, [pc, #160]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	3b01      	subs	r3, #1
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	4922      	ldr	r1, [pc, #136]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003216:	d118      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0e1b      	lsrs	r3, r3, #24
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	4910      	ldr	r1, [pc, #64]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003250:	f7fe fa4e 	bl	80016f0 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003258:	f7fe fa4a 	bl	80016f0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e007      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003276:	d1ef      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3730      	adds	r7, #48	; 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	42470070 	.word	0x42470070

0800328c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	2b07      	cmp	r3, #7
 80032b2:	f200 8224 	bhi.w	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080034bf 	.word	0x080034bf
 80032c0:	080035e9 	.word	0x080035e9
 80032c4:	080036ff 	.word	0x080036ff
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080036ff 	.word	0x080036ff
 80032d0:	080036ff 	.word	0x080036ff
 80032d4:	080036ff 	.word	0x080036ff
 80032d8:	080032dd 	.word	0x080032dd
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80032dc:	4ba8      	ldr	r3, [pc, #672]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032f2:	f000 80d6 	beq.w	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032fc:	f200 80dd 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003306:	f000 809f 	beq.w	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	f200 80d3 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331a:	d05b      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	f200 80ca 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800332c:	f000 80b6 	beq.w	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003336:	f200 80c0 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003340:	f000 8082 	beq.w	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334a:	f200 80b6 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335a:	d03b      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800335c:	e0ad      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003374:	4a83      	ldr	r2, [pc, #524]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800337e:	4b80      	ldr	r3, [pc, #512]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	4a7f      	ldr	r2, [pc, #508]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003390:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800339e:	4b78      	ldr	r3, [pc, #480]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	fb02 f203 	mul.w	r2, r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80033b8:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	61fb      	str	r3, [r7, #28]
          break;
 80033d2:	e073      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033d4:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80033e0:	4b67      	ldr	r3, [pc, #412]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e008      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80033f4:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fe:	4a62      	ldr	r2, [pc, #392]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	0e1b      	lsrs	r3, r3, #24
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003414:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	fb02 f203 	mul.w	r2, r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	61fb      	str	r3, [r7, #28]
          break;
 8003446:	e039      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003448:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003454:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e007      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003466:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003476:	4b42      	ldr	r3, [pc, #264]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0f1b      	lsrs	r3, r3, #28
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003482:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	fb02 f203 	mul.w	r2, r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	61fb      	str	r3, [r7, #28]
          break;
 800349a:	e00f      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800349e:	61fb      	str	r3, [r7, #28]
          break;
 80034a0:	e00c      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80034ae:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80034b0:	61fb      	str	r3, [r7, #28]
          break;
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80034b4:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80034b6:	61fb      	str	r3, [r7, #28]
          break;
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80034ba:	bf00      	nop
        }
      }
      break;
 80034bc:	e11f      	b.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80034be:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80034d0:	d079      	beq.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80034d8:	f200 8082 	bhi.w	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e2:	d03c      	beq.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ea:	d879      	bhi.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034f8:	d172      	bne.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80034fc:	61fb      	str	r3, [r7, #28]
          break;
 80034fe:	e072      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003500:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	0f1b      	lsrs	r3, r3, #28
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	61fb      	str	r3, [r7, #28]
          break;
 800355c:	e043      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356a:	d111      	bne.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	e010      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	00f42400 	.word	0x00f42400
 8003588:	017d7840 	.word	0x017d7840
 800358c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003590:	4b5e      	ldr	r3, [pc, #376]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003598:	4a5d      	ldr	r2, [pc, #372]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0f1b      	lsrs	r3, r3, #28
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	61fb      	str	r3, [r7, #28]
          break;
 80035c4:	e00f      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035c6:	4b51      	ldr	r3, [pc, #324]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	d102      	bne.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80035d6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80035d8:	e005      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80035da:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80035dc:	61fb      	str	r3, [r7, #28]
          break;
 80035de:	e002      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
          break;
 80035e4:	bf00      	nop
        }
      }
      break;
 80035e6:	e08a      	b.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ee:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80035fa:	d06f      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003602:	d878      	bhi.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360a:	d03c      	beq.n	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003612:	d870      	bhi.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003620:	d169      	bne.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003624:	61fb      	str	r3, [r7, #28]
          break;
 8003626:	e069      	b.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003634:	d109      	bne.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003636:	4b35      	ldr	r3, [pc, #212]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e008      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800364a:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800365e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	0f1b      	lsrs	r3, r3, #28
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	61fb      	str	r3, [r7, #28]
          break;
 8003684:	e03a      	b.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003692:	d108      	bne.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e007      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0f1b      	lsrs	r3, r3, #28
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]
          break;
 80036da:	e00f      	b.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d102      	bne.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80036ec:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036f2:	61fb      	str	r3, [r7, #28]
          break;
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
          break;
 80036fa:	bf00      	nop
        }
      }
      break;
 80036fc:	bf00      	nop
    }
  }
  return frequency;
 80036fe:	69fb      	ldr	r3, [r7, #28]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3724      	adds	r7, #36	; 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40023800 	.word	0x40023800
 8003710:	00f42400 	.word	0x00f42400
 8003714:	017d7840 	.word	0x017d7840
 8003718:	00bb8000 	.word	0x00bb8000

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003724:	2600      	movs	r6, #0
 8003726:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003728:	2600      	movs	r6, #0
 800372a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800372c:	2600      	movs	r6, #0
 800372e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003730:	2600      	movs	r6, #0
 8003732:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003734:	2600      	movs	r6, #0
 8003736:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003738:	4ea3      	ldr	r6, [pc, #652]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800373a:	68b6      	ldr	r6, [r6, #8]
 800373c:	f006 060c 	and.w	r6, r6, #12
 8003740:	2e0c      	cmp	r6, #12
 8003742:	f200 8137 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x298>
 8003746:	f20f 0c08 	addw	ip, pc, #8
 800374a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003785 	.word	0x08003785
 8003754:	080039b5 	.word	0x080039b5
 8003758:	080039b5 	.word	0x080039b5
 800375c:	080039b5 	.word	0x080039b5
 8003760:	0800378b 	.word	0x0800378b
 8003764:	080039b5 	.word	0x080039b5
 8003768:	080039b5 	.word	0x080039b5
 800376c:	080039b5 	.word	0x080039b5
 8003770:	08003791 	.word	0x08003791
 8003774:	080039b5 	.word	0x080039b5
 8003778:	080039b5 	.word	0x080039b5
 800377c:	080039b5 	.word	0x080039b5
 8003780:	080038a7 	.word	0x080038a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b91      	ldr	r3, [pc, #580]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003786:	613b      	str	r3, [r7, #16]
       break;
 8003788:	e117      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800378c:	613b      	str	r3, [r7, #16]
      break;
 800378e:	e114      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003798:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379a:	4b8b      	ldr	r3, [pc, #556]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d024      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	461a      	mov	r2, r3
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037b6:	f04f 0500 	mov.w	r5, #0
 80037ba:	ea02 0004 	and.w	r0, r2, r4
 80037be:	ea03 0105 	and.w	r1, r3, r5
 80037c2:	4b83      	ldr	r3, [pc, #524]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80037c4:	fb03 f201 	mul.w	r2, r3, r1
 80037c8:	2300      	movs	r3, #0
 80037ca:	fb03 f300 	mul.w	r3, r3, r0
 80037ce:	4413      	add	r3, r2
 80037d0:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80037d2:	fba0 0102 	umull	r0, r1, r0, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	4619      	mov	r1, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	f7fd fa2b 	bl	8000c3c <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4613      	mov	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e04c      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f0:	4b75      	ldr	r3, [pc, #468]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	461a      	mov	r2, r3
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	ea02 0800 	and.w	r8, r2, r0
 8003808:	ea03 0901 	and.w	r9, r3, r1
 800380c:	4640      	mov	r0, r8
 800380e:	4649      	mov	r1, r9
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	014b      	lsls	r3, r1, #5
 800381a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800381e:	0142      	lsls	r2, r0, #5
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	ebb0 0008 	subs.w	r0, r0, r8
 8003828:	eb61 0109 	sbc.w	r1, r1, r9
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	018b      	lsls	r3, r1, #6
 8003836:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800383a:	0182      	lsls	r2, r0, #6
 800383c:	1a12      	subs	r2, r2, r0
 800383e:	eb63 0301 	sbc.w	r3, r3, r1
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	00d9      	lsls	r1, r3, #3
 800384c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003850:	00d0      	lsls	r0, r2, #3
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	eb12 0208 	adds.w	r2, r2, r8
 800385a:	eb43 0309 	adc.w	r3, r3, r9
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0299      	lsls	r1, r3, #10
 8003868:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800386c:	0290      	lsls	r0, r2, #10
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	461a      	mov	r2, r3
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f7fd f9dd 	bl	8000c3c <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4613      	mov	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800388a:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	3301      	adds	r3, #1
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	613b      	str	r3, [r7, #16]
      break;
 80038a4:	e089      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a6:	4948      	ldr	r1, [pc, #288]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038a8:	6849      	ldr	r1, [r1, #4]
 80038aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038ae:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b0:	4945      	ldr	r1, [pc, #276]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038b2:	6849      	ldr	r1, [r1, #4]
 80038b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038b8:	2900      	cmp	r1, #0
 80038ba:	d024      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4942      	ldr	r1, [pc, #264]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80038be:	6849      	ldr	r1, [r1, #4]
 80038c0:	0989      	lsrs	r1, r1, #6
 80038c2:	4608      	mov	r0, r1
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038cc:	f04f 0500 	mov.w	r5, #0
 80038d0:	ea00 0204 	and.w	r2, r0, r4
 80038d4:	ea01 0305 	and.w	r3, r1, r5
 80038d8:	493d      	ldr	r1, [pc, #244]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80038da:	fb01 f003 	mul.w	r0, r1, r3
 80038de:	2100      	movs	r1, #0
 80038e0:	fb01 f102 	mul.w	r1, r1, r2
 80038e4:	1844      	adds	r4, r0, r1
 80038e6:	493a      	ldr	r1, [pc, #232]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80038e8:	fba2 0101 	umull	r0, r1, r2, r1
 80038ec:	1863      	adds	r3, r4, r1
 80038ee:	4619      	mov	r1, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	f7fd f9a0 	bl	8000c3c <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e04a      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	461a      	mov	r2, r3
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	ea02 0400 	and.w	r4, r2, r0
 800391e:	ea03 0501 	and.w	r5, r3, r1
 8003922:	4620      	mov	r0, r4
 8003924:	4629      	mov	r1, r5
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	014b      	lsls	r3, r1, #5
 8003930:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003934:	0142      	lsls	r2, r0, #5
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	1b00      	subs	r0, r0, r4
 800393c:	eb61 0105 	sbc.w	r1, r1, r5
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	018b      	lsls	r3, r1, #6
 800394a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800394e:	0182      	lsls	r2, r0, #6
 8003950:	1a12      	subs	r2, r2, r0
 8003952:	eb63 0301 	sbc.w	r3, r3, r1
 8003956:	f04f 0000 	mov.w	r0, #0
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	00d9      	lsls	r1, r3, #3
 8003960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003964:	00d0      	lsls	r0, r2, #3
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	1912      	adds	r2, r2, r4
 800396c:	eb45 0303 	adc.w	r3, r5, r3
 8003970:	f04f 0000 	mov.w	r0, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	0299      	lsls	r1, r3, #10
 800397a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800397e:	0290      	lsls	r0, r2, #10
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	461a      	mov	r2, r3
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f7fd f954 	bl	8000c3c <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0f1b      	lsrs	r3, r3, #28
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2b0>)
 80039b6:	613b      	str	r3, [r7, #16]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	693b      	ldr	r3, [r7, #16]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e28d      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8083 	beq.w	8003afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039f4:	4b94      	ldr	r3, [pc, #592]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d019      	beq.n	8003a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a00:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a0c:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a18:	d00c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d112      	bne.n	8003a4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d05b      	beq.n	8003af8 <HAL_RCC_OscConfig+0x124>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d157      	bne.n	8003af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e25a      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d106      	bne.n	8003a64 <HAL_RCC_OscConfig+0x90>
 8003a56:	4b7c      	ldr	r3, [pc, #496]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7b      	ldr	r2, [pc, #492]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xcc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0xb4>
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a75      	ldr	r2, [pc, #468]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a72      	ldr	r2, [pc, #456]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xcc>
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6b      	ldr	r2, [pc, #428]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe22 	bl	80016f0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fe1e 	bl	80016f0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e21f      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xdc>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fe0e 	bl	80016f0 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fe0a 	bl	80016f0 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e20b      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x104>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d06f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b06:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b12:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x186>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e1d3      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4937      	ldr	r1, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x278>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fdb7 	bl	80016f0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd fdb3 	bl	80016f0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1b4      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4925      	ldr	r1, [pc, #148]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x278>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fd96 	bl	80016f0 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd fd92 	bl	80016f0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e193      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d036      	beq.n	8003c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fd76 	bl	80016f0 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fd72 	bl	80016f0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e173      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x234>
 8003c26:	e01b      	b.n	8003c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fd5f 	bl	80016f0 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	e00e      	b.n	8003c54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fd fd5b 	bl	80016f0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d907      	bls.n	8003c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e15c      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470000 	.word	0x42470000
 8003c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	4b8a      	ldr	r3, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ea      	bne.n	8003c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8097 	beq.w	8003d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fd1b 	bl	80016f0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd fd17 	bl	80016f0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e118      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x31e>
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x358>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x340>
 8003cfa:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a60      	ldr	r2, [pc, #384]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a5d      	ldr	r2, [pc, #372]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x358>
 8003d14:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a56      	ldr	r2, [pc, #344]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d26:	f023 0304 	bic.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fcdc 	bl	80016f0 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fcd8 	bl	80016f0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0d7      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCC_OscConfig+0x368>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fcc6 	bl	80016f0 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd fcc2 	bl	80016f0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0c1      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ee      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80ad 	beq.w	8003f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d060      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d145      	bne.n	8003e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fc96 	bl	80016f0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd fc92 	bl	80016f0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e093      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fc67 	bl	80016f0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd fc63 	bl	80016f0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e064      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x452>
 8003e44:	e05c      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fc50 	bl	80016f0 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd fc4c 	bl	80016f0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04d      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x480>
 8003e72:	e045      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e040      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <HAL_RCC_OscConfig+0x538>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d030      	beq.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d129      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d122      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d119      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10f      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03f      	b.n	8003fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fabc 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f829 	bl	8003fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	b09f      	sub	sp, #124	; 0x7c
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	68d9      	ldr	r1, [r3, #12]
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	ea40 0301 	orr.w	r3, r0, r1
 8003fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ff0:	f021 010c 	bic.w	r1, r1, #12
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	6999      	ldr	r1, [r3, #24]
 800400c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	ea40 0301 	orr.w	r3, r0, r1
 8004014:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4bc5      	ldr	r3, [pc, #788]	; (8004330 <UART_SetConfig+0x384>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d004      	beq.n	800402a <UART_SetConfig+0x7e>
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4bc3      	ldr	r3, [pc, #780]	; (8004334 <UART_SetConfig+0x388>)
 8004026:	429a      	cmp	r2, r3
 8004028:	d103      	bne.n	8004032 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800402a:	f7fe fdf1 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 800402e:	6778      	str	r0, [r7, #116]	; 0x74
 8004030:	e002      	b.n	8004038 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004032:	f7fe fdd9 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8004036:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 80b6 	bne.w	80041b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004046:	461c      	mov	r4, r3
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	1891      	adds	r1, r2, r2
 8004052:	6439      	str	r1, [r7, #64]	; 0x40
 8004054:	415b      	adcs	r3, r3
 8004056:	647b      	str	r3, [r7, #68]	; 0x44
 8004058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800405c:	1912      	adds	r2, r2, r4
 800405e:	eb45 0303 	adc.w	r3, r5, r3
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	00d9      	lsls	r1, r3, #3
 800406c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004070:	00d0      	lsls	r0, r2, #3
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	1911      	adds	r1, r2, r4
 8004078:	6639      	str	r1, [r7, #96]	; 0x60
 800407a:	416b      	adcs	r3, r5
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	1891      	adds	r1, r2, r2
 800408a:	63b9      	str	r1, [r7, #56]	; 0x38
 800408c:	415b      	adcs	r3, r3
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004094:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004098:	f7fc fdd0 	bl	8000c3c <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <UART_SetConfig+0x38c>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011e      	lsls	r6, r3, #4
 80040aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ac:	461c      	mov	r4, r3
 80040ae:	f04f 0500 	mov.w	r5, #0
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	6339      	str	r1, [r7, #48]	; 0x30
 80040ba:	415b      	adcs	r3, r3
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040c2:	1912      	adds	r2, r2, r4
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	00d9      	lsls	r1, r3, #3
 80040d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d6:	00d0      	lsls	r0, r2, #3
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	1911      	adds	r1, r2, r4
 80040de:	65b9      	str	r1, [r7, #88]	; 0x58
 80040e0:	416b      	adcs	r3, r5
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80040f2:	415b      	adcs	r3, r3
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040fe:	f7fc fd9d 	bl	8000c3c <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <UART_SetConfig+0x38c>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a87      	ldr	r2, [pc, #540]	; (8004338 <UART_SetConfig+0x38c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004128:	441e      	add	r6, r3
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	4618      	mov	r0, r3
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	1894      	adds	r4, r2, r2
 8004138:	623c      	str	r4, [r7, #32]
 800413a:	415b      	adcs	r3, r3
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004142:	1812      	adds	r2, r2, r0
 8004144:	eb41 0303 	adc.w	r3, r1, r3
 8004148:	f04f 0400 	mov.w	r4, #0
 800414c:	f04f 0500 	mov.w	r5, #0
 8004150:	00dd      	lsls	r5, r3, #3
 8004152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004156:	00d4      	lsls	r4, r2, #3
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	1814      	adds	r4, r2, r0
 800415e:	653c      	str	r4, [r7, #80]	; 0x50
 8004160:	414b      	adcs	r3, r1
 8004162:	657b      	str	r3, [r7, #84]	; 0x54
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	1891      	adds	r1, r2, r2
 8004170:	61b9      	str	r1, [r7, #24]
 8004172:	415b      	adcs	r3, r3
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800417e:	f7fc fd5d 	bl	8000c3c <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b6c      	ldr	r3, [pc, #432]	; (8004338 <UART_SetConfig+0x38c>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <UART_SetConfig+0x38c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4432      	add	r2, r6
 80041ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ae:	e0b9      	b.n	8004324 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b2:	461c      	mov	r4, r3
 80041b4:	f04f 0500 	mov.w	r5, #0
 80041b8:	4622      	mov	r2, r4
 80041ba:	462b      	mov	r3, r5
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	6139      	str	r1, [r7, #16]
 80041c0:	415b      	adcs	r3, r3
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c8:	1912      	adds	r2, r2, r4
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f04f 0000 	mov.w	r0, #0
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	00d9      	lsls	r1, r3, #3
 80041d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041dc:	00d0      	lsls	r0, r2, #3
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	eb12 0804 	adds.w	r8, r2, r4
 80041e6:	eb43 0905 	adc.w	r9, r3, r5
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	008b      	lsls	r3, r1, #2
 80041fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004202:	0082      	lsls	r2, r0, #2
 8004204:	4640      	mov	r0, r8
 8004206:	4649      	mov	r1, r9
 8004208:	f7fc fd18 	bl	8000c3c <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <UART_SetConfig+0x38c>)
 8004212:	fba3 2302 	umull	r2, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	011e      	lsls	r6, r3, #4
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	4618      	mov	r0, r3
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	1894      	adds	r4, r2, r2
 8004228:	60bc      	str	r4, [r7, #8]
 800422a:	415b      	adcs	r3, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004232:	1812      	adds	r2, r2, r0
 8004234:	eb41 0303 	adc.w	r3, r1, r3
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	f04f 0500 	mov.w	r5, #0
 8004240:	00dd      	lsls	r5, r3, #3
 8004242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004246:	00d4      	lsls	r4, r2, #3
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	1814      	adds	r4, r2, r0
 800424e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004250:	414b      	adcs	r3, r1
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	008b      	lsls	r3, r1, #2
 8004268:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800426c:	0082      	lsls	r2, r0, #2
 800426e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004272:	f7fc fce3 	bl	8000c3c <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <UART_SetConfig+0x38c>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	; 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	3332      	adds	r3, #50	; 0x32
 800428e:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <UART_SetConfig+0x38c>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429a:	441e      	add	r6, r3
 800429c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429e:	4618      	mov	r0, r3
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	1894      	adds	r4, r2, r2
 80042aa:	603c      	str	r4, [r7, #0]
 80042ac:	415b      	adcs	r3, r3
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b4:	1812      	adds	r2, r2, r0
 80042b6:	eb41 0303 	adc.w	r3, r1, r3
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	f04f 0500 	mov.w	r5, #0
 80042c2:	00dd      	lsls	r5, r3, #3
 80042c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042c8:	00d4      	lsls	r4, r2, #3
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb12 0a00 	adds.w	sl, r2, r0
 80042d2:	eb43 0b01 	adc.w	fp, r3, r1
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	008b      	lsls	r3, r1, #2
 80042ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ee:	0082      	lsls	r2, r0, #2
 80042f0:	4650      	mov	r0, sl
 80042f2:	4659      	mov	r1, fp
 80042f4:	f7fc fca2 	bl	8000c3c <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <UART_SetConfig+0x38c>)
 80042fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2164      	movs	r1, #100	; 0x64
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	; 0x32
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <UART_SetConfig+0x38c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4432      	add	r2, r6
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	377c      	adds	r7, #124	; 0x7c
 8004328:	46bd      	mov	sp, r7
 800432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432e:	bf00      	nop
 8004330:	40011000 	.word	0x40011000
 8004334:	40011400 	.word	0x40011400
 8004338:	51eb851f 	.word	0x51eb851f

0800433c <arm_rfft_fast_init_f32>:
 800433c:	084b      	lsrs	r3, r1, #1
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	b410      	push	{r4}
 8004342:	8201      	strh	r1, [r0, #16]
 8004344:	8003      	strh	r3, [r0, #0]
 8004346:	d047      	beq.n	80043d8 <arm_rfft_fast_init_f32+0x9c>
 8004348:	d917      	bls.n	800437a <arm_rfft_fast_init_f32+0x3e>
 800434a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434e:	d03d      	beq.n	80043cc <arm_rfft_fast_init_f32+0x90>
 8004350:	d929      	bls.n	80043a6 <arm_rfft_fast_init_f32+0x6a>
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d020      	beq.n	800439a <arm_rfft_fast_init_f32+0x5e>
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	d113      	bne.n	8004386 <arm_rfft_fast_init_f32+0x4a>
 800435e:	4921      	ldr	r1, [pc, #132]	; (80043e4 <arm_rfft_fast_init_f32+0xa8>)
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <arm_rfft_fast_init_f32+0xac>)
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <arm_rfft_fast_init_f32+0xb0>)
 8004364:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004368:	8184      	strh	r4, [r0, #12]
 800436a:	6081      	str	r1, [r0, #8]
 800436c:	6042      	str	r2, [r0, #4]
 800436e:	6143      	str	r3, [r0, #20]
 8004370:	2000      	movs	r0, #0
 8004372:	b240      	sxtb	r0, r0
 8004374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	2b20      	cmp	r3, #32
 800437c:	d01c      	beq.n	80043b8 <arm_rfft_fast_init_f32+0x7c>
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d006      	beq.n	8004390 <arm_rfft_fast_init_f32+0x54>
 8004382:	2b10      	cmp	r3, #16
 8004384:	d01d      	beq.n	80043c2 <arm_rfft_fast_init_f32+0x86>
 8004386:	20ff      	movs	r0, #255	; 0xff
 8004388:	b240      	sxtb	r0, r0
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	2438      	movs	r4, #56	; 0x38
 8004392:	4917      	ldr	r1, [pc, #92]	; (80043f0 <arm_rfft_fast_init_f32+0xb4>)
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <arm_rfft_fast_init_f32+0xb8>)
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <arm_rfft_fast_init_f32+0xbc>)
 8004398:	e7e6      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 800439a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800439e:	4917      	ldr	r1, [pc, #92]	; (80043fc <arm_rfft_fast_init_f32+0xc0>)
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <arm_rfft_fast_init_f32+0xc4>)
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <arm_rfft_fast_init_f32+0xc8>)
 80043a4:	e7e0      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d1ec      	bne.n	8004386 <arm_rfft_fast_init_f32+0x4a>
 80043ac:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80043b0:	4915      	ldr	r1, [pc, #84]	; (8004408 <arm_rfft_fast_init_f32+0xcc>)
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <arm_rfft_fast_init_f32+0xd0>)
 80043b4:	4b16      	ldr	r3, [pc, #88]	; (8004410 <arm_rfft_fast_init_f32+0xd4>)
 80043b6:	e7d7      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043b8:	2430      	movs	r4, #48	; 0x30
 80043ba:	4916      	ldr	r1, [pc, #88]	; (8004414 <arm_rfft_fast_init_f32+0xd8>)
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <arm_rfft_fast_init_f32+0xdc>)
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <arm_rfft_fast_init_f32+0xe0>)
 80043c0:	e7d2      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043c2:	2414      	movs	r4, #20
 80043c4:	4916      	ldr	r1, [pc, #88]	; (8004420 <arm_rfft_fast_init_f32+0xe4>)
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <arm_rfft_fast_init_f32+0xe8>)
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <arm_rfft_fast_init_f32+0xec>)
 80043ca:	e7cd      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043cc:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80043d0:	4916      	ldr	r1, [pc, #88]	; (800442c <arm_rfft_fast_init_f32+0xf0>)
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <arm_rfft_fast_init_f32+0xf4>)
 80043d4:	4b17      	ldr	r3, [pc, #92]	; (8004434 <arm_rfft_fast_init_f32+0xf8>)
 80043d6:	e7c7      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043d8:	24d0      	movs	r4, #208	; 0xd0
 80043da:	4917      	ldr	r1, [pc, #92]	; (8004438 <arm_rfft_fast_init_f32+0xfc>)
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <arm_rfft_fast_init_f32+0x100>)
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <arm_rfft_fast_init_f32+0x104>)
 80043e0:	e7c2      	b.n	8004368 <arm_rfft_fast_init_f32+0x2c>
 80043e2:	bf00      	nop
 80043e4:	08014660 	.word	0x08014660
 80043e8:	08005858 	.word	0x08005858
 80043ec:	0800b9c8 	.word	0x0800b9c8
 80043f0:	08009958 	.word	0x08009958
 80043f4:	08016420 	.word	0x08016420
 80043f8:	08018910 	.word	0x08018910
 80043fc:	08012348 	.word	0x08012348
 8004400:	08010248 	.word	0x08010248
 8004404:	080099c8 	.word	0x080099c8
 8004408:	080185a0 	.word	0x080185a0
 800440c:	0800f9c8 	.word	0x0800f9c8
 8004410:	08016620 	.word	0x08016620
 8004414:	08013200 	.word	0x08013200
 8004418:	08012248 	.word	0x08012248
 800441c:	08009858 	.word	0x08009858
 8004420:	08013158 	.word	0x08013158
 8004424:	080101c8 	.word	0x080101c8
 8004428:	08013180 	.word	0x08013180
 800442c:	08016e20 	.word	0x08016e20
 8004430:	08013660 	.word	0x08013660
 8004434:	080171a0 	.word	0x080171a0
 8004438:	08018b10 	.word	0x08018b10
 800443c:	08013260 	.word	0x08013260
 8004440:	080181a0 	.word	0x080181a0

08004444 <arm_rfft_fast_f32>:
 8004444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004448:	8a06      	ldrh	r6, [r0, #16]
 800444a:	0876      	lsrs	r6, r6, #1
 800444c:	4607      	mov	r7, r0
 800444e:	4615      	mov	r5, r2
 8004450:	8006      	strh	r6, [r0, #0]
 8004452:	460c      	mov	r4, r1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d15c      	bne.n	8004512 <arm_rfft_fast_f32+0xce>
 8004458:	461a      	mov	r2, r3
 800445a:	2301      	movs	r3, #1
 800445c:	f000 fbe6 	bl	8004c2c <arm_cfft_f32>
 8004460:	edd4 7a00 	vldr	s15, [r4]
 8004464:	ed94 7a01 	vldr	s14, [r4, #4]
 8004468:	883e      	ldrh	r6, [r7, #0]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004474:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004478:	ee77 6a87 	vadd.f32	s13, s15, s14
 800447c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004480:	3e01      	subs	r6, #1
 8004482:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004486:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800448a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800448e:	ed85 7a00 	vstr	s14, [r5]
 8004492:	edc5 7a01 	vstr	s15, [r5, #4]
 8004496:	3010      	adds	r0, #16
 8004498:	f105 0210 	add.w	r2, r5, #16
 800449c:	3b08      	subs	r3, #8
 800449e:	f104 0110 	add.w	r1, r4, #16
 80044a2:	ed51 4a02 	vldr	s9, [r1, #-8]
 80044a6:	ed93 5a02 	vldr	s10, [r3, #8]
 80044aa:	ed11 7a01 	vldr	s14, [r1, #-4]
 80044ae:	ed10 6a02 	vldr	s12, [r0, #-8]
 80044b2:	edd3 5a03 	vldr	s11, [r3, #12]
 80044b6:	ed50 6a01 	vldr	s13, [r0, #-4]
 80044ba:	ee75 7a64 	vsub.f32	s15, s10, s9
 80044be:	ee35 4a87 	vadd.f32	s8, s11, s14
 80044c2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80044c6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80044ca:	ee66 4a27 	vmul.f32	s9, s12, s15
 80044ce:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80044d2:	ee34 5a85 	vadd.f32	s10, s9, s10
 80044d6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80044da:	ee66 6a84 	vmul.f32	s13, s13, s8
 80044de:	ee77 7a25 	vadd.f32	s15, s14, s11
 80044e2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80044e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80044ea:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80044ee:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80044f2:	3e01      	subs	r6, #1
 80044f4:	ed42 6a02 	vstr	s13, [r2, #-8]
 80044f8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80044fc:	f1a3 0308 	sub.w	r3, r3, #8
 8004500:	f101 0108 	add.w	r1, r1, #8
 8004504:	f100 0008 	add.w	r0, r0, #8
 8004508:	f102 0208 	add.w	r2, r2, #8
 800450c:	d1c9      	bne.n	80044a2 <arm_rfft_fast_f32+0x5e>
 800450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004512:	edd1 7a00 	vldr	s15, [r1]
 8004516:	edd1 6a01 	vldr	s13, [r1, #4]
 800451a:	6941      	ldr	r1, [r0, #20]
 800451c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004520:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004524:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004528:	ee27 7a23 	vmul.f32	s14, s14, s7
 800452c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004530:	3e01      	subs	r6, #1
 8004532:	ed82 7a00 	vstr	s14, [r2]
 8004536:	edc2 7a01 	vstr	s15, [r2, #4]
 800453a:	00f0      	lsls	r0, r6, #3
 800453c:	b3ee      	cbz	r6, 80045ba <arm_rfft_fast_f32+0x176>
 800453e:	3808      	subs	r0, #8
 8004540:	f101 0e10 	add.w	lr, r1, #16
 8004544:	4420      	add	r0, r4
 8004546:	f104 0110 	add.w	r1, r4, #16
 800454a:	f102 0c10 	add.w	ip, r2, #16
 800454e:	ed90 7a02 	vldr	s14, [r0, #8]
 8004552:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004556:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800455a:	ed90 4a03 	vldr	s8, [r0, #12]
 800455e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004562:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004566:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800456a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800456e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004572:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004576:	ee35 5a44 	vsub.f32	s10, s10, s8
 800457a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800457e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004582:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004586:	ee26 6a24 	vmul.f32	s12, s12, s9
 800458a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800458e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004592:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004596:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800459a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800459e:	3e01      	subs	r6, #1
 80045a0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80045a4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80045a8:	f1a0 0008 	sub.w	r0, r0, #8
 80045ac:	f101 0108 	add.w	r1, r1, #8
 80045b0:	f10e 0e08 	add.w	lr, lr, #8
 80045b4:	f10c 0c08 	add.w	ip, ip, #8
 80045b8:	d1c9      	bne.n	800454e <arm_rfft_fast_f32+0x10a>
 80045ba:	4638      	mov	r0, r7
 80045bc:	4629      	mov	r1, r5
 80045be:	461a      	mov	r2, r3
 80045c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	2301      	movs	r3, #1
 80045c6:	f000 bb31 	b.w	8004c2c <arm_cfft_f32>
 80045ca:	bf00      	nop

080045cc <arm_cfft_radix8by2_f32>:
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	ed2d 8b08 	vpush	{d8-d11}
 80045d4:	f8b0 e000 	ldrh.w	lr, [r0]
 80045d8:	6842      	ldr	r2, [r0, #4]
 80045da:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80045de:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80045e2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80045e6:	4607      	mov	r7, r0
 80045e8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80045ec:	f000 80af 	beq.w	800474e <arm_cfft_radix8by2_f32+0x182>
 80045f0:	3310      	adds	r3, #16
 80045f2:	18ce      	adds	r6, r1, r3
 80045f4:	3210      	adds	r2, #16
 80045f6:	4443      	add	r3, r8
 80045f8:	f101 0510 	add.w	r5, r1, #16
 80045fc:	f108 0410 	add.w	r4, r8, #16
 8004600:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004604:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004608:	ed53 3a03 	vldr	s7, [r3, #-12]
 800460c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004610:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004614:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004618:	ed14 0a02 	vldr	s0, [r4, #-8]
 800461c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004620:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004624:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004628:	ed15 7a01 	vldr	s14, [r5, #-4]
 800462c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004630:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004634:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004638:	ed16 1a01 	vldr	s2, [r6, #-4]
 800463c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004640:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004644:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004648:	ee37 aa27 	vadd.f32	s20, s14, s15
 800464c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004650:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004654:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004658:	ee74 aa80 	vadd.f32	s21, s9, s0
 800465c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004660:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004664:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004668:	ed45 aa02 	vstr	s21, [r5, #-8]
 800466c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004670:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004674:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004678:	ed06 9a03 	vstr	s18, [r6, #-12]
 800467c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004680:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004684:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004688:	ed12 6a03 	vldr	s12, [r2, #-12]
 800468c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004690:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004694:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004698:	ee26 8a86 	vmul.f32	s16, s13, s12
 800469c:	ee24 2a06 	vmul.f32	s4, s8, s12
 80046a0:	ee63 1a22 	vmul.f32	s3, s6, s5
 80046a4:	ee24 4a22 	vmul.f32	s8, s8, s5
 80046a8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80046ac:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80046b0:	ee23 6a86 	vmul.f32	s12, s7, s12
 80046b4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80046b8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80046bc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80046c0:	ee72 3a63 	vsub.f32	s7, s4, s7
 80046c4:	ee71 2a88 	vadd.f32	s5, s3, s16
 80046c8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80046cc:	ed44 2a04 	vstr	s5, [r4, #-16]
 80046d0:	ed43 3a04 	vstr	s7, [r3, #-16]
 80046d4:	ed03 6a03 	vstr	s12, [r3, #-12]
 80046d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046dc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80046e0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80046e4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80046e8:	ee35 6a41 	vsub.f32	s12, s10, s2
 80046ec:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80046f0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80046f4:	ee26 5a87 	vmul.f32	s10, s13, s14
 80046f8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80046fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004700:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004704:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004708:	ee26 7a07 	vmul.f32	s14, s12, s14
 800470c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004710:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004714:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004718:	ee35 6a46 	vsub.f32	s12, s10, s12
 800471c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004720:	f1be 0e01 	subs.w	lr, lr, #1
 8004724:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004728:	f105 0510 	add.w	r5, r5, #16
 800472c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004730:	f106 0610 	add.w	r6, r6, #16
 8004734:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004738:	ed03 7a01 	vstr	s14, [r3, #-4]
 800473c:	f102 0210 	add.w	r2, r2, #16
 8004740:	f104 0410 	add.w	r4, r4, #16
 8004744:	f103 0310 	add.w	r3, r3, #16
 8004748:	f47f af5a 	bne.w	8004600 <arm_cfft_radix8by2_f32+0x34>
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	fa1f f48c 	uxth.w	r4, ip
 8004752:	4608      	mov	r0, r1
 8004754:	2302      	movs	r3, #2
 8004756:	4621      	mov	r1, r4
 8004758:	f000 fae2 	bl	8004d20 <arm_radix8_butterfly_f32>
 800475c:	ecbd 8b08 	vpop	{d8-d11}
 8004760:	4640      	mov	r0, r8
 8004762:	4621      	mov	r1, r4
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	2302      	movs	r3, #2
 8004768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800476c:	f000 bad8 	b.w	8004d20 <arm_radix8_butterfly_f32>

08004770 <arm_cfft_radix8by4_f32>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	ed2d 8b0a 	vpush	{d8-d12}
 8004778:	8802      	ldrh	r2, [r0, #0]
 800477a:	ed91 6a00 	vldr	s12, [r1]
 800477e:	b08f      	sub	sp, #60	; 0x3c
 8004780:	460f      	mov	r7, r1
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	0093      	lsls	r3, r2, #2
 8004786:	900c      	str	r0, [sp, #48]	; 0x30
 8004788:	9103      	str	r1, [sp, #12]
 800478a:	6841      	ldr	r1, [r0, #4]
 800478c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004790:	4638      	mov	r0, r7
 8004792:	4418      	add	r0, r3
 8004794:	4606      	mov	r6, r0
 8004796:	9009      	str	r0, [sp, #36]	; 0x24
 8004798:	4418      	add	r0, r3
 800479a:	edd0 6a00 	vldr	s13, [r0]
 800479e:	edd6 3a00 	vldr	s7, [r6]
 80047a2:	edd6 2a01 	vldr	s5, [r6, #4]
 80047a6:	edd0 7a01 	vldr	s15, [r0, #4]
 80047aa:	900a      	str	r0, [sp, #40]	; 0x28
 80047ac:	ee76 5a26 	vadd.f32	s11, s12, s13
 80047b0:	4604      	mov	r4, r0
 80047b2:	4625      	mov	r5, r4
 80047b4:	441c      	add	r4, r3
 80047b6:	ed94 4a00 	vldr	s8, [r4]
 80047ba:	ed94 5a01 	vldr	s10, [r4, #4]
 80047be:	9401      	str	r4, [sp, #4]
 80047c0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80047c4:	4630      	mov	r0, r6
 80047c6:	ee74 4a24 	vadd.f32	s9, s8, s9
 80047ca:	463e      	mov	r6, r7
 80047cc:	ee14 ea90 	vmov	lr, s9
 80047d0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80047d4:	f846 eb08 	str.w	lr, [r6], #8
 80047d8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80047dc:	edd0 4a01 	vldr	s9, [r0, #4]
 80047e0:	9604      	str	r6, [sp, #16]
 80047e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e6:	9e01      	ldr	r6, [sp, #4]
 80047e8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80047ec:	ed96 2a01 	vldr	s4, [r6, #4]
 80047f0:	ee36 7a24 	vadd.f32	s14, s12, s9
 80047f4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80047f8:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80047fc:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004800:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004804:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004808:	ee73 3a45 	vsub.f32	s7, s6, s10
 800480c:	4604      	mov	r4, r0
 800480e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004812:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004816:	46a3      	mov	fp, r4
 8004818:	ee37 7a02 	vadd.f32	s14, s14, s4
 800481c:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004820:	ee13 8a90 	vmov	r8, s7
 8004824:	46a4      	mov	ip, r4
 8004826:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800482a:	ed87 7a01 	vstr	s14, [r7, #4]
 800482e:	f84b 8b08 	str.w	r8, [fp], #8
 8004832:	f1ac 0704 	sub.w	r7, ip, #4
 8004836:	ed8c 5a01 	vstr	s10, [ip, #4]
 800483a:	f101 0c08 	add.w	ip, r1, #8
 800483e:	462c      	mov	r4, r5
 8004840:	f8cd c014 	str.w	ip, [sp, #20]
 8004844:	ee15 ca90 	vmov	ip, s11
 8004848:	f844 cb08 	str.w	ip, [r4], #8
 800484c:	9407      	str	r4, [sp, #28]
 800484e:	f101 0410 	add.w	r4, r1, #16
 8004852:	ed85 6a01 	vstr	s12, [r5, #4]
 8004856:	0852      	lsrs	r2, r2, #1
 8004858:	9402      	str	r4, [sp, #8]
 800485a:	462c      	mov	r4, r5
 800485c:	f101 0518 	add.w	r5, r1, #24
 8004860:	920b      	str	r2, [sp, #44]	; 0x2c
 8004862:	46b2      	mov	sl, r6
 8004864:	9506      	str	r5, [sp, #24]
 8004866:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800486a:	3a02      	subs	r2, #2
 800486c:	ee16 5a90 	vmov	r5, s13
 8004870:	46b6      	mov	lr, r6
 8004872:	4630      	mov	r0, r6
 8004874:	0852      	lsrs	r2, r2, #1
 8004876:	f84a 5b08 	str.w	r5, [sl], #8
 800487a:	f1a0 0604 	sub.w	r6, r0, #4
 800487e:	edce 7a01 	vstr	s15, [lr, #4]
 8004882:	9208      	str	r2, [sp, #32]
 8004884:	f000 8130 	beq.w	8004ae8 <arm_cfft_radix8by4_f32+0x378>
 8004888:	4691      	mov	r9, r2
 800488a:	9a03      	ldr	r2, [sp, #12]
 800488c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004890:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004894:	3b08      	subs	r3, #8
 8004896:	f102 0510 	add.w	r5, r2, #16
 800489a:	f101 0c20 	add.w	ip, r1, #32
 800489e:	f1a4 020c 	sub.w	r2, r4, #12
 80048a2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80048a6:	4433      	add	r3, r6
 80048a8:	3410      	adds	r4, #16
 80048aa:	4650      	mov	r0, sl
 80048ac:	4659      	mov	r1, fp
 80048ae:	ed55 3a02 	vldr	s7, [r5, #-8]
 80048b2:	ed14 5a02 	vldr	s10, [r4, #-8]
 80048b6:	ed91 7a00 	vldr	s14, [r1]
 80048ba:	edd0 7a00 	vldr	s15, [r0]
 80048be:	ed15 4a01 	vldr	s8, [r5, #-4]
 80048c2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80048c6:	edd0 6a01 	vldr	s13, [r0, #4]
 80048ca:	ed91 6a01 	vldr	s12, [r1, #4]
 80048ce:	ee33 8a85 	vadd.f32	s16, s7, s10
 80048d2:	ee34 0a25 	vadd.f32	s0, s8, s11
 80048d6:	ee78 4a07 	vadd.f32	s9, s16, s14
 80048da:	ee74 5a65 	vsub.f32	s11, s8, s11
 80048de:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80048e2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80048e6:	ed45 4a02 	vstr	s9, [r5, #-8]
 80048ea:	edd1 4a01 	vldr	s9, [r1, #4]
 80048ee:	ed90 4a01 	vldr	s8, [r0, #4]
 80048f2:	ee70 4a24 	vadd.f32	s9, s0, s9
 80048f6:	ee76 aa05 	vadd.f32	s21, s12, s10
 80048fa:	ee74 4a84 	vadd.f32	s9, s9, s8
 80048fe:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004902:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004906:	edd6 1a00 	vldr	s3, [r6]
 800490a:	edd7 0a00 	vldr	s1, [r7]
 800490e:	ed92 4a02 	vldr	s8, [r2, #8]
 8004912:	edd3 3a02 	vldr	s7, [r3, #8]
 8004916:	ed93 2a01 	vldr	s4, [r3, #4]
 800491a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800491e:	edd2 2a01 	vldr	s5, [r2, #4]
 8004922:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004926:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800492a:	ee39 3a81 	vadd.f32	s6, s19, s2
 800492e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004932:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004936:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800493a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800493e:	ee18 aa90 	vmov	sl, s17
 8004942:	f847 a908 	str.w	sl, [r7], #-8
 8004946:	edd2 8a01 	vldr	s17, [r2, #4]
 800494a:	ed93 9a01 	vldr	s18, [r3, #4]
 800494e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004952:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004956:	ee78 8a89 	vadd.f32	s17, s17, s18
 800495a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800495e:	edc7 8a01 	vstr	s17, [r7, #4]
 8004962:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004966:	ed58 8a01 	vldr	s17, [r8, #-4]
 800496a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800496e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004972:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004976:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800497a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800497e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8004982:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004986:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800498a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800498e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8004992:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004996:	ee69 8a28 	vmul.f32	s17, s18, s17
 800499a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800499e:	ee1c aa10 	vmov	sl, s24
 80049a2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80049a6:	f841 ab08 	str.w	sl, [r1], #8
 80049aa:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80049ae:	ee3b bacb 	vsub.f32	s22, s23, s22
 80049b2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80049b6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80049ba:	ed01 aa01 	vstr	s20, [r1, #-4]
 80049be:	edc2 8a01 	vstr	s17, [r2, #4]
 80049c2:	ed82 ba02 	vstr	s22, [r2, #8]
 80049c6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80049ca:	ee74 3a63 	vsub.f32	s7, s8, s7
 80049ce:	ee38 8a47 	vsub.f32	s16, s16, s14
 80049d2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80049d6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80049da:	ee33 3a42 	vsub.f32	s6, s6, s4
 80049de:	ee38 8a67 	vsub.f32	s16, s16, s15
 80049e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80049e6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80049ea:	ee63 8a04 	vmul.f32	s17, s6, s8
 80049ee:	ee28 aa24 	vmul.f32	s20, s16, s9
 80049f2:	ee60 9a04 	vmul.f32	s19, s0, s8
 80049f6:	ee28 8a04 	vmul.f32	s16, s16, s8
 80049fa:	ee20 0a24 	vmul.f32	s0, s0, s9
 80049fe:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004a02:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004a06:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004a0a:	ee14 aa10 	vmov	sl, s8
 8004a0e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004a12:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004a16:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004a1a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004a1e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004a22:	f846 a908 	str.w	sl, [r6], #-8
 8004a26:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004a2a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004a2e:	edc6 3a01 	vstr	s7, [r6, #4]
 8004a32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8004a3e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8004a42:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004a46:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004a4a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004a4e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004a52:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004a56:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004a5a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8004a5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a66:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004a6a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8004a6e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8004a72:	ee15 aa90 	vmov	sl, s11
 8004a76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a7a:	f840 ab08 	str.w	sl, [r0], #8
 8004a7e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004a82:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004a86:	f1b9 0901 	subs.w	r9, r9, #1
 8004a8a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8004a8e:	f105 0508 	add.w	r5, r5, #8
 8004a92:	ed83 1a02 	vstr	s2, [r3, #8]
 8004a96:	edc3 2a01 	vstr	s5, [r3, #4]
 8004a9a:	f108 0808 	add.w	r8, r8, #8
 8004a9e:	f1a2 0208 	sub.w	r2, r2, #8
 8004aa2:	f10c 0c10 	add.w	ip, ip, #16
 8004aa6:	f104 0408 	add.w	r4, r4, #8
 8004aaa:	f10e 0e18 	add.w	lr, lr, #24
 8004aae:	f1a3 0308 	sub.w	r3, r3, #8
 8004ab2:	f47f aefc 	bne.w	80048ae <arm_cfft_radix8by4_f32+0x13e>
 8004ab6:	9908      	ldr	r1, [sp, #32]
 8004ab8:	9802      	ldr	r0, [sp, #8]
 8004aba:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004ac4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004ac8:	9102      	str	r1, [sp, #8]
 8004aca:	9904      	ldr	r1, [sp, #16]
 8004acc:	4419      	add	r1, r3
 8004ace:	9104      	str	r1, [sp, #16]
 8004ad0:	9905      	ldr	r1, [sp, #20]
 8004ad2:	4419      	add	r1, r3
 8004ad4:	9105      	str	r1, [sp, #20]
 8004ad6:	9907      	ldr	r1, [sp, #28]
 8004ad8:	449b      	add	fp, r3
 8004ada:	4419      	add	r1, r3
 8004adc:	449a      	add	sl, r3
 8004ade:	9b06      	ldr	r3, [sp, #24]
 8004ae0:	9107      	str	r1, [sp, #28]
 8004ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ae6:	9306      	str	r3, [sp, #24]
 8004ae8:	9a04      	ldr	r2, [sp, #16]
 8004aea:	9807      	ldr	r0, [sp, #28]
 8004aec:	edd2 3a00 	vldr	s7, [r2]
 8004af0:	ed90 4a00 	vldr	s8, [r0]
 8004af4:	eddb 7a00 	vldr	s15, [fp]
 8004af8:	ed9a 3a00 	vldr	s6, [sl]
 8004afc:	edd2 4a01 	vldr	s9, [r2, #4]
 8004b00:	ed90 7a01 	vldr	s14, [r0, #4]
 8004b04:	ed9b 2a01 	vldr	s4, [fp, #4]
 8004b08:	edda 5a01 	vldr	s11, [sl, #4]
 8004b0c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004b10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004b12:	ee73 6a84 	vadd.f32	s13, s7, s8
 8004b16:	ee34 6a87 	vadd.f32	s12, s9, s14
 8004b1a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8004b1e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8004b22:	ee33 5a05 	vadd.f32	s10, s6, s10
 8004b26:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004b2a:	ed82 5a00 	vstr	s10, [r2]
 8004b2e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004b32:	edda 4a01 	vldr	s9, [sl, #4]
 8004b36:	ee36 5a05 	vadd.f32	s10, s12, s10
 8004b3a:	ee72 3a04 	vadd.f32	s7, s4, s8
 8004b3e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004b42:	ee77 4a67 	vsub.f32	s9, s14, s15
 8004b46:	ed82 5a01 	vstr	s10, [r2, #4]
 8004b4a:	9a05      	ldr	r2, [sp, #20]
 8004b4c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004b50:	edd2 1a00 	vldr	s3, [r2]
 8004b54:	edd2 2a01 	vldr	s5, [r2, #4]
 8004b58:	9a02      	ldr	r2, [sp, #8]
 8004b5a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8004b5e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8004b62:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8004b66:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004b6a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004b6e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004b72:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004b76:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004b7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004b7e:	edcb 2a00 	vstr	s5, [fp]
 8004b82:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004b86:	edd2 3a01 	vldr	s7, [r2, #4]
 8004b8a:	ed92 5a00 	vldr	s10, [r2]
 8004b8e:	9a06      	ldr	r2, [sp, #24]
 8004b90:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004b94:	ee36 6a65 	vsub.f32	s12, s12, s11
 8004b98:	ee66 4a85 	vmul.f32	s9, s13, s10
 8004b9c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8004ba0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004ba4:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004ba8:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004bac:	ee34 6a86 	vadd.f32	s12, s9, s12
 8004bb0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bb8:	edc0 6a01 	vstr	s13, [r0, #4]
 8004bbc:	ed80 6a00 	vstr	s12, [r0]
 8004bc0:	ed92 6a01 	vldr	s12, [r2, #4]
 8004bc4:	9803      	ldr	r0, [sp, #12]
 8004bc6:	ee77 7a43 	vsub.f32	s15, s14, s6
 8004bca:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004bce:	ed92 7a00 	vldr	s14, [r2]
 8004bd2:	ee65 6a87 	vmul.f32	s13, s11, s14
 8004bd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bda:	ee65 5a86 	vmul.f32	s11, s11, s12
 8004bde:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004be2:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	edca 5a01 	vstr	s11, [sl, #4]
 8004bee:	edca 7a00 	vstr	s15, [sl]
 8004bf2:	6872      	ldr	r2, [r6, #4]
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	f000 f892 	bl	8004d20 <arm_radix8_butterfly_f32>
 8004bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bfe:	6872      	ldr	r2, [r6, #4]
 8004c00:	4621      	mov	r1, r4
 8004c02:	2304      	movs	r3, #4
 8004c04:	f000 f88c 	bl	8004d20 <arm_radix8_butterfly_f32>
 8004c08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c0a:	6872      	ldr	r2, [r6, #4]
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	2304      	movs	r3, #4
 8004c10:	f000 f886 	bl	8004d20 <arm_radix8_butterfly_f32>
 8004c14:	9801      	ldr	r0, [sp, #4]
 8004c16:	6872      	ldr	r2, [r6, #4]
 8004c18:	4621      	mov	r1, r4
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	b00f      	add	sp, #60	; 0x3c
 8004c1e:	ecbd 8b0a 	vpop	{d8-d12}
 8004c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f000 b87b 	b.w	8004d20 <arm_radix8_butterfly_f32>
 8004c2a:	bf00      	nop

08004c2c <arm_cfft_f32>:
 8004c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	4606      	mov	r6, r0
 8004c34:	4617      	mov	r7, r2
 8004c36:	460c      	mov	r4, r1
 8004c38:	4698      	mov	r8, r3
 8004c3a:	8805      	ldrh	r5, [r0, #0]
 8004c3c:	d054      	beq.n	8004ce8 <arm_cfft_f32+0xbc>
 8004c3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004c42:	d04c      	beq.n	8004cde <arm_cfft_f32+0xb2>
 8004c44:	d916      	bls.n	8004c74 <arm_cfft_f32+0x48>
 8004c46:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004c4a:	d01a      	beq.n	8004c82 <arm_cfft_f32+0x56>
 8004c4c:	d95c      	bls.n	8004d08 <arm_cfft_f32+0xdc>
 8004c4e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004c52:	d044      	beq.n	8004cde <arm_cfft_f32+0xb2>
 8004c54:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004c58:	d105      	bne.n	8004c66 <arm_cfft_f32+0x3a>
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	6872      	ldr	r2, [r6, #4]
 8004c60:	2301      	movs	r3, #1
 8004c62:	f000 f85d 	bl	8004d20 <arm_radix8_butterfly_f32>
 8004c66:	f1b8 0f00 	cmp.w	r8, #0
 8004c6a:	d111      	bne.n	8004c90 <arm_cfft_f32+0x64>
 8004c6c:	2f01      	cmp	r7, #1
 8004c6e:	d016      	beq.n	8004c9e <arm_cfft_f32+0x72>
 8004c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c74:	2d20      	cmp	r5, #32
 8004c76:	d032      	beq.n	8004cde <arm_cfft_f32+0xb2>
 8004c78:	d94a      	bls.n	8004d10 <arm_cfft_f32+0xe4>
 8004c7a:	2d40      	cmp	r5, #64	; 0x40
 8004c7c:	d0ed      	beq.n	8004c5a <arm_cfft_f32+0x2e>
 8004c7e:	2d80      	cmp	r5, #128	; 0x80
 8004c80:	d1f1      	bne.n	8004c66 <arm_cfft_f32+0x3a>
 8004c82:	4630      	mov	r0, r6
 8004c84:	4621      	mov	r1, r4
 8004c86:	f7ff fca1 	bl	80045cc <arm_cfft_radix8by2_f32>
 8004c8a:	f1b8 0f00 	cmp.w	r8, #0
 8004c8e:	d0ed      	beq.n	8004c6c <arm_cfft_f32+0x40>
 8004c90:	4620      	mov	r0, r4
 8004c92:	89b1      	ldrh	r1, [r6, #12]
 8004c94:	68b2      	ldr	r2, [r6, #8]
 8004c96:	f7fb fab5 	bl	8000204 <arm_bitreversal_32>
 8004c9a:	2f01      	cmp	r7, #1
 8004c9c:	d1e8      	bne.n	8004c70 <arm_cfft_f32+0x44>
 8004c9e:	ee07 5a90 	vmov	s15, r5
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004caa:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d0de      	beq.n	8004c70 <arm_cfft_f32+0x44>
 8004cb2:	f104 0108 	add.w	r1, r4, #8
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	3301      	adds	r3, #1
 8004cba:	429d      	cmp	r5, r3
 8004cbc:	f101 0108 	add.w	r1, r1, #8
 8004cc0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004cc4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004cc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ccc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004cd0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004cd4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004cd8:	d1ee      	bne.n	8004cb8 <arm_cfft_f32+0x8c>
 8004cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	f7ff fd45 	bl	8004770 <arm_cfft_radix8by4_f32>
 8004ce6:	e7be      	b.n	8004c66 <arm_cfft_f32+0x3a>
 8004ce8:	b1ad      	cbz	r5, 8004d16 <arm_cfft_f32+0xea>
 8004cea:	f101 030c 	add.w	r3, r1, #12
 8004cee:	2200      	movs	r2, #0
 8004cf0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004cf4:	3201      	adds	r2, #1
 8004cf6:	eef1 7a67 	vneg.f32	s15, s15
 8004cfa:	4295      	cmp	r5, r2
 8004cfc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004d00:	f103 0308 	add.w	r3, r3, #8
 8004d04:	d1f4      	bne.n	8004cf0 <arm_cfft_f32+0xc4>
 8004d06:	e79a      	b.n	8004c3e <arm_cfft_f32+0x12>
 8004d08:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004d0c:	d0a5      	beq.n	8004c5a <arm_cfft_f32+0x2e>
 8004d0e:	e7aa      	b.n	8004c66 <arm_cfft_f32+0x3a>
 8004d10:	2d10      	cmp	r5, #16
 8004d12:	d0b6      	beq.n	8004c82 <arm_cfft_f32+0x56>
 8004d14:	e7a7      	b.n	8004c66 <arm_cfft_f32+0x3a>
 8004d16:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004d1a:	d894      	bhi.n	8004c46 <arm_cfft_f32+0x1a>
 8004d1c:	e7aa      	b.n	8004c74 <arm_cfft_f32+0x48>
 8004d1e:	bf00      	nop

08004d20 <arm_radix8_butterfly_f32>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	ed2d 8b10 	vpush	{d8-d15}
 8004d28:	b09d      	sub	sp, #116	; 0x74
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	ed9f bac8 	vldr	s22, [pc, #800]	; 8005050 <arm_radix8_butterfly_f32+0x330>
 8004d30:	921a      	str	r2, [sp, #104]	; 0x68
 8004d32:	1d03      	adds	r3, r0, #4
 8004d34:	4682      	mov	sl, r0
 8004d36:	4689      	mov	r9, r1
 8004d38:	468b      	mov	fp, r1
 8004d3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d3c:	9400      	str	r4, [sp, #0]
 8004d3e:	469e      	mov	lr, r3
 8004d40:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004d44:	005a      	lsls	r2, r3, #1
 8004d46:	18d6      	adds	r6, r2, r3
 8004d48:	18f5      	adds	r5, r6, r3
 8004d4a:	9203      	str	r2, [sp, #12]
 8004d4c:	195a      	adds	r2, r3, r5
 8004d4e:	18d0      	adds	r0, r2, r3
 8004d50:	00df      	lsls	r7, r3, #3
 8004d52:	1819      	adds	r1, r3, r0
 8004d54:	463c      	mov	r4, r7
 8004d56:	9701      	str	r7, [sp, #4]
 8004d58:	4457      	add	r7, sl
 8004d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8004d5c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004d66:	eb07 0c04 	add.w	ip, r7, r4
 8004d6a:	9c00      	ldr	r4, [sp, #0]
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8004d72:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004d76:	3204      	adds	r2, #4
 8004d78:	3104      	adds	r1, #4
 8004d7a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8004d7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	eddc 7a00 	vldr	s15, [ip]
 8004d8a:	edd7 6a00 	vldr	s13, [r7]
 8004d8e:	edd6 3a00 	vldr	s7, [r6]
 8004d92:	ed5e aa01 	vldr	s21, [lr, #-4]
 8004d96:	edd5 4a00 	vldr	s9, [r5]
 8004d9a:	ed90 2a00 	vldr	s4, [r0]
 8004d9e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004da2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004da6:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004daa:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8004dae:	ee76 1a87 	vadd.f32	s3, s13, s14
 8004db2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004db6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004dba:	ee33 5a28 	vadd.f32	s10, s6, s17
 8004dbe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004dc2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004dc6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004dca:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8004dce:	ed85 5a00 	vstr	s10, [r5]
 8004dd2:	ed96 1a01 	vldr	s2, [r6, #4]
 8004dd6:	edd7 5a01 	vldr	s11, [r7, #4]
 8004dda:	ed92 aa00 	vldr	s20, [r2]
 8004dde:	ed91 6a00 	vldr	s12, [r1]
 8004de2:	ed9e 9a00 	vldr	s18, [lr]
 8004de6:	ed95 5a01 	vldr	s10, [r5, #4]
 8004dea:	eddc 6a01 	vldr	s13, [ip, #4]
 8004dee:	edd0 9a01 	vldr	s19, [r0, #4]
 8004df2:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004df6:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004dfa:	ee75 3aca 	vsub.f32	s7, s11, s20
 8004dfe:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004e02:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004e06:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004e0a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8004e0e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004e12:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004e16:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004e1a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004e1e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004e22:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004e26:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004e2a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004e2e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004e32:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004e36:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004e3a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004e3e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004e42:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004e46:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004e4a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004e4e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004e52:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004e56:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004e5a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004e5e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004e62:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004e66:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004e6a:	ee75 4a22 	vadd.f32	s9, s10, s5
 8004e6e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004e72:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004e76:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004e7a:	ee75 2a87 	vadd.f32	s5, s11, s14
 8004e7e:	ee31 9a28 	vadd.f32	s18, s2, s17
 8004e82:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004e86:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004e8a:	ee33 2a80 	vadd.f32	s4, s7, s0
 8004e8e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004e92:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004e96:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004e9a:	ee31 1a68 	vsub.f32	s2, s2, s17
 8004e9e:	ee34 4a21 	vadd.f32	s8, s8, s3
 8004ea2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004ea6:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004eaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004eae:	44d8      	add	r8, fp
 8004eb0:	45c1      	cmp	r9, r8
 8004eb2:	ed8e 9a00 	vstr	s18, [lr]
 8004eb6:	ed85 1a01 	vstr	s2, [r5, #4]
 8004eba:	449e      	add	lr, r3
 8004ebc:	ed8c 8a00 	vstr	s16, [ip]
 8004ec0:	441d      	add	r5, r3
 8004ec2:	ed80 6a00 	vstr	s12, [r0]
 8004ec6:	edcc 0a01 	vstr	s1, [ip, #4]
 8004eca:	ed80 4a01 	vstr	s8, [r0, #4]
 8004ece:	449c      	add	ip, r3
 8004ed0:	ed87 2a00 	vstr	s4, [r7]
 8004ed4:	4418      	add	r0, r3
 8004ed6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004eda:	ed42 2a01 	vstr	s5, [r2, #-4]
 8004ede:	ed86 7a00 	vstr	s14, [r6]
 8004ee2:	ed87 3a01 	vstr	s6, [r7, #4]
 8004ee6:	edc1 4a00 	vstr	s9, [r1]
 8004eea:	441f      	add	r7, r3
 8004eec:	edc2 5a00 	vstr	s11, [r2]
 8004ef0:	4419      	add	r1, r3
 8004ef2:	edc6 6a01 	vstr	s13, [r6, #4]
 8004ef6:	441a      	add	r2, r3
 8004ef8:	441e      	add	r6, r3
 8004efa:	f63f af44 	bhi.w	8004d86 <arm_radix8_butterfly_f32+0x66>
 8004efe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f00:	2907      	cmp	r1, #7
 8004f02:	4620      	mov	r0, r4
 8004f04:	f240 81e9 	bls.w	80052da <arm_radix8_butterfly_f32+0x5ba>
 8004f08:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004f0c:	193e      	adds	r6, r7, r4
 8004f0e:	1935      	adds	r5, r6, r4
 8004f10:	9c03      	ldr	r4, [sp, #12]
 8004f12:	9000      	str	r0, [sp, #0]
 8004f14:	4622      	mov	r2, r4
 8004f16:	3201      	adds	r2, #1
 8004f18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004f1c:	9900      	ldr	r1, [sp, #0]
 8004f1e:	1828      	adds	r0, r5, r0
 8004f20:	eb00 0e01 	add.w	lr, r0, r1
 8004f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f26:	440a      	add	r2, r1
 8004f28:	eb04 0c01 	add.w	ip, r4, r1
 8004f2c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004f30:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004f34:	9a00      	ldr	r2, [sp, #0]
 8004f36:	940f      	str	r4, [sp, #60]	; 0x3c
 8004f38:	00ed      	lsls	r5, r5, #3
 8004f3a:	9511      	str	r5, [sp, #68]	; 0x44
 8004f3c:	00d5      	lsls	r5, r2, #3
 8004f3e:	950d      	str	r5, [sp, #52]	; 0x34
 8004f40:	9d01      	ldr	r5, [sp, #4]
 8004f42:	3508      	adds	r5, #8
 8004f44:	9516      	str	r5, [sp, #88]	; 0x58
 8004f46:	9d02      	ldr	r5, [sp, #8]
 8004f48:	3508      	adds	r5, #8
 8004f4a:	0114      	lsls	r4, r2, #4
 8004f4c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f50:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004f52:	940e      	str	r4, [sp, #56]	; 0x38
 8004f54:	00c0      	lsls	r0, r0, #3
 8004f56:	9010      	str	r0, [sp, #64]	; 0x40
 8004f58:	18aa      	adds	r2, r5, r2
 8004f5a:	9207      	str	r2, [sp, #28]
 8004f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f60:	18aa      	adds	r2, r5, r2
 8004f62:	9208      	str	r2, [sp, #32]
 8004f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f66:	18aa      	adds	r2, r5, r2
 8004f68:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004f6e:	f10e 0204 	add.w	r2, lr, #4
 8004f72:	920a      	str	r2, [sp, #40]	; 0x28
 8004f74:	00c9      	lsls	r1, r1, #3
 8004f76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f78:	310c      	adds	r1, #12
 8004f7a:	00f6      	lsls	r6, r6, #3
 8004f7c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8004f80:	9114      	str	r1, [sp, #80]	; 0x50
 8004f82:	18a9      	adds	r1, r5, r2
 8004f84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f86:	9612      	str	r6, [sp, #72]	; 0x48
 8004f88:	00ff      	lsls	r7, r7, #3
 8004f8a:	19ae      	adds	r6, r5, r6
 8004f8c:	3008      	adds	r0, #8
 8004f8e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004f92:	9606      	str	r6, [sp, #24]
 8004f94:	9019      	str	r0, [sp, #100]	; 0x64
 8004f96:	18aa      	adds	r2, r5, r2
 8004f98:	0164      	lsls	r4, r4, #5
 8004f9a:	19ee      	adds	r6, r5, r7
 8004f9c:	f10c 000c 	add.w	r0, ip, #12
 8004fa0:	9713      	str	r7, [sp, #76]	; 0x4c
 8004fa2:	9604      	str	r6, [sp, #16]
 8004fa4:	9015      	str	r0, [sp, #84]	; 0x54
 8004fa6:	9103      	str	r1, [sp, #12]
 8004fa8:	9205      	str	r2, [sp, #20]
 8004faa:	f104 0208 	add.w	r2, r4, #8
 8004fae:	9218      	str	r2, [sp, #96]	; 0x60
 8004fb0:	f04f 0801 	mov.w	r8, #1
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f102 0108 	add.w	r1, r2, #8
 8004fba:	460f      	mov	r7, r1
 8004fbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fc0:	188e      	adds	r6, r1, r2
 8004fc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fc4:	188d      	adds	r5, r1, r2
 8004fc6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004fc8:	188c      	adds	r4, r1, r2
 8004fca:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004fcc:	1888      	adds	r0, r1, r2
 8004fce:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004fd0:	eb01 0c02 	add.w	ip, r1, r2
 8004fd4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004fd6:	440a      	add	r2, r1
 8004fd8:	9903      	ldr	r1, [sp, #12]
 8004fda:	edd1 fa00 	vldr	s31, [r1]
 8004fde:	9905      	ldr	r1, [sp, #20]
 8004fe0:	ed91 fa00 	vldr	s30, [r1]
 8004fe4:	9904      	ldr	r1, [sp, #16]
 8004fe6:	edd1 ea00 	vldr	s29, [r1]
 8004fea:	9906      	ldr	r1, [sp, #24]
 8004fec:	ed91 ea00 	vldr	s28, [r1]
 8004ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff2:	edd1 da00 	vldr	s27, [r1]
 8004ff6:	9908      	ldr	r1, [sp, #32]
 8004ff8:	ed91 da00 	vldr	s26, [r1]
 8004ffc:	9907      	ldr	r1, [sp, #28]
 8004ffe:	edd1 ca00 	vldr	s25, [r1]
 8005002:	9903      	ldr	r1, [sp, #12]
 8005004:	ed91 ca01 	vldr	s24, [r1, #4]
 8005008:	9905      	ldr	r1, [sp, #20]
 800500a:	edd1 ba01 	vldr	s23, [r1, #4]
 800500e:	9904      	ldr	r1, [sp, #16]
 8005010:	edd1 aa01 	vldr	s21, [r1, #4]
 8005014:	9906      	ldr	r1, [sp, #24]
 8005016:	ed91 aa01 	vldr	s20, [r1, #4]
 800501a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800501c:	edd1 7a01 	vldr	s15, [r1, #4]
 8005020:	9908      	ldr	r1, [sp, #32]
 8005022:	edcd 7a00 	vstr	s15, [sp]
 8005026:	edd1 7a01 	vldr	s15, [r1, #4]
 800502a:	9907      	ldr	r1, [sp, #28]
 800502c:	edcd 7a01 	vstr	s15, [sp, #4]
 8005030:	edd1 7a01 	vldr	s15, [r1, #4]
 8005034:	eb0a 0e07 	add.w	lr, sl, r7
 8005038:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800503a:	edcd 7a02 	vstr	s15, [sp, #8]
 800503e:	eb0c 010a 	add.w	r1, ip, sl
 8005042:	4456      	add	r6, sl
 8005044:	4455      	add	r5, sl
 8005046:	4454      	add	r4, sl
 8005048:	4450      	add	r0, sl
 800504a:	4452      	add	r2, sl
 800504c:	46c4      	mov	ip, r8
 800504e:	e001      	b.n	8005054 <arm_radix8_butterfly_f32+0x334>
 8005050:	3f3504f3 	.word	0x3f3504f3
 8005054:	ed96 5a00 	vldr	s10, [r6]
 8005058:	ed52 9a01 	vldr	s19, [r2, #-4]
 800505c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005060:	edd0 7a00 	vldr	s15, [r0]
 8005064:	ed17 7a01 	vldr	s14, [r7, #-4]
 8005068:	edde 3a00 	vldr	s7, [lr]
 800506c:	ed94 3a00 	vldr	s6, [r4]
 8005070:	ed95 2a00 	vldr	s4, [r5]
 8005074:	ed9e 0a01 	vldr	s0, [lr, #4]
 8005078:	ee33 8a85 	vadd.f32	s16, s7, s10
 800507c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005080:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005084:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005088:	ee78 1a04 	vadd.f32	s3, s16, s8
 800508c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005090:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005094:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800509c:	ed8e 6a00 	vstr	s12, [lr]
 80050a0:	edd0 8a01 	vldr	s17, [r0, #4]
 80050a4:	ed95 9a01 	vldr	s18, [r5, #4]
 80050a8:	edd1 2a00 	vldr	s5, [r1]
 80050ac:	ed97 7a00 	vldr	s14, [r7]
 80050b0:	edd4 0a01 	vldr	s1, [r4, #4]
 80050b4:	ed96 6a01 	vldr	s12, [r6, #4]
 80050b8:	edd2 5a00 	vldr	s11, [r2]
 80050bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80050c0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80050c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80050c8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80050cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 80050d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80050d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80050d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80050dc:	ee75 8a69 	vsub.f32	s17, s10, s19
 80050e0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80050e4:	ee35 5a29 	vadd.f32	s10, s10, s19
 80050e8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80050ec:	ee30 2a06 	vadd.f32	s4, s0, s12
 80050f0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80050f4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80050f8:	ee32 9a08 	vadd.f32	s18, s4, s16
 80050fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005100:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005104:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005108:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800510c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005110:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005114:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005118:	ee30 6a46 	vsub.f32	s12, s0, s12
 800511c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005120:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005124:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005128:	ee32 7a64 	vsub.f32	s14, s4, s9
 800512c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005130:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005134:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005138:	ee75 8a85 	vadd.f32	s17, s11, s10
 800513c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005140:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005144:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005148:	ee79 1a41 	vsub.f32	s3, s18, s2
 800514c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005150:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005154:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005158:	ee72 4a24 	vadd.f32	s9, s4, s9
 800515c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005160:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005164:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005168:	ee77 9a85 	vadd.f32	s19, s15, s10
 800516c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8005170:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005174:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005178:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800517c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005180:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005184:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005188:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800518c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005190:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005194:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005198:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800519c:	ee35 3a03 	vadd.f32	s6, s10, s6
 80051a0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80051a4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80051a8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80051ac:	ed9d 4a02 	vldr	s8, [sp, #8]
 80051b0:	ed8e 1a01 	vstr	s2, [lr, #4]
 80051b4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80051b8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80051bc:	ed9d 7a01 	vldr	s14, [sp, #4]
 80051c0:	ed86 3a00 	vstr	s6, [r6]
 80051c4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80051c8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80051cc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80051d0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80051d4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80051d8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80051dc:	ee27 7a24 	vmul.f32	s14, s14, s9
 80051e0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80051e4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80051e8:	ee64 8a28 	vmul.f32	s17, s8, s17
 80051ec:	ed9d 4a00 	vldr	s8, [sp]
 80051f0:	edc6 6a01 	vstr	s13, [r6, #4]
 80051f4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80051f8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80051fc:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005200:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005204:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005208:	ee74 4a84 	vadd.f32	s9, s9, s8
 800520c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005210:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005214:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005218:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800521c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005220:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005224:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005228:	ee30 0a68 	vsub.f32	s0, s0, s17
 800522c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005230:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005234:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005238:	44dc      	add	ip, fp
 800523a:	45e1      	cmp	r9, ip
 800523c:	ed84 9a00 	vstr	s18, [r4]
 8005240:	edc4 3a01 	vstr	s7, [r4, #4]
 8005244:	449e      	add	lr, r3
 8005246:	ed02 7a01 	vstr	s14, [r2, #-4]
 800524a:	edc2 2a00 	vstr	s5, [r2]
 800524e:	441e      	add	r6, r3
 8005250:	ed85 2a00 	vstr	s4, [r5]
 8005254:	ed85 8a01 	vstr	s16, [r5, #4]
 8005258:	441c      	add	r4, r3
 800525a:	ed47 1a01 	vstr	s3, [r7, #-4]
 800525e:	ed87 0a00 	vstr	s0, [r7]
 8005262:	441a      	add	r2, r3
 8005264:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005268:	edc1 9a00 	vstr	s19, [r1]
 800526c:	441d      	add	r5, r3
 800526e:	edc0 0a00 	vstr	s1, [r0]
 8005272:	441f      	add	r7, r3
 8005274:	ed80 6a01 	vstr	s12, [r0, #4]
 8005278:	4419      	add	r1, r3
 800527a:	4418      	add	r0, r3
 800527c:	f63f aeea 	bhi.w	8005054 <arm_radix8_butterfly_f32+0x334>
 8005280:	9a03      	ldr	r2, [sp, #12]
 8005282:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005284:	440a      	add	r2, r1
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	990e      	ldr	r1, [sp, #56]	; 0x38
 800528a:	9a05      	ldr	r2, [sp, #20]
 800528c:	440a      	add	r2, r1
 800528e:	9205      	str	r2, [sp, #20]
 8005290:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005292:	9a04      	ldr	r2, [sp, #16]
 8005294:	440a      	add	r2, r1
 8005296:	9204      	str	r2, [sp, #16]
 8005298:	9912      	ldr	r1, [sp, #72]	; 0x48
 800529a:	9a06      	ldr	r2, [sp, #24]
 800529c:	440a      	add	r2, r1
 800529e:	9206      	str	r2, [sp, #24]
 80052a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80052a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a4:	440a      	add	r2, r1
 80052a6:	9209      	str	r2, [sp, #36]	; 0x24
 80052a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80052aa:	9a08      	ldr	r2, [sp, #32]
 80052ac:	440a      	add	r2, r1
 80052ae:	9208      	str	r2, [sp, #32]
 80052b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052b2:	9a07      	ldr	r2, [sp, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	9207      	str	r2, [sp, #28]
 80052b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052bc:	f108 0801 	add.w	r8, r8, #1
 80052c0:	3208      	adds	r2, #8
 80052c2:	4588      	cmp	r8, r1
 80052c4:	920a      	str	r2, [sp, #40]	; 0x28
 80052c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052c8:	f47f ae75 	bne.w	8004fb6 <arm_radix8_butterfly_f32+0x296>
 80052cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	46c3      	mov	fp, r8
 80052d4:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80052d8:	e532      	b.n	8004d40 <arm_radix8_butterfly_f32+0x20>
 80052da:	b01d      	add	sp, #116	; 0x74
 80052dc:	ecbd 8b10 	vpop	{d8-d15}
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052e4 <__errno>:
 80052e4:	4b01      	ldr	r3, [pc, #4]	; (80052ec <__errno+0x8>)
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	2000a010 	.word	0x2000a010

080052f0 <__libc_init_array>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4d0d      	ldr	r5, [pc, #52]	; (8005328 <__libc_init_array+0x38>)
 80052f4:	4c0d      	ldr	r4, [pc, #52]	; (800532c <__libc_init_array+0x3c>)
 80052f6:	1b64      	subs	r4, r4, r5
 80052f8:	10a4      	asrs	r4, r4, #2
 80052fa:	2600      	movs	r6, #0
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	d109      	bne.n	8005314 <__libc_init_array+0x24>
 8005300:	4d0b      	ldr	r5, [pc, #44]	; (8005330 <__libc_init_array+0x40>)
 8005302:	4c0c      	ldr	r4, [pc, #48]	; (8005334 <__libc_init_array+0x44>)
 8005304:	f000 fa8c 	bl	8005820 <_init>
 8005308:	1b64      	subs	r4, r4, r5
 800530a:	10a4      	asrs	r4, r4, #2
 800530c:	2600      	movs	r6, #0
 800530e:	42a6      	cmp	r6, r4
 8005310:	d105      	bne.n	800531e <__libc_init_array+0x2e>
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	f855 3b04 	ldr.w	r3, [r5], #4
 8005318:	4798      	blx	r3
 800531a:	3601      	adds	r6, #1
 800531c:	e7ee      	b.n	80052fc <__libc_init_array+0xc>
 800531e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005322:	4798      	blx	r3
 8005324:	3601      	adds	r6, #1
 8005326:	e7f2      	b.n	800530e <__libc_init_array+0x1e>
 8005328:	08018cbc 	.word	0x08018cbc
 800532c:	08018cbc 	.word	0x08018cbc
 8005330:	08018cbc 	.word	0x08018cbc
 8005334:	08018cc0 	.word	0x08018cc0

08005338 <memset>:
 8005338:	4402      	add	r2, r0
 800533a:	4603      	mov	r3, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	d100      	bne.n	8005342 <memset+0xa>
 8005340:	4770      	bx	lr
 8005342:	f803 1b01 	strb.w	r1, [r3], #1
 8005346:	e7f9      	b.n	800533c <memset+0x4>

08005348 <sqrt>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	ed2d 8b02 	vpush	{d8}
 800534e:	ec55 4b10 	vmov	r4, r5, d0
 8005352:	f000 f863 	bl	800541c <__ieee754_sqrt>
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <sqrt+0x64>)
 8005358:	eeb0 8a40 	vmov.f32	s16, s0
 800535c:	eef0 8a60 	vmov.f32	s17, s1
 8005360:	f993 3000 	ldrsb.w	r3, [r3]
 8005364:	3301      	adds	r3, #1
 8005366:	d019      	beq.n	800539c <sqrt+0x54>
 8005368:	4622      	mov	r2, r4
 800536a:	462b      	mov	r3, r5
 800536c:	4620      	mov	r0, r4
 800536e:	4629      	mov	r1, r5
 8005370:	f7fb fbfe 	bl	8000b70 <__aeabi_dcmpun>
 8005374:	b990      	cbnz	r0, 800539c <sqrt+0x54>
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb fbcf 	bl	8000b20 <__aeabi_dcmplt>
 8005382:	b158      	cbz	r0, 800539c <sqrt+0x54>
 8005384:	f7ff ffae 	bl	80052e4 <__errno>
 8005388:	2321      	movs	r3, #33	; 0x21
 800538a:	6003      	str	r3, [r0, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f7fb fa7c 	bl	8000890 <__aeabi_ddiv>
 8005398:	ec41 0b18 	vmov	d8, r0, r1
 800539c:	eeb0 0a48 	vmov.f32	s0, s16
 80053a0:	eef0 0a68 	vmov.f32	s1, s17
 80053a4:	ecbd 8b02 	vpop	{d8}
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	bf00      	nop
 80053ac:	2000a074 	.word	0x2000a074

080053b0 <log10f>:
 80053b0:	b508      	push	{r3, lr}
 80053b2:	ed2d 8b02 	vpush	{d8}
 80053b6:	eeb0 8a40 	vmov.f32	s16, s0
 80053ba:	f000 f8e3 	bl	8005584 <__ieee754_log10f>
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <log10f+0x60>)
 80053c0:	f993 3000 	ldrsb.w	r3, [r3]
 80053c4:	3301      	adds	r3, #1
 80053c6:	d014      	beq.n	80053f2 <log10f+0x42>
 80053c8:	eeb4 8a48 	vcmp.f32	s16, s16
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d60f      	bvs.n	80053f2 <log10f+0x42>
 80053d2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053da:	d80a      	bhi.n	80053f2 <log10f+0x42>
 80053dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80053e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e4:	d108      	bne.n	80053f8 <log10f+0x48>
 80053e6:	f7ff ff7d 	bl	80052e4 <__errno>
 80053ea:	2322      	movs	r3, #34	; 0x22
 80053ec:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005414 <log10f+0x64>
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	ecbd 8b02 	vpop	{d8}
 80053f6:	bd08      	pop	{r3, pc}
 80053f8:	f7ff ff74 	bl	80052e4 <__errno>
 80053fc:	ecbd 8b02 	vpop	{d8}
 8005400:	2321      	movs	r3, #33	; 0x21
 8005402:	6003      	str	r3, [r0, #0]
 8005404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <log10f+0x68>)
 800540a:	f000 b913 	b.w	8005634 <nanf>
 800540e:	bf00      	nop
 8005410:	2000a074 	.word	0x2000a074
 8005414:	ff800000 	.word	0xff800000
 8005418:	08018cb0 	.word	0x08018cb0

0800541c <__ieee754_sqrt>:
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	ec55 4b10 	vmov	r4, r5, d0
 8005424:	4e56      	ldr	r6, [pc, #344]	; (8005580 <__ieee754_sqrt+0x164>)
 8005426:	43ae      	bics	r6, r5
 8005428:	ee10 0a10 	vmov	r0, s0
 800542c:	ee10 3a10 	vmov	r3, s0
 8005430:	4629      	mov	r1, r5
 8005432:	462a      	mov	r2, r5
 8005434:	d110      	bne.n	8005458 <__ieee754_sqrt+0x3c>
 8005436:	ee10 2a10 	vmov	r2, s0
 800543a:	462b      	mov	r3, r5
 800543c:	f7fb f8fe 	bl	800063c <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4620      	mov	r0, r4
 8005446:	4629      	mov	r1, r5
 8005448:	f7fa ff42 	bl	80002d0 <__adddf3>
 800544c:	4604      	mov	r4, r0
 800544e:	460d      	mov	r5, r1
 8005450:	ec45 4b10 	vmov	d0, r4, r5
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	2d00      	cmp	r5, #0
 800545a:	dc10      	bgt.n	800547e <__ieee754_sqrt+0x62>
 800545c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005460:	4330      	orrs	r0, r6
 8005462:	d0f5      	beq.n	8005450 <__ieee754_sqrt+0x34>
 8005464:	b15d      	cbz	r5, 800547e <__ieee754_sqrt+0x62>
 8005466:	ee10 2a10 	vmov	r2, s0
 800546a:	462b      	mov	r3, r5
 800546c:	ee10 0a10 	vmov	r0, s0
 8005470:	f7fa ff2c 	bl	80002cc <__aeabi_dsub>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	f7fb fa0a 	bl	8000890 <__aeabi_ddiv>
 800547c:	e7e6      	b.n	800544c <__ieee754_sqrt+0x30>
 800547e:	1509      	asrs	r1, r1, #20
 8005480:	d076      	beq.n	8005570 <__ieee754_sqrt+0x154>
 8005482:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005486:	07ce      	lsls	r6, r1, #31
 8005488:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800548c:	bf5e      	ittt	pl
 800548e:	0fda      	lsrpl	r2, r3, #31
 8005490:	005b      	lslpl	r3, r3, #1
 8005492:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005496:	0fda      	lsrs	r2, r3, #31
 8005498:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800549c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80054a0:	2000      	movs	r0, #0
 80054a2:	106d      	asrs	r5, r5, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	f04f 0e16 	mov.w	lr, #22
 80054aa:	4684      	mov	ip, r0
 80054ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054b0:	eb0c 0401 	add.w	r4, ip, r1
 80054b4:	4294      	cmp	r4, r2
 80054b6:	bfde      	ittt	le
 80054b8:	1b12      	suble	r2, r2, r4
 80054ba:	eb04 0c01 	addle.w	ip, r4, r1
 80054be:	1840      	addle	r0, r0, r1
 80054c0:	0052      	lsls	r2, r2, #1
 80054c2:	f1be 0e01 	subs.w	lr, lr, #1
 80054c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80054ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80054ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054d2:	d1ed      	bne.n	80054b0 <__ieee754_sqrt+0x94>
 80054d4:	4671      	mov	r1, lr
 80054d6:	2720      	movs	r7, #32
 80054d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80054dc:	4562      	cmp	r2, ip
 80054de:	eb04 060e 	add.w	r6, r4, lr
 80054e2:	dc02      	bgt.n	80054ea <__ieee754_sqrt+0xce>
 80054e4:	d113      	bne.n	800550e <__ieee754_sqrt+0xf2>
 80054e6:	429e      	cmp	r6, r3
 80054e8:	d811      	bhi.n	800550e <__ieee754_sqrt+0xf2>
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	eb06 0e04 	add.w	lr, r6, r4
 80054f0:	da43      	bge.n	800557a <__ieee754_sqrt+0x15e>
 80054f2:	f1be 0f00 	cmp.w	lr, #0
 80054f6:	db40      	blt.n	800557a <__ieee754_sqrt+0x15e>
 80054f8:	f10c 0801 	add.w	r8, ip, #1
 80054fc:	eba2 020c 	sub.w	r2, r2, ip
 8005500:	429e      	cmp	r6, r3
 8005502:	bf88      	it	hi
 8005504:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005508:	1b9b      	subs	r3, r3, r6
 800550a:	4421      	add	r1, r4
 800550c:	46c4      	mov	ip, r8
 800550e:	0052      	lsls	r2, r2, #1
 8005510:	3f01      	subs	r7, #1
 8005512:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005516:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800551a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800551e:	d1dd      	bne.n	80054dc <__ieee754_sqrt+0xc0>
 8005520:	4313      	orrs	r3, r2
 8005522:	d006      	beq.n	8005532 <__ieee754_sqrt+0x116>
 8005524:	1c4c      	adds	r4, r1, #1
 8005526:	bf13      	iteet	ne
 8005528:	3101      	addne	r1, #1
 800552a:	3001      	addeq	r0, #1
 800552c:	4639      	moveq	r1, r7
 800552e:	f021 0101 	bicne.w	r1, r1, #1
 8005532:	1043      	asrs	r3, r0, #1
 8005534:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005538:	0849      	lsrs	r1, r1, #1
 800553a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800553e:	07c2      	lsls	r2, r0, #31
 8005540:	bf48      	it	mi
 8005542:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005546:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800554a:	460c      	mov	r4, r1
 800554c:	463d      	mov	r5, r7
 800554e:	e77f      	b.n	8005450 <__ieee754_sqrt+0x34>
 8005550:	0ada      	lsrs	r2, r3, #11
 8005552:	3815      	subs	r0, #21
 8005554:	055b      	lsls	r3, r3, #21
 8005556:	2a00      	cmp	r2, #0
 8005558:	d0fa      	beq.n	8005550 <__ieee754_sqrt+0x134>
 800555a:	02d7      	lsls	r7, r2, #11
 800555c:	d50a      	bpl.n	8005574 <__ieee754_sqrt+0x158>
 800555e:	f1c1 0420 	rsb	r4, r1, #32
 8005562:	fa23 f404 	lsr.w	r4, r3, r4
 8005566:	1e4d      	subs	r5, r1, #1
 8005568:	408b      	lsls	r3, r1
 800556a:	4322      	orrs	r2, r4
 800556c:	1b41      	subs	r1, r0, r5
 800556e:	e788      	b.n	8005482 <__ieee754_sqrt+0x66>
 8005570:	4608      	mov	r0, r1
 8005572:	e7f0      	b.n	8005556 <__ieee754_sqrt+0x13a>
 8005574:	0052      	lsls	r2, r2, #1
 8005576:	3101      	adds	r1, #1
 8005578:	e7ef      	b.n	800555a <__ieee754_sqrt+0x13e>
 800557a:	46e0      	mov	r8, ip
 800557c:	e7be      	b.n	80054fc <__ieee754_sqrt+0xe0>
 800557e:	bf00      	nop
 8005580:	7ff00000 	.word	0x7ff00000

08005584 <__ieee754_log10f>:
 8005584:	b508      	push	{r3, lr}
 8005586:	ee10 2a10 	vmov	r2, s0
 800558a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800558e:	ed2d 8b02 	vpush	{d8}
 8005592:	d108      	bne.n	80055a6 <__ieee754_log10f+0x22>
 8005594:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800561c <__ieee754_log10f+0x98>
 8005598:	eddf 7a21 	vldr	s15, [pc, #132]	; 8005620 <__ieee754_log10f+0x9c>
 800559c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80055a0:	ecbd 8b02 	vpop	{d8}
 80055a4:	bd08      	pop	{r3, pc}
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	da02      	bge.n	80055b0 <__ieee754_log10f+0x2c>
 80055aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 80055ae:	e7f3      	b.n	8005598 <__ieee754_log10f+0x14>
 80055b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80055b4:	db02      	blt.n	80055bc <__ieee754_log10f+0x38>
 80055b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80055ba:	e7f1      	b.n	80055a0 <__ieee754_log10f+0x1c>
 80055bc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80055c0:	bfbf      	itttt	lt
 80055c2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8005624 <__ieee754_log10f+0xa0>
 80055c6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80055ca:	f06f 0118 	mvnlt.w	r1, #24
 80055ce:	ee17 2a90 	vmovlt	r2, s15
 80055d2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80055d6:	bfa8      	it	ge
 80055d8:	2100      	movge	r1, #0
 80055da:	3b7f      	subs	r3, #127	; 0x7f
 80055dc:	440b      	add	r3, r1
 80055de:	0fd9      	lsrs	r1, r3, #31
 80055e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80055ec:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80055f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80055f4:	ee00 3a10 	vmov	s0, r3
 80055f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80055fc:	f000 f820 	bl	8005640 <__ieee754_logf>
 8005600:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005628 <__ieee754_log10f+0xa4>
 8005604:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005608:	eddf 7a08 	vldr	s15, [pc, #32]	; 800562c <__ieee754_log10f+0xa8>
 800560c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005610:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005630 <__ieee754_log10f+0xac>
 8005614:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005618:	e7c2      	b.n	80055a0 <__ieee754_log10f+0x1c>
 800561a:	bf00      	nop
 800561c:	cc000000 	.word	0xcc000000
 8005620:	00000000 	.word	0x00000000
 8005624:	4c000000 	.word	0x4c000000
 8005628:	3ede5bd9 	.word	0x3ede5bd9
 800562c:	355427db 	.word	0x355427db
 8005630:	3e9a2080 	.word	0x3e9a2080

08005634 <nanf>:
 8005634:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800563c <nanf+0x8>
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	7fc00000 	.word	0x7fc00000

08005640 <__ieee754_logf>:
 8005640:	ee10 3a10 	vmov	r3, s0
 8005644:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005648:	d106      	bne.n	8005658 <__ieee754_logf+0x18>
 800564a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80057e0 <__ieee754_logf+0x1a0>
 800564e:	eddf 7a65 	vldr	s15, [pc, #404]	; 80057e4 <__ieee754_logf+0x1a4>
 8005652:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005656:	4770      	bx	lr
 8005658:	2b00      	cmp	r3, #0
 800565a:	da02      	bge.n	8005662 <__ieee754_logf+0x22>
 800565c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005660:	e7f5      	b.n	800564e <__ieee754_logf+0xe>
 8005662:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005666:	db02      	blt.n	800566e <__ieee754_logf+0x2e>
 8005668:	ee30 0a00 	vadd.f32	s0, s0, s0
 800566c:	4770      	bx	lr
 800566e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005672:	bfb8      	it	lt
 8005674:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80057e8 <__ieee754_logf+0x1a8>
 8005678:	485c      	ldr	r0, [pc, #368]	; (80057ec <__ieee754_logf+0x1ac>)
 800567a:	bfbe      	ittt	lt
 800567c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005680:	f06f 0118 	mvnlt.w	r1, #24
 8005684:	ee17 3a90 	vmovlt	r3, s15
 8005688:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800568c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005690:	4418      	add	r0, r3
 8005692:	bfa8      	it	ge
 8005694:	2100      	movge	r1, #0
 8005696:	3a7f      	subs	r2, #127	; 0x7f
 8005698:	440a      	add	r2, r1
 800569a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800569e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80056a2:	4319      	orrs	r1, r3
 80056a4:	ee00 1a10 	vmov	s0, r1
 80056a8:	4951      	ldr	r1, [pc, #324]	; (80057f0 <__ieee754_logf+0x1b0>)
 80056aa:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80056ae:	f103 000f 	add.w	r0, r3, #15
 80056b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80056b6:	4001      	ands	r1, r0
 80056b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056bc:	bb89      	cbnz	r1, 8005722 <__ieee754_logf+0xe2>
 80056be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	d10f      	bne.n	80056e8 <__ieee754_logf+0xa8>
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	f000 8085 	beq.w	80057d8 <__ieee754_logf+0x198>
 80056ce:	ee07 2a90 	vmov	s15, r2
 80056d2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80057f4 <__ieee754_logf+0x1b4>
 80056d6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80057f8 <__ieee754_logf+0x1b8>
 80056da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80056e2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80056e6:	4770      	bx	lr
 80056e8:	eddf 6a44 	vldr	s13, [pc, #272]	; 80057fc <__ieee754_logf+0x1bc>
 80056ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80056f0:	eee0 7a66 	vfms.f32	s15, s0, s13
 80056f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80056f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056fc:	b912      	cbnz	r2, 8005704 <__ieee754_logf+0xc4>
 80056fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005702:	4770      	bx	lr
 8005704:	ee07 2a90 	vmov	s15, r2
 8005708:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80057f4 <__ieee754_logf+0x1b4>
 800570c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005710:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005714:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005718:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80057f8 <__ieee754_logf+0x1b8>
 800571c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005720:	4770      	bx	lr
 8005722:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005726:	ee70 7a27 	vadd.f32	s15, s0, s15
 800572a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005800 <__ieee754_logf+0x1c0>
 800572e:	eddf 4a35 	vldr	s9, [pc, #212]	; 8005804 <__ieee754_logf+0x1c4>
 8005732:	4935      	ldr	r1, [pc, #212]	; (8005808 <__ieee754_logf+0x1c8>)
 8005734:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005738:	4419      	add	r1, r3
 800573a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800573e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005742:	430b      	orrs	r3, r1
 8005744:	2b00      	cmp	r3, #0
 8005746:	ee07 2a90 	vmov	s15, r2
 800574a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800574e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005752:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005756:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800580c <__ieee754_logf+0x1cc>
 800575a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800575e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8005810 <__ieee754_logf+0x1d0>
 8005762:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005766:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005814 <__ieee754_logf+0x1d4>
 800576a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800576e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8005818 <__ieee754_logf+0x1d8>
 8005772:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005776:	eddf 7a29 	vldr	s15, [pc, #164]	; 800581c <__ieee754_logf+0x1dc>
 800577a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800577e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005782:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005786:	dd1c      	ble.n	80057c2 <__ieee754_logf+0x182>
 8005788:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800578c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005790:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005798:	ee67 7a86 	vmul.f32	s15, s15, s12
 800579c:	b922      	cbnz	r2, 80057a8 <__ieee754_logf+0x168>
 800579e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80057a6:	4770      	bx	lr
 80057a8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80057f4 <__ieee754_logf+0x1b4>
 80057ac:	eee6 7a86 	vfma.f32	s15, s13, s12
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80057b8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80057f8 <__ieee754_logf+0x1b8>
 80057bc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80057c0:	4770      	bx	lr
 80057c2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80057c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d0e9      	beq.n	80057a2 <__ieee754_logf+0x162>
 80057ce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80057f4 <__ieee754_logf+0x1b4>
 80057d2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80057d6:	e7ed      	b.n	80057b4 <__ieee754_logf+0x174>
 80057d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80057e4 <__ieee754_logf+0x1a4>
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	cc000000 	.word	0xcc000000
 80057e4:	00000000 	.word	0x00000000
 80057e8:	4c000000 	.word	0x4c000000
 80057ec:	004afb20 	.word	0x004afb20
 80057f0:	007ffff0 	.word	0x007ffff0
 80057f4:	3717f7d1 	.word	0x3717f7d1
 80057f8:	3f317180 	.word	0x3f317180
 80057fc:	3eaaaaab 	.word	0x3eaaaaab
 8005800:	3e1cd04f 	.word	0x3e1cd04f
 8005804:	3e178897 	.word	0x3e178897
 8005808:	ffcf5c30 	.word	0xffcf5c30
 800580c:	3e638e29 	.word	0x3e638e29
 8005810:	3ecccccd 	.word	0x3ecccccd
 8005814:	3e3a3325 	.word	0x3e3a3325
 8005818:	3e924925 	.word	0x3e924925
 800581c:	3f2aaaab 	.word	0x3f2aaaab

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
