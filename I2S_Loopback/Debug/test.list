
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004664  08004664  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800466c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  08004678  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004678  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a59b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be3  00000000  00000000  0002a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cc4  00000000  00000000  0002d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0e7  00000000  00000000  0004f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21fa  00000000  00000000  0005b183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e0  00000000  00000000  0012d3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004624 	.word	0x08004624

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004624 	.word	0x08004624

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fd28 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8cc 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa70 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fa38 	bl	8000980 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000510:	f000 fa0c 	bl	800092c <MX_USART2_UART_Init>
  MX_I2S1_Init();
 8000514:	f000 f9ae 	bl	8000874 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000518:	f000 f9da 	bl	80008d0 <MX_I2S2_Init>
  MX_ADC1_Init();
 800051c:	f000 f958 	bl	80007d0 <MX_ADC1_Init>
  HAL_I2S_Receive_DMA(&hi2s1, rxBuf, 4);
 8000520:	2204      	movs	r2, #4
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <main+0x3c>)
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x40>)
 8000526:	f002 f919 	bl	800275c <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, txBuf, 4);
 800052a:	2204      	movs	r2, #4
 800052c:	4904      	ldr	r1, [pc, #16]	; (8000540 <main+0x44>)
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x48>)
 8000530:	f002 f86c 	bl	800260c <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x38>
 8000536:	bf00      	nop
 8000538:	20000080 	.word	0x20000080
 800053c:	20000090 	.word	0x20000090
 8000540:	20000028 	.word	0x20000028
 8000544:	200001dc 	.word	0x200001dc

08000548 <HAL_I2S_RxHalfCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
		int v;
	  HAL_ADC_Start(&hadc1);
 8000550:	4824      	ldr	r0, [pc, #144]	; (80005e4 <HAL_I2S_RxHalfCpltCallback+0x9c>)
 8000552:	f000 fdb5 	bl	80010c0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000556:	f04f 31ff 	mov.w	r1, #4294967295
 800055a:	4822      	ldr	r0, [pc, #136]	; (80005e4 <HAL_I2S_RxHalfCpltCallback+0x9c>)
 800055c:	f000 fe82 	bl	8001264 <HAL_ADC_PollForConversion>
	  v = HAL_ADC_GetValue(&hadc1);
 8000560:	4820      	ldr	r0, [pc, #128]	; (80005e4 <HAL_I2S_RxHalfCpltCallback+0x9c>)
 8000562:	f000 ff0a 	bl	800137a <HAL_ADC_GetValue>
 8000566:	4603      	mov	r3, r0
 8000568:	617b      	str	r3, [r7, #20]
	  v=(v*59 / 1023) + 1;
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	4613      	mov	r3, r2
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_I2S_RxHalfCpltCallback+0xa0>)
 8000578:	fb82 1203 	smull	r1, r2, r2, r3
 800057c:	441a      	add	r2, r3
 800057e:	1252      	asrs	r2, r2, #9
 8000580:	17db      	asrs	r3, r3, #31
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
	//  uint16_t d=1;
	  int left=(rxBuf[0]<<16 | rxBuf[1]);
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_I2S_RxHalfCpltCallback+0xa4>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_I2S_RxHalfCpltCallback+0xa4>)
 8000590:	8852      	ldrh	r2, [r2, #2]
 8000592:	4313      	orrs	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
	  int right=(rxBuf[2]<<16 | rxBuf[3]);
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_I2S_RxHalfCpltCallback+0xa4>)
 8000598:	889b      	ldrh	r3, [r3, #4]
 800059a:	041b      	lsls	r3, r3, #16
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <HAL_I2S_RxHalfCpltCallback+0xa4>)
 800059e:	88d2      	ldrh	r2, [r2, #6]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
	  left=left/v;
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ac:	613b      	str	r3, [r7, #16]
	  right=right/v;
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]
	  txBuf[0]=(left>>16)&0xFFFF;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 80005c0:	801a      	strh	r2, [r3, #0]
	  txBuf[1]=left&0xFFFF;
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 80005c8:	805a      	strh	r2, [r3, #2]
	  txBuf[2]=(right>>16)&0xFFFF;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 80005d2:	809a      	strh	r2, [r3, #4]
	  txBuf[3]=right&0xFFFF;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 80005da:	80da      	strh	r2, [r3, #6]
}
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000038 	.word	0x20000038
 80005e8:	80200803 	.word	0x80200803
 80005ec:	20000080 	.word	0x20000080
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
		int v;
	  HAL_ADC_Start(&hadc1);
 80005fc:	4824      	ldr	r0, [pc, #144]	; (8000690 <HAL_I2S_RxCpltCallback+0x9c>)
 80005fe:	f000 fd5f 	bl	80010c0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4822      	ldr	r0, [pc, #136]	; (8000690 <HAL_I2S_RxCpltCallback+0x9c>)
 8000608:	f000 fe2c 	bl	8001264 <HAL_ADC_PollForConversion>
	  v = HAL_ADC_GetValue(&hadc1);
 800060c:	4820      	ldr	r0, [pc, #128]	; (8000690 <HAL_I2S_RxCpltCallback+0x9c>)
 800060e:	f000 feb4 	bl	800137a <HAL_ADC_GetValue>
 8000612:	4603      	mov	r3, r0
 8000614:	617b      	str	r3, [r7, #20]
	  v=(v*59 / 1023) + 1;
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	4613      	mov	r3, r2
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <HAL_I2S_RxCpltCallback+0xa0>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	441a      	add	r2, r3
 800062a:	1252      	asrs	r2, r2, #9
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
	  //uint16_t d=((r - 0) * (60 - 1) / (1023 - 0)) + 1;
	//  uint16_t d=1;
	  int left=(rxBuf[4]<<16 | rxBuf[5]);
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_I2S_RxCpltCallback+0xa4>)
 8000636:	891b      	ldrh	r3, [r3, #8]
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_I2S_RxCpltCallback+0xa4>)
 800063c:	8952      	ldrh	r2, [r2, #10]
 800063e:	4313      	orrs	r3, r2
 8000640:	613b      	str	r3, [r7, #16]
	  int right=(rxBuf[6]<<16 | rxBuf[7]);
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_I2S_RxCpltCallback+0xa4>)
 8000644:	899b      	ldrh	r3, [r3, #12]
 8000646:	041b      	lsls	r3, r3, #16
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_I2S_RxCpltCallback+0xa4>)
 800064a:	89d2      	ldrh	r2, [r2, #14]
 800064c:	4313      	orrs	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
	  left=left/v;
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	fb92 f3f3 	sdiv	r3, r2, r3
 8000658:	613b      	str	r3, [r7, #16]
	  right=right/v;
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000662:	60fb      	str	r3, [r7, #12]
	  txBuf[4]=(left>>16)&0xFFFF;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	0c1b      	lsrs	r3, r3, #16
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_I2S_RxCpltCallback+0xa8>)
 800066c:	811a      	strh	r2, [r3, #8]
	  txBuf[5]=left&0xFFFF;
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_I2S_RxCpltCallback+0xa8>)
 8000674:	815a      	strh	r2, [r3, #10]
	  txBuf[6]=(right>>16)&0xFFFF;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <HAL_I2S_RxCpltCallback+0xa8>)
 800067e:	819a      	strh	r2, [r3, #12]
	  txBuf[7]=right&0xFFFF;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_I2S_RxCpltCallback+0xa8>)
 8000686:	81da      	strh	r2, [r3, #14]
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000038 	.word	0x20000038
 8000694:	80200803 	.word	0x80200803
 8000698:	20000080 	.word	0x20000080
 800069c:	20000028 	.word	0x20000028

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0ac      	sub	sp, #176	; 0xb0
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 ffb0 	bl	8004614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	225c      	movs	r2, #92	; 0x5c
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 ffa1 	bl	8004614 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <SystemClock_Config+0x128>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a3b      	ldr	r2, [pc, #236]	; (80007c8 <SystemClock_Config+0x128>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <SystemClock_Config+0x128>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <SystemClock_Config+0x12c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fa:	4a34      	ldr	r2, [pc, #208]	; (80007cc <SystemClock_Config+0x12c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <SystemClock_Config+0x12c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	2301      	movs	r3, #1
 8000714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072a:	2308      	movs	r3, #8
 800072c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fa89 	bl	8003c64 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000758:	f000 f9a2 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000772:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fa35 	bl	8002be8 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000784:	f000 f98c 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8000788:	2303      	movs	r3, #3
 800078a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800078c:	2332      	movs	r3, #50	; 0x32
 800078e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80007a8:	2300      	movs	r3, #0
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fb33 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80007bc:	f000 f970 	bl	8000aa0 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	37b0      	adds	r7, #176	; 0xb0
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0x98>)
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <MX_ADC1_Init+0x9c>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_ADC1_Init+0x98>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_ADC1_Init+0xa0>)
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC1_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0x98>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x98>)
 8000832:	f000 fc01 	bl	8001038 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 f930 	bl	8000aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0x98>)
 8000852:	f000 fd9f 	bl	8001394 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 f920 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000038 	.word	0x20000038
 800086c:	40012000 	.word	0x40012000
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2S1_Init+0x54>)
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_I2S1_Init+0x58>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2S1_Init+0x54>)
 8000880:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000884:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2S1_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2S1_Init+0x54>)
 800088e:	2203      	movs	r2, #3
 8000890:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_I2S1_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_I2S1_Init+0x54>)
 800089c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008a0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2S1_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_I2S1_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2S1_Init+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2S1_Init+0x54>)
 80008b6:	f001 fdb1 	bl	800241c <HAL_I2S_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80008c0:	f000 f8ee 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000090 	.word	0x20000090
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_I2S2_Init+0x54>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_I2S2_Init+0x58>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2S2_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_I2S2_Init+0x54>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2S2_Init+0x54>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_I2S2_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_I2S2_Init+0x54>)
 80008f6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2S2_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_I2S2_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2S2_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_I2S2_Init+0x54>)
 8000910:	f001 fd84 	bl	800241c <HAL_I2S_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800091a:	f000 f8c1 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001dc 	.word	0x200001dc
 8000928:	40003800 	.word	0x40003800

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART2_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000964:	f003 fc1c 	bl	80041a0 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f897 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000d8 	.word	0x200000d8
 800097c:	40004400 	.word	0x40004400

08000980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_DMA_Init+0x68>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <MX_DMA_Init+0x68>)
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_DMA_Init+0x68>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_DMA_Init+0x68>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MX_DMA_Init+0x68>)
 80009ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_DMA_Init+0x68>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 ffef 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009c8:	200f      	movs	r0, #15
 80009ca:	f001 f808 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2038      	movs	r0, #56	; 0x38
 80009d4:	f000 ffe7 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d8:	2038      	movs	r0, #56	; 0x38
 80009da:	f001 f800 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_GPIO_Init+0xac>)
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0xb0>)
 8000a88:	f001 fb34 	bl	80020f4 <HAL_GPIO_Init>

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aea:	2007      	movs	r0, #7
 8000aec:	f000 ff50 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_ADC_MspInit+0x84>)
 8000b6a:	f001 fac3 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a81      	ldr	r2, [pc, #516]	; (8000da8 <HAL_I2S_MspInit+0x224>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d17b      	bne.n	8000c9e <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	4b80      	ldr	r3, [pc, #512]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a7f      	ldr	r2, [pc, #508]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b7d      	ldr	r3, [pc, #500]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	4b79      	ldr	r3, [pc, #484]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a78      	ldr	r2, [pc, #480]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b76      	ldr	r3, [pc, #472]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	4b72      	ldr	r3, [pc, #456]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a71      	ldr	r2, [pc, #452]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b6f      	ldr	r3, [pc, #444]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000bfa:	23b0      	movs	r3, #176	; 0xb0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4866      	ldr	r0, [pc, #408]	; (8000db0 <HAL_I2S_MspInit+0x22c>)
 8000c16:	f001 fa6d 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	485f      	ldr	r0, [pc, #380]	; (8000db4 <HAL_I2S_MspInit+0x230>)
 8000c36:	f001 fa5d 	bl	80020f4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c3a:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c3c:	4a5f      	ldr	r2, [pc, #380]	; (8000dbc <HAL_I2S_MspInit+0x238>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c40:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c48:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c62:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c64:	4b54      	ldr	r3, [pc, #336]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000c6c:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c74:	4b50      	ldr	r3, [pc, #320]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c80:	484d      	ldr	r0, [pc, #308]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c82:	f000 fec7 	bl	8001a14 <HAL_DMA_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8000c8c:	f7ff ff08 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c96:	4a48      	ldr	r2, [pc, #288]	; (8000db8 <HAL_I2S_MspInit+0x234>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c9c:	e07f      	b.n	8000d9e <HAL_I2S_MspInit+0x21a>
  else if(hi2s->Instance==SPI2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a47      	ldr	r2, [pc, #284]	; (8000dc0 <HAL_I2S_MspInit+0x23c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d17a      	bne.n	8000d9e <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a37      	ldr	r2, [pc, #220]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a30      	ldr	r2, [pc, #192]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_I2S_MspInit+0x228>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4827      	ldr	r0, [pc, #156]	; (8000db4 <HAL_I2S_MspInit+0x230>)
 8000d18:	f001 f9ec 	bl	80020f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <HAL_I2S_MspInit+0x240>)
 8000d3a:	f001 f9db 	bl	80020f4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_I2S_MspInit+0x248>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d84:	f000 fe46 	bl	8001a14 <HAL_DMA_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 8000d8e:	f7ff fe87 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d96:	639a      	str	r2, [r3, #56]	; 0x38
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_I2S_MspInit+0x244>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	2000011c 	.word	0x2000011c
 8000dbc:	40026410 	.word	0x40026410
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	2000017c 	.word	0x2000017c
 8000dcc:	40026070 	.word	0x40026070

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_UART_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12b      	bne.n	8000e4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0x8c>)
 8000e46:	f001 f955 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8a4 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Stream4_IRQHandler+0x10>)
 8000eba:	f000 feb1 	bl	8001c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000017c 	.word	0x2000017c

08000ec8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA2_Stream0_IRQHandler+0x10>)
 8000ece:	f000 fea7 	bl	8001c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000011c 	.word	0x2000011c

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 fb4d 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fae3 	bl	80004fc <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	0800466c 	.word	0x0800466c
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	20000228 	.word	0x20000228

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 fd07 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fd90 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd1f 	bl	80019fa <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 fce7 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000224 	.word	0x20000224

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000224 	.word	0x20000224

08001038 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e033      	b.n	80010b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fd50 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107e:	f023 0302 	bic.w	r3, r3, #2
 8001082:	f043 0202 	orr.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fab4 	bl	80015f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
 80010a6:	e001      	b.n	80010ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Start+0x1a>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e0b2      	b.n	8001240 <HAL_ADC_Start+0x180>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d018      	beq.n	8001122 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_ADC_Start+0x18c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_ADC_Start+0x190>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9a      	lsrs	r2, r3, #18
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d17a      	bne.n	8001226 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800116e:	d106      	bne.n	800117e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f023 0206 	bic.w	r2, r3, #6
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
 800117c:	e002      	b.n	8001184 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_ADC_Start+0x194>)
 800118e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001198:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12a      	bne.n	80011fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <HAL_ADC_Start+0x198>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d015      	beq.n	80011dc <HAL_ADC_Start+0x11c>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_ADC_Start+0x19c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d105      	bne.n	80011c6 <HAL_ADC_Start+0x106>
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ADC_Start+0x194>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00a      	beq.n	80011dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a25      	ldr	r2, [pc, #148]	; (8001260 <HAL_ADC_Start+0x1a0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d136      	bne.n	800123e <HAL_ADC_Start+0x17e>
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_Start+0x194>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d130      	bne.n	800123e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d129      	bne.n	800123e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e020      	b.n	800123e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_ADC_Start+0x198>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d11b      	bne.n	800123e <HAL_ADC_Start+0x17e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d114      	bne.n	800123e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	e00b      	b.n	800123e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f043 0210 	orr.w	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f043 0201 	orr.w	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83
 8001254:	40012300 	.word	0x40012300
 8001258:	40012000 	.word	0x40012000
 800125c:	40012100 	.word	0x40012100
 8001260:	40012200 	.word	0x40012200

08001264 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001280:	d113      	bne.n	80012aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001290:	d10b      	bne.n	80012aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0220 	orr.w	r2, r3, #32
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e063      	b.n	8001372 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012aa:	f7ff feb9 	bl	8001020 <HAL_GetTick>
 80012ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012b0:	e021      	b.n	80012f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d01d      	beq.n	80012f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_ADC_PollForConversion+0x6c>
 80012c0:	f7ff feae 	bl	8001020 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d212      	bcs.n	80012f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d00b      	beq.n	80012f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f043 0204 	orr.w	r2, r3, #4
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e03d      	b.n	8001372 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b02      	cmp	r3, #2
 8001302:	d1d6      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0212 	mvn.w	r2, #18
 800130c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d123      	bne.n	8001370 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11f      	bne.n	8001370 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1c>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e113      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x244>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b09      	cmp	r3, #9
 80013be:	d925      	bls.n	800140c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68d9      	ldr	r1, [r3, #12]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	3b1e      	subs	r3, #30
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43da      	mvns	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	400a      	ands	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68d9      	ldr	r1, [r3, #12]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4403      	add	r3, r0
 80013fe:	3b1e      	subs	r3, #30
 8001400:	409a      	lsls	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	e022      	b.n	8001452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6919      	ldr	r1, [r3, #16]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	2207      	movs	r2, #7
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	4603      	mov	r3, r0
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4403      	add	r3, r0
 8001448:	409a      	lsls	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b06      	cmp	r3, #6
 8001458:	d824      	bhi.n	80014a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b05      	subs	r3, #5
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b05      	subs	r3, #5
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
 80014a2:	e04c      	b.n	800153e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d824      	bhi.n	80014f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b23      	subs	r3, #35	; 0x23
 80014be:	221f      	movs	r2, #31
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43da      	mvns	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	400a      	ands	r2, r1
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	; 0x23
 80014e8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
 80014f4:	e023      	b.n	800153e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3b41      	subs	r3, #65	; 0x41
 8001508:	221f      	movs	r2, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	400a      	ands	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b41      	subs	r3, #65	; 0x41
 8001532:	fa00 f203 	lsl.w	r2, r0, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_ADC_ConfigChannel+0x250>)
 8001540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a28      	ldr	r2, [pc, #160]	; (80015e8 <HAL_ADC_ConfigChannel+0x254>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d10f      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1d8>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b12      	cmp	r3, #18
 8001552:	d10b      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_ADC_ConfigChannel+0x254>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x23a>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_ADC_ConfigChannel+0x258>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d003      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x1f4>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b11      	cmp	r3, #17
 8001586:	d122      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_ADC_ConfigChannel+0x258>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d111      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0x25c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_ADC_ConfigChannel+0x260>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9a      	lsrs	r2, r3, #18
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	10000012 	.word	0x10000012
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83

080015f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001600:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <ADC_Init+0x1f0>)
 8001602:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6899      	ldr	r1, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <ADC_Init+0x1f4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d022      	beq.n	80016d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6899      	ldr	r1, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6899      	ldr	r1, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e00f      	b.n	80016f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0202 	bic.w	r2, r2, #2
 8001704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e1b      	ldrb	r3, [r3, #24]
 8001710:	005a      	lsls	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001732:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001742:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	3b01      	subs	r3, #1
 8001750:	035a      	lsls	r2, r3, #13
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	e007      	b.n	800176c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	3b01      	subs	r3, #1
 8001788:	051a      	lsls	r2, r3, #20
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ae:	025a      	lsls	r2, r3, #9
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6899      	ldr	r1, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	029a      	lsls	r2, r3, #10
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40012300 	.word	0x40012300
 80017ec:	0f000001 	.word	0x0f000001

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff fafe 	bl	8001020 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e099      	b.n	8001b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	e00f      	b.n	8001a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a52:	f7ff fae5 	bl	8001020 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d908      	bls.n	8001a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e078      	b.n	8001b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e8      	bne.n	8001a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_DMA_Init+0x158>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f023 0307 	bic.w	r3, r3, #7
 8001af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d117      	bne.n	8001b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fa6f 	bl	8001ffc <DMA_CheckFifoParam>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b32:	2301      	movs	r3, #1
 8001b34:	e016      	b.n	8001b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa26 	bl	8001f90 <DMA_CalcBaseAndBitshift>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	223f      	movs	r2, #63	; 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	f010803f 	.word	0xf010803f

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Start_IT+0x26>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e040      	b.n	8001c18 <HAL_DMA_Start_IT+0xa8>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d12f      	bne.n	8001c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f9b8 	bl	8001f34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	223f      	movs	r2, #63	; 0x3f
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0216 	orr.w	r2, r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e005      	b.n	8001c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
 8001c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c2c:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_DMA_IRQHandler+0x258>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a92      	ldr	r2, [pc, #584]	; (8001e7c <HAL_DMA_IRQHandler+0x25c>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0a9b      	lsrs	r3, r3, #10
 8001c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2208      	movs	r2, #8
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d012      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2201      	movs	r2, #1
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f043 0202 	orr.w	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d043      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03c      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d018      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d108      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d024      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
 8001d4e:	e01f      	b.n	8001d90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
 8001d60:	e016      	b.n	8001d90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0208 	bic.w	r2, r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2220      	movs	r2, #32
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 808e 	beq.w	8001ebe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8086 	beq.w	8001ebe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2220      	movs	r2, #32
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d136      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0216 	bic.w	r2, r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x1da>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	223f      	movs	r2, #63	; 0x3f
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d07d      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
        }
        return;
 8001e36:	e078      	b.n	8001f2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01c      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d108      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d030      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
 8001e64:	e02b      	b.n	8001ebe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d027      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
 8001e76:	e022      	b.n	8001ebe <HAL_DMA_IRQHandler+0x29e>
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0210 	bic.w	r2, r2, #16
 8001e9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d032      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3301      	adds	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d307      	bcc.n	8001f06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f2      	bne.n	8001eea <HAL_DMA_IRQHandler+0x2ca>
 8001f04:	e000      	b.n	8001f08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e000      	b.n	8001f2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f2a:	bf00      	nop
    }
  }
}
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop

08001f34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d108      	bne.n	8001f74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f72:	e007      	b.n	8001f84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3b10      	subs	r3, #16
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x64>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d909      	bls.n	8001fd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	1d1a      	adds	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd0:	e007      	b.n	8001fe2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	aaaaaaab 	.word	0xaaaaaaab
 8001ff8:	08004654 	.word	0x08004654

08001ffc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11f      	bne.n	8002056 <DMA_CheckFifoParam+0x5a>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d856      	bhi.n	80020ca <DMA_CheckFifoParam+0xce>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <DMA_CheckFifoParam+0x28>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002035 	.word	0x08002035
 8002028:	08002047 	.word	0x08002047
 800202c:	08002035 	.word	0x08002035
 8002030:	080020cb 	.word	0x080020cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d046      	beq.n	80020ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002044:	e043      	b.n	80020ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800204e:	d140      	bne.n	80020d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002054:	e03d      	b.n	80020d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205e:	d121      	bne.n	80020a4 <DMA_CheckFifoParam+0xa8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d837      	bhi.n	80020d6 <DMA_CheckFifoParam+0xda>
 8002066:	a201      	add	r2, pc, #4	; (adr r2, 800206c <DMA_CheckFifoParam+0x70>)
 8002068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206c:	0800207d 	.word	0x0800207d
 8002070:	08002083 	.word	0x08002083
 8002074:	0800207d 	.word	0x0800207d
 8002078:	08002095 	.word	0x08002095
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
      break;
 8002080:	e030      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d025      	beq.n	80020da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002092:	e022      	b.n	80020da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209c:	d11f      	bne.n	80020de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020a2:	e01c      	b.n	80020de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d903      	bls.n	80020b2 <DMA_CheckFifoParam+0xb6>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d003      	beq.n	80020b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020b0:	e018      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      break;
 80020b6:	e015      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      break;
 80020c8:	e00b      	b.n	80020e2 <DMA_CheckFifoParam+0xe6>
      break;
 80020ca:	bf00      	nop
 80020cc:	e00a      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e008      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e006      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e004      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e002      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
    }
  } 
  
  return status; 
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e165      	b.n	80023dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8154 	bne.w	80023d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80ae 	beq.w	80023d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_GPIO_Init+0x300>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_GPIO_Init+0x308>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d025      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_GPIO_Init+0x30c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_GPIO_Init+0x310>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d019      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_GPIO_Init+0x314>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x20e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	; (800240c <HAL_GPIO_Init+0x318>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x20a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_GPIO_Init+0x31c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x206>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a49      	ldr	r2, [pc, #292]	; (8002414 <HAL_GPIO_Init+0x320>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x202>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e00c      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00a      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 80022fe:	2304      	movs	r3, #4
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x21c>
 800230e:	2300      	movs	r3, #0
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002320:	4935      	ldr	r1, [pc, #212]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <HAL_GPIO_Init+0x324>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002352:	4a31      	ldr	r2, [pc, #196]	; (8002418 <HAL_GPIO_Init+0x324>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x324>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <HAL_GPIO_Init+0x324>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_GPIO_Init+0x324>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_GPIO_Init+0x324>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_GPIO_Init+0x324>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d0:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_GPIO_Init+0x324>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	f67f ae96 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020800 	.word	0x40020800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40021400 	.word	0x40021400
 8002414:	40021800 	.word	0x40021800
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e1      	b.n	80025f2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a6d      	ldr	r2, [pc, #436]	; (80025fc <HAL_I2S_Init+0x1e0>)
 8002446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe fb9b 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002464:	f023 030f 	bic.w	r3, r3, #15
 8002468:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2202      	movs	r2, #2
 8002470:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d06f      	beq.n	800255a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002482:	2310      	movs	r3, #16
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e001      	b.n	800248c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b20      	cmp	r3, #32
 8002492:	d802      	bhi.n	800249a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_I2S_Init+0x1e4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_I2S_Init+0x92>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_I2S_Init+0x1e8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d104      	bne.n	80024b8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 ffde 	bl	8003470 <HAL_RCCEx_GetPeriphCLKFreq>
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	e003      	b.n	80024c0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80024b8:	2002      	movs	r0, #2
 80024ba:	f000 ffd9 	bl	8003470 <HAL_RCCEx_GetPeriphCLKFreq>
 80024be:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c8:	d125      	bne.n	8002516 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	3305      	adds	r3, #5
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	e01f      	b.n	8002534 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	3305      	adds	r3, #5
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	e00e      	b.n	8002534 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fbb2 f2f3 	udiv	r2, r2, r3
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	3305      	adds	r3, #5
 8002532:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4a34      	ldr	r2, [pc, #208]	; (8002608 <HAL_I2S_Init+0x1ec>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e003      	b.n	8002562 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800255a:	2302      	movs	r3, #2
 800255c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d902      	bls.n	800256e <HAL_I2S_Init+0x152>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d907      	bls.n	800257e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e039      	b.n	80025f2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	430a      	orrs	r2, r1
 8002590:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800259c:	f023 030f 	bic.w	r3, r3, #15
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6851      	ldr	r1, [r2, #4]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6892      	ldr	r2, [r2, #8]
 80025a8:	4311      	orrs	r1, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6992      	ldr	r2, [r2, #24]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b30      	cmp	r3, #48	; 0x30
 80025c8:	d003      	beq.n	80025d2 <HAL_I2S_Init+0x1b6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2bb0      	cmp	r3, #176	; 0xb0
 80025d0:	d107      	bne.n	80025e2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08002ad3 	.word	0x08002ad3
 8002600:	40003800 	.word	0x40003800
 8002604:	40003c00 	.word	0x40003c00
 8002608:	cccccccd 	.word	0xcccccccd

0800260c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_I2S_Transmit_DMA+0x1a>
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e08e      	b.n	8002748 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2S_Transmit_DMA+0x2e>
 8002636:	2302      	movs	r3, #2
 8002638:	e086      	b.n	8002748 <HAL_I2S_Transmit_DMA+0x13c>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	e076      	b.n	8002748 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d002      	beq.n	8002686 <HAL_I2S_Transmit_DMA+0x7a>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10a      	bne.n	800269c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269a:	e005      	b.n	80026a8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	4a28      	ldr	r2, [pc, #160]	; (8002750 <HAL_I2S_Transmit_DMA+0x144>)
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_I2S_Transmit_DMA+0x148>)
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <HAL_I2S_Transmit_DMA+0x14c>)
 80026be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026c8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026d0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026d8:	f7ff fa4a 	bl	8001b70 <HAL_DMA_Start_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00f      	beq.n	8002702 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0208 	orr.w	r2, r3, #8
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800271e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0202 	orr.w	r2, r2, #2
 800273c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08002953 	.word	0x08002953
 8002754:	08002911 	.word	0x08002911
 8002758:	080029cd 	.word	0x080029cd

0800275c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_I2S_Receive_DMA+0x1a>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0a1      	b.n	80028be <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2S_Receive_DMA+0x2e>
 8002786:	2302      	movs	r3, #2
 8002788:	e099      	b.n	80028be <HAL_I2S_Receive_DMA+0x162>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	e089      	b.n	80028be <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2204      	movs	r2, #4
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d002      	beq.n	80027d6 <HAL_I2S_Receive_DMA+0x7a>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d10a      	bne.n	80027ec <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	865a      	strh	r2, [r3, #50]	; 0x32
 80027ea:	e005      	b.n	80027f8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_I2S_Receive_DMA+0x16c>)
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_I2S_Receive_DMA+0x170>)
 8002806:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <HAL_I2S_Receive_DMA+0x174>)
 800280e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800281e:	d10a      	bne.n	8002836 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	4619      	mov	r1, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800284c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800284e:	f7ff f98f 	bl	8001b70 <HAL_DMA_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00f      	beq.n	8002878 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0208 	orr.w	r2, r3, #8
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e022      	b.n	80028be <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002894:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	080029b1 	.word	0x080029b1
 80028cc:	0800296f 	.word	0x0800296f
 80028d0:	080029cd 	.word	0x080029cd

080028d4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0202 	bic.w	r2, r2, #2
 8002934:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff ffcf 	bl	80028e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ffb7 	bl	80028d4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10e      	bne.n	80029a2 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7fd fe26 	bl	80005f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fd fdc2 	bl	8000548 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0203 	bic.w	r2, r2, #3
 80029e8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0208 	orr.w	r2, r3, #8
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff ff76 	bl	80028fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff3e 	bl	80028e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	b292      	uxth	r2, r2
 8002a88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10e      	bne.n	8002aca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fd fd95 	bl	80005f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d13a      	bne.n	8002b64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d109      	bne.n	8002b0c <I2S_IRQHandler+0x3a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d102      	bne.n	8002b0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffb4 	bl	8002a74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d126      	bne.n	8002b64 <I2S_IRQHandler+0x92>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d11f      	bne.n	8002b64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fecc 	bl	80028fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d136      	bne.n	8002bde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d109      	bne.n	8002b8e <I2S_IRQHandler+0xbc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d102      	bne.n	8002b8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff45 	bl	8002a18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d122      	bne.n	8002bde <I2S_IRQHandler+0x10c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d11b      	bne.n	8002bde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fe8f 	bl	80028fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cc      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90c      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d044      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4934      	ldr	r1, [pc, #208]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f9a2 	bl	8001020 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe f99e 	bl	8001020 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 fdc7 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe f902 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	0800463c 	.word	0x0800463c
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	0800464c 	.word	0x0800464c

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	0800464c 	.word	0x0800464c

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	496c      	ldr	r1, [pc, #432]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e72:	2301      	movs	r3, #1
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e82:	4b64      	ldr	r3, [pc, #400]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e88:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	4960      	ldr	r1, [pc, #384]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb0:	4b58      	ldr	r3, [pc, #352]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4955      	ldr	r1, [pc, #340]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002edc:	2301      	movs	r3, #1
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eec:	4b49      	ldr	r3, [pc, #292]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	4946      	ldr	r1, [pc, #280]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 808a 	beq.w	800303e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	4a38      	ldr	r2, [pc, #224]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a33      	ldr	r2, [pc, #204]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f52:	f7fe f865 	bl	8001020 <HAL_GetTick>
 8002f56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe f861 	bl	8001020 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e278      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f80:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	6a3a      	ldr	r2, [r7, #32]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d028      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d114      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe f82f 	bl	8001020 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f82b 	bl	8001020 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e240      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d114      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	4902      	ldr	r1, [pc, #8]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
 8003010:	e00c      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	42470e40 	.word	0x42470e40
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003026:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800302e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	4944      	ldr	r1, [pc, #272]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800303a:	4313      	orrs	r3, r2
 800303c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003052:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003060:	4b3a      	ldr	r3, [pc, #232]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003082:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	492e      	ldr	r1, [pc, #184]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	4926      	ldr	r1, [pc, #152]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c2:	d101      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80030c4:	2301      	movs	r3, #1
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	491a      	ldr	r1, [pc, #104]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	4911      	ldr	r1, [pc, #68]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003116:	2301      	movs	r3, #1
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d005      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003128:	f040 80ff 	bne.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003132:	f7fd ff75 	bl	8001020 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003138:	e00e      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800313a:	f7fd ff71 	bl	8001020 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d907      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e188      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800314c:	40023800 	.word	0x40023800
 8003150:	424711e0 	.word	0x424711e0
 8003154:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ea      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	d028      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d124      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800318c:	4b71      	ldr	r3, [pc, #452]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	3301      	adds	r3, #1
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	071b      	lsls	r3, r3, #28
 80031ce:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d035      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003200:	d130      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	0f1b      	lsrs	r3, r3, #28
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	431a      	orrs	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	3b01      	subs	r3, #1
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	431a      	orrs	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	071b      	lsls	r3, r3, #28
 8003244:	4943      	ldr	r1, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800324e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003252:	f023 021f 	bic.w	r2, r3, #31
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d029      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d124      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800327a:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003292:	0f1b      	lsrs	r3, r3, #28
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	019b      	lsls	r3, r3, #6
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	3b01      	subs	r3, #1
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	431a      	orrs	r2, r3
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4925      	ldr	r1, [pc, #148]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	4917      	ldr	r1, [pc, #92]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003304:	f7fd fe8c 	bl	8001020 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800330c:	f7fd fe88 	bl	8001020 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e09f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 8095 	bne.w	800345c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7fd fe72 	bl	8001020 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800333e:	e00f      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003340:	f7fd fe6e 	bl	8001020 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d908      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e085      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	42470068 	.word	0x42470068
 800335c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003360:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336c:	d0e8      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02b      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d127      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003396:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	3301      	adds	r3, #1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	431a      	orrs	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	3b01      	subs	r3, #1
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	4928      	ldr	r1, [pc, #160]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	3b01      	subs	r3, #1
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	4922      	ldr	r1, [pc, #136]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fa:	d118      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	0e1b      	lsrs	r3, r3, #24
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4910      	ldr	r1, [pc, #64]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003434:	f7fd fdf4 	bl	8001020 <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800343c:	f7fd fdf0 	bl	8001020 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e007      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345a:	d1ef      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3730      	adds	r7, #48	; 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	42470070 	.word	0x42470070

08003470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	2b07      	cmp	r3, #7
 8003496:	f200 8224 	bhi.w	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080036a3 	.word	0x080036a3
 80034a4:	080037cd 	.word	0x080037cd
 80034a8:	080038e3 	.word	0x080038e3
 80034ac:	080034c1 	.word	0x080034c1
 80034b0:	080038e3 	.word	0x080038e3
 80034b4:	080038e3 	.word	0x080038e3
 80034b8:	080038e3 	.word	0x080038e3
 80034bc:	080034c1 	.word	0x080034c1
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80034c0:	4ba8      	ldr	r3, [pc, #672]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d6:	f000 80d6 	beq.w	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e0:	f200 80dd 	bhi.w	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ea:	f000 809f 	beq.w	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f4:	f200 80d3 	bhi.w	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	f200 80ca 	bhi.w	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003510:	f000 80b6 	beq.w	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351a:	f200 80c0 	bhi.w	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003524:	f000 8082 	beq.w	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352e:	f200 80b6 	bhi.w	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d03b      	beq.n	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003540:	e0ad      	b.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003542:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	4a83      	ldr	r2, [pc, #524]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003562:	4b80      	ldr	r3, [pc, #512]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356c:	4a7f      	ldr	r2, [pc, #508]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003574:	4b7b      	ldr	r3, [pc, #492]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	0e1b      	lsrs	r3, r3, #24
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003582:	4b78      	ldr	r3, [pc, #480]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	fb02 f203 	mul.w	r2, r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800359c:	4b71      	ldr	r3, [pc, #452]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800359e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	3301      	adds	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]
          break;
 80035b6:	e073      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035c4:	4b67      	ldr	r3, [pc, #412]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ce:	4a66      	ldr	r2, [pc, #408]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e008      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80035d8:	4b62      	ldr	r3, [pc, #392]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e2:	4a62      	ldr	r2, [pc, #392]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80035ea:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	0e1b      	lsrs	r3, r3, #24
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80035f8:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	fb02 f203 	mul.w	r2, r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003612:	4b54      	ldr	r3, [pc, #336]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	61fb      	str	r3, [r7, #28]
          break;
 800362a:	e039      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d108      	bne.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003638:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003640:	4a49      	ldr	r2, [pc, #292]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800364a:	4b46      	ldr	r3, [pc, #280]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003652:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800365a:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0f1b      	lsrs	r3, r3, #28
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	fb02 f203 	mul.w	r2, r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61fb      	str	r3, [r7, #28]
          break;
 800367e:	e00f      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003680:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003682:	61fb      	str	r3, [r7, #28]
          break;
 8003684:	e00c      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003692:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003694:	61fb      	str	r3, [r7, #28]
          break;
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800369a:	61fb      	str	r3, [r7, #28]
          break;
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800369e:	bf00      	nop
        }
      }
      break;
 80036a0:	e11f      	b.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80036b4:	d079      	beq.n	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80036bc:	f200 8082 	bhi.w	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c6:	d03c      	beq.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ce:	d879      	bhi.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036dc:	d172      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80036e0:	61fb      	str	r3, [r7, #28]
          break;
 80036e2:	e072      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d109      	bne.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	e008      	b.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	4a15      	ldr	r2, [pc, #84]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	61fb      	str	r3, [r7, #28]
          break;
 8003740:	e043      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374e:	d111      	bne.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e010      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200
 8003770:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	4a5d      	ldr	r2, [pc, #372]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003784:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003796:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	61fb      	str	r3, [r7, #28]
          break;
 80037a8:	e00f      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d102      	bne.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80037ba:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80037be:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037c0:	61fb      	str	r3, [r7, #28]
          break;
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
          break;
 80037c8:	bf00      	nop
        }
      }
      break;
 80037ca:	e08a      	b.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80037cc:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80037de:	d06f      	beq.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80037e6:	d878      	bhi.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ee:	d03c      	beq.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d870      	bhi.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003804:	d169      	bne.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003808:	61fb      	str	r3, [r7, #28]
          break;
 800380a:	e069      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380c:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003818:	d109      	bne.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800381a:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e008      	b.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800382e:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385a:	0f1b      	lsrs	r3, r3, #28
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	61fb      	str	r3, [r7, #28]
          break;
 8003868:	e03a      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003876:	d108      	bne.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e007      	b.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0f1b      	lsrs	r3, r3, #28
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	61fb      	str	r3, [r7, #28]
          break;
 80038be:	e00f      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d102      	bne.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80038d0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80038d6:	61fb      	str	r3, [r7, #28]
          break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
          break;
 80038de:	bf00      	nop
        }
      }
      break;
 80038e0:	bf00      	nop
    }
  }
  return frequency;
 80038e2:	69fb      	ldr	r3, [r7, #28]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3724      	adds	r7, #36	; 0x24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	007a1200 	.word	0x007a1200
 80038fc:	00bb8000 	.word	0x00bb8000

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b088      	sub	sp, #32
 8003906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391c:	4bce      	ldr	r3, [pc, #824]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b0c      	cmp	r3, #12
 8003926:	f200 818d 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x344>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_RCC_GetSysClockFreq+0x30>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003965 	.word	0x08003965
 8003934:	08003c45 	.word	0x08003c45
 8003938:	08003c45 	.word	0x08003c45
 800393c:	08003c45 	.word	0x08003c45
 8003940:	0800396b 	.word	0x0800396b
 8003944:	08003c45 	.word	0x08003c45
 8003948:	08003c45 	.word	0x08003c45
 800394c:	08003c45 	.word	0x08003c45
 8003950:	08003971 	.word	0x08003971
 8003954:	08003c45 	.word	0x08003c45
 8003958:	08003c45 	.word	0x08003c45
 800395c:	08003c45 	.word	0x08003c45
 8003960:	08003ae5 	.word	0x08003ae5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4bbd      	ldr	r3, [pc, #756]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003966:	61bb      	str	r3, [r7, #24]
       break;
 8003968:	e16f      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396a:	4bbd      	ldr	r3, [pc, #756]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x360>)
 800396c:	61bb      	str	r3, [r7, #24]
      break;
 800396e:	e16c      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003970:	4bb9      	ldr	r3, [pc, #740]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003978:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397a:	4bb7      	ldr	r3, [pc, #732]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d053      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4bb4      	ldr	r3, [pc, #720]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	461a      	mov	r2, r3
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	ea02 0400 	and.w	r4, r2, r0
 800399e:	603c      	str	r4, [r7, #0]
 80039a0:	400b      	ands	r3, r1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	014b      	lsls	r3, r1, #5
 80039b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039ba:	0142      	lsls	r2, r0, #5
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	1ac0      	subs	r0, r0, r3
 80039c4:	462b      	mov	r3, r5
 80039c6:	eb61 0103 	sbc.w	r1, r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	018b      	lsls	r3, r1, #6
 80039d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039d8:	0182      	lsls	r2, r0, #6
 80039da:	1a12      	subs	r2, r2, r0
 80039dc:	eb63 0301 	sbc.w	r3, r3, r1
 80039e0:	f04f 0000 	mov.w	r0, #0
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	00d9      	lsls	r1, r3, #3
 80039ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ee:	00d0      	lsls	r0, r2, #3
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4621      	mov	r1, r4
 80039f6:	1852      	adds	r2, r2, r1
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb43 0101 	adc.w	r1, r3, r1
 80039fe:	460b      	mov	r3, r1
 8003a00:	f04f 0000 	mov.w	r0, #0
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	0259      	lsls	r1, r3, #9
 8003a0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a0e:	0250      	lsls	r0, r2, #9
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	f7fc fbf0 	bl	8000204 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e04c      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b8a      	ldr	r3, [pc, #552]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	ea02 0a00 	and.w	sl, r2, r0
 8003a46:	ea03 0b01 	and.w	fp, r3, r1
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	014b      	lsls	r3, r1, #5
 8003a58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a5c:	0142      	lsls	r2, r0, #5
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	ebb0 000a 	subs.w	r0, r0, sl
 8003a66:	eb61 010b 	sbc.w	r1, r1, fp
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a78:	0182      	lsls	r2, r0, #6
 8003a7a:	1a12      	subs	r2, r2, r0
 8003a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a80:	f04f 0000 	mov.w	r0, #0
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	00d9      	lsls	r1, r3, #3
 8003a8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a8e:	00d0      	lsls	r0, r2, #3
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	eb12 020a 	adds.w	r2, r2, sl
 8003a98:	eb43 030b 	adc.w	r3, r3, fp
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0299      	lsls	r1, r3, #10
 8003aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003aaa:	0290      	lsls	r0, r2, #10
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f7fc fba2 	bl	8000204 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	61bb      	str	r3, [r7, #24]
      break;
 8003ae2:	e0b2      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b5c      	ldr	r3, [pc, #368]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04d      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	461a      	mov	r2, r3
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	ea02 0800 	and.w	r8, r2, r0
 8003b12:	ea03 0901 	and.w	r9, r3, r1
 8003b16:	4640      	mov	r0, r8
 8003b18:	4649      	mov	r1, r9
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	014b      	lsls	r3, r1, #5
 8003b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b28:	0142      	lsls	r2, r0, #5
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	ebb0 0008 	subs.w	r0, r0, r8
 8003b32:	eb61 0109 	sbc.w	r1, r1, r9
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	018b      	lsls	r3, r1, #6
 8003b40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b44:	0182      	lsls	r2, r0, #6
 8003b46:	1a12      	subs	r2, r2, r0
 8003b48:	eb63 0301 	sbc.w	r3, r3, r1
 8003b4c:	f04f 0000 	mov.w	r0, #0
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	00d9      	lsls	r1, r3, #3
 8003b56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b5a:	00d0      	lsls	r0, r2, #3
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	eb12 0208 	adds.w	r2, r2, r8
 8003b64:	eb43 0309 	adc.w	r3, r3, r9
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	0259      	lsls	r1, r3, #9
 8003b72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b76:	0250      	lsls	r0, r2, #9
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	f7fc fb3c 	bl	8000204 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e04a      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	099b      	lsrs	r3, r3, #6
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	ea02 0400 	and.w	r4, r2, r0
 8003bae:	ea03 0501 	and.w	r5, r3, r1
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	014b      	lsls	r3, r1, #5
 8003bc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bc4:	0142      	lsls	r2, r0, #5
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	1b00      	subs	r0, r0, r4
 8003bcc:	eb61 0105 	sbc.w	r1, r1, r5
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	018b      	lsls	r3, r1, #6
 8003bda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bde:	0182      	lsls	r2, r0, #6
 8003be0:	1a12      	subs	r2, r2, r0
 8003be2:	eb63 0301 	sbc.w	r3, r3, r1
 8003be6:	f04f 0000 	mov.w	r0, #0
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	00d9      	lsls	r1, r3, #3
 8003bf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bf4:	00d0      	lsls	r0, r2, #3
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	1912      	adds	r2, r2, r4
 8003bfc:	eb45 0303 	adc.w	r3, r5, r3
 8003c00:	f04f 0000 	mov.w	r0, #0
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	0299      	lsls	r1, r3, #10
 8003c0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c0e:	0290      	lsls	r0, r2, #10
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	f7fc faf0 	bl	8000204 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4613      	mov	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	61bb      	str	r3, [r7, #24]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c46:	61bb      	str	r3, [r7, #24]
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	007a1200 	.word	0x007a1200

08003c64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e28d      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8083 	beq.w	8003d8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c84:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d019      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c90:	4b91      	ldr	r3, [pc, #580]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c9c:	4b8e      	ldr	r3, [pc, #568]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b8b      	ldr	r3, [pc, #556]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d112      	bne.n	8003cdc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05b      	beq.n	8003d88 <HAL_RCC_OscConfig+0x124>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d157      	bne.n	8003d88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e25a      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x90>
 8003ce6:	4b7c      	ldr	r3, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7b      	ldr	r2, [pc, #492]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e01d      	b.n	8003d30 <HAL_RCC_OscConfig+0xcc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0xb4>
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a75      	ldr	r2, [pc, #468]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a72      	ldr	r2, [pc, #456]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0xcc>
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6b      	ldr	r2, [pc, #428]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd f972 	bl	8001020 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fd f96e 	bl	8001020 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e21f      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0xdc>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd f95e 	bl	8001020 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd f95a 	bl	8001020 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e20b      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x104>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06f      	beq.n	8003e76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d96:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003da2:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d11c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b44      	ldr	r3, [pc, #272]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x186>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e1d3      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4937      	ldr	r1, [pc, #220]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	e03a      	b.n	8003e76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e08:	4b34      	ldr	r3, [pc, #208]	; (8003edc <HAL_RCC_OscConfig+0x278>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd f907 	bl	8001020 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd f903 	bl	8001020 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1b4      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4925      	ldr	r1, [pc, #148]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCC_OscConfig+0x278>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd f8e6 	bl	8001020 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fd f8e2 	bl	8001020 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e193      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd f8c6 	bl	8001020 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd f8c2 	bl	8001020 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e173      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x234>
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f8af 	bl	8001020 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e00e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fd f8ab 	bl	8001020 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d907      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e15c      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470000 	.word	0x42470000
 8003ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ea      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8097 	beq.w	800402c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b83      	ldr	r3, [pc, #524]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b7f      	ldr	r3, [pc, #508]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a7e      	ldr	r2, [pc, #504]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b79      	ldr	r3, [pc, #484]	; (8004114 <HAL_RCC_OscConfig+0x4b0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x4b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x4b0>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd f86b 	bl	8001020 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd f867 	bl	8001020 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e118      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x4b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x31e>
 8003f74:	4b66      	ldr	r3, [pc, #408]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a65      	ldr	r2, [pc, #404]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x358>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x340>
 8003f8a:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a60      	ldr	r2, [pc, #384]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x358>
 8003fa4:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a59      	ldr	r2, [pc, #356]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a56      	ldr	r2, [pc, #344]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f82c 	bl	8001020 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f828 	bl	8001020 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0d7      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ee      	beq.n	8003fcc <HAL_RCC_OscConfig+0x368>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fd f816 	bl	8001020 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f812 	bl	8001020 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0c1      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ee      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	4a3a      	ldr	r2, [pc, #232]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80ad 	beq.w	8004190 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b08      	cmp	r3, #8
 8004040:	d060      	beq.n	8004104 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d145      	bne.n	80040d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b33      	ldr	r3, [pc, #204]	; (8004118 <HAL_RCC_OscConfig+0x4b4>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fc ffe6 	bl	8001020 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fc ffe2 	bl	8001020 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e093      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	4b29      	ldr	r3, [pc, #164]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	491b      	ldr	r1, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x4b4>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fc ffb7 	bl	8001020 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fc ffb3 	bl	8001020 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e064      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x452>
 80040d4:	e05c      	b.n	8004190 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_RCC_OscConfig+0x4b4>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fc ffa0 	bl	8001020 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fc ff9c 	bl	8001020 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e04d      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x480>
 8004102:	e045      	b.n	8004190 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e040      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
 8004110:	40023800 	.word	0x40023800
 8004114:	40007000 	.word	0x40007000
 8004118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800411c:	4b1f      	ldr	r3, [pc, #124]	; (800419c <HAL_RCC_OscConfig+0x538>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d030      	beq.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d129      	bne.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d122      	bne.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004154:	4293      	cmp	r3, r2
 8004156:	d119      	bne.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	3b01      	subs	r3, #1
 8004166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d10f      	bne.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800

080041a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e03f      	b.n	8004232 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fe02 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f829 	bl	800423c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	b09f      	sub	sp, #124	; 0x7c
 8004242:	af00      	add	r7, sp, #0
 8004244:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	ea40 0301 	orr.w	r3, r0, r1
 800425c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	431a      	orrs	r2, r3
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	431a      	orrs	r2, r3
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004280:	f021 010c 	bic.w	r1, r1, #12
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800428a:	430b      	orrs	r3, r1
 800428c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	6999      	ldr	r1, [r3, #24]
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	ea40 0301 	orr.w	r3, r0, r1
 80042a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4bc5      	ldr	r3, [pc, #788]	; (80045c0 <UART_SetConfig+0x384>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d004      	beq.n	80042ba <UART_SetConfig+0x7e>
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4bc3      	ldr	r3, [pc, #780]	; (80045c4 <UART_SetConfig+0x388>)
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d103      	bne.n	80042c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ba:	f7fe fd9b 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80042be:	6778      	str	r0, [r7, #116]	; 0x74
 80042c0:	e002      	b.n	80042c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c2:	f7fe fd83 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80042c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d0:	f040 80b6 	bne.w	8004440 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d6:	461c      	mov	r4, r3
 80042d8:	f04f 0500 	mov.w	r5, #0
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	6439      	str	r1, [r7, #64]	; 0x40
 80042e4:	415b      	adcs	r3, r3
 80042e6:	647b      	str	r3, [r7, #68]	; 0x44
 80042e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ec:	1912      	adds	r2, r2, r4
 80042ee:	eb45 0303 	adc.w	r3, r5, r3
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	00d9      	lsls	r1, r3, #3
 80042fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004300:	00d0      	lsls	r0, r2, #3
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	1911      	adds	r1, r2, r4
 8004308:	6639      	str	r1, [r7, #96]	; 0x60
 800430a:	416b      	adcs	r3, r5
 800430c:	667b      	str	r3, [r7, #100]	; 0x64
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004324:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004328:	f7fb ff6c 	bl	8000204 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4ba5      	ldr	r3, [pc, #660]	; (80045c8 <UART_SetConfig+0x38c>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011e      	lsls	r6, r3, #4
 800433a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433c:	461c      	mov	r4, r3
 800433e:	f04f 0500 	mov.w	r5, #0
 8004342:	4622      	mov	r2, r4
 8004344:	462b      	mov	r3, r5
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6339      	str	r1, [r7, #48]	; 0x30
 800434a:	415b      	adcs	r3, r3
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
 800434e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004352:	1912      	adds	r2, r2, r4
 8004354:	eb45 0303 	adc.w	r3, r5, r3
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	00d9      	lsls	r1, r3, #3
 8004362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004366:	00d0      	lsls	r0, r2, #3
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	1911      	adds	r1, r2, r4
 800436e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004370:	416b      	adcs	r3, r5
 8004372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	1891      	adds	r1, r2, r2
 8004380:	62b9      	str	r1, [r7, #40]	; 0x28
 8004382:	415b      	adcs	r3, r3
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800438e:	f7fb ff39 	bl	8000204 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b8c      	ldr	r3, [pc, #560]	; (80045c8 <UART_SetConfig+0x38c>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a87      	ldr	r2, [pc, #540]	; (80045c8 <UART_SetConfig+0x38c>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b8:	441e      	add	r6, r3
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	4618      	mov	r0, r3
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	1894      	adds	r4, r2, r2
 80043c8:	623c      	str	r4, [r7, #32]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d2:	1812      	adds	r2, r2, r0
 80043d4:	eb41 0303 	adc.w	r3, r1, r3
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	f04f 0500 	mov.w	r5, #0
 80043e0:	00dd      	lsls	r5, r3, #3
 80043e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043e6:	00d4      	lsls	r4, r2, #3
 80043e8:	4622      	mov	r2, r4
 80043ea:	462b      	mov	r3, r5
 80043ec:	1814      	adds	r4, r2, r0
 80043ee:	653c      	str	r4, [r7, #80]	; 0x50
 80043f0:	414b      	adcs	r3, r1
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	61b9      	str	r1, [r7, #24]
 8004402:	415b      	adcs	r3, r3
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800440e:	f7fb fef9 	bl	8000204 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <UART_SetConfig+0x38c>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a67      	ldr	r2, [pc, #412]	; (80045c8 <UART_SetConfig+0x38c>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4432      	add	r2, r6
 800443c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800443e:	e0b9      	b.n	80045b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004442:	461c      	mov	r4, r3
 8004444:	f04f 0500 	mov.w	r5, #0
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1891      	adds	r1, r2, r2
 800444e:	6139      	str	r1, [r7, #16]
 8004450:	415b      	adcs	r3, r3
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004458:	1912      	adds	r2, r2, r4
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	00d9      	lsls	r1, r3, #3
 8004468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800446c:	00d0      	lsls	r0, r2, #3
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	eb12 0804 	adds.w	r8, r2, r4
 8004476:	eb43 0905 	adc.w	r9, r3, r5
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004492:	0082      	lsls	r2, r0, #2
 8004494:	4640      	mov	r0, r8
 8004496:	4649      	mov	r1, r9
 8004498:	f7fb feb4 	bl	8000204 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <UART_SetConfig+0x38c>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011e      	lsls	r6, r3, #4
 80044aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ac:	4618      	mov	r0, r3
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	1894      	adds	r4, r2, r2
 80044b8:	60bc      	str	r4, [r7, #8]
 80044ba:	415b      	adcs	r3, r3
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c2:	1812      	adds	r2, r2, r0
 80044c4:	eb41 0303 	adc.w	r3, r1, r3
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	00dd      	lsls	r5, r3, #3
 80044d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044d6:	00d4      	lsls	r4, r2, #3
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	1814      	adds	r4, r2, r0
 80044de:	64bc      	str	r4, [r7, #72]	; 0x48
 80044e0:	414b      	adcs	r3, r1
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	008b      	lsls	r3, r1, #2
 80044f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044fc:	0082      	lsls	r2, r0, #2
 80044fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004502:	f7fb fe7f 	bl	8000204 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <UART_SetConfig+0x38c>)
 800450c:	fba3 1302 	umull	r1, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2164      	movs	r1, #100	; 0x64
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	3332      	adds	r3, #50	; 0x32
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <UART_SetConfig+0x38c>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452a:	441e      	add	r6, r3
 800452c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452e:	4618      	mov	r0, r3
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	1894      	adds	r4, r2, r2
 800453a:	603c      	str	r4, [r7, #0]
 800453c:	415b      	adcs	r3, r3
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004544:	1812      	adds	r2, r2, r0
 8004546:	eb41 0303 	adc.w	r3, r1, r3
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	f04f 0500 	mov.w	r5, #0
 8004552:	00dd      	lsls	r5, r3, #3
 8004554:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004558:	00d4      	lsls	r4, r2, #3
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	eb12 0a00 	adds.w	sl, r2, r0
 8004562:	eb43 0b01 	adc.w	fp, r3, r1
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	008b      	lsls	r3, r1, #2
 800457a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800457e:	0082      	lsls	r2, r0, #2
 8004580:	4650      	mov	r0, sl
 8004582:	4659      	mov	r1, fp
 8004584:	f7fb fe3e 	bl	8000204 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <UART_SetConfig+0x38c>)
 800458e:	fba3 1302 	umull	r1, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2164      	movs	r1, #100	; 0x64
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <UART_SetConfig+0x38c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4432      	add	r2, r6
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	377c      	adds	r7, #124	; 0x7c
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	; (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	; (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 f820 	bl	8004624 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	08004664 	.word	0x08004664
 8004608:	08004664 	.word	0x08004664
 800460c:	08004664 	.word	0x08004664
 8004610:	08004668 	.word	0x08004668

08004614 <memset>:
 8004614:	4402      	add	r2, r0
 8004616:	4603      	mov	r3, r0
 8004618:	4293      	cmp	r3, r2
 800461a:	d100      	bne.n	800461e <memset+0xa>
 800461c:	4770      	bx	lr
 800461e:	f803 1b01 	strb.w	r1, [r3], #1
 8004622:	e7f9      	b.n	8004618 <memset+0x4>

08004624 <_init>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr

08004630 <_fini>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr
