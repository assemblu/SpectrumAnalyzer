
SpectrumMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003194  08003194  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800319c  0800319c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080031b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080031b0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c3c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a3  00000000  00000000  00027c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00029520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020434  00000000  00000000  0002a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088c4  00000000  00000000  0004a5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3123  00000000  00000000  00052e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f4  00000000  00000000  00115ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003164 	.word	0x08003164

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003164 	.word	0x08003164

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb62 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f938 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f900 	bl	8000710 <MX_DMA_Init>
  MX_I2S1_Init();
 8000510:	f000 f8a2 	bl	8000658 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000514:	f000 f8ce 	bl	80006b4 <MX_I2S2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x1c>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ac      	sub	sp, #176	; 0xb0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fe12 	bl	8003154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	225c      	movs	r2, #92	; 0x5c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fe03 	bl	8003154 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <SystemClock_Config+0x134>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a3e      	ldr	r2, [pc, #248]	; (8000650 <SystemClock_Config+0x134>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <SystemClock_Config+0x134>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <SystemClock_Config+0x138>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a38      	ldr	r2, [pc, #224]	; (8000654 <SystemClock_Config+0x138>)
 8000574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <SystemClock_Config+0x138>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a2:	2308      	movs	r3, #8
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005a8:	23b4      	movs	r3, #180	; 0xb4
 80005aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fb03 	bl	8002bd0 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005d0:	f000 f90a 	bl	80007e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d4:	f001 faf8 	bl	8001bc8 <HAL_PWREx_EnableOverDrive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f903 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fb31 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800060c:	f000 f8ec 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8000610:	2303      	movs	r3, #3
 8000612:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000614:	23c0      	movs	r3, #192	; 0xc0
 8000616:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 800062c:	2300      	movs	r3, #0
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000630:	2300      	movs	r3, #0
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fbfb 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000644:	f000 f8d0 	bl	80007e8 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	37b0      	adds	r7, #176	; 0xb0
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_I2S1_Init+0x54>)
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_I2S1_Init+0x58>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2S1_Init+0x54>)
 8000664:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000668:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_I2S1_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2S1_Init+0x54>)
 8000672:	2203      	movs	r2, #3
 8000674:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_I2S1_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_I2S1_Init+0x54>)
 8000680:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000684:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2S1_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_I2S1_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2S1_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2S1_Init+0x54>)
 800069a:	f001 f897 	bl	80017cc <HAL_I2S_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80006a4:	f000 f8a0 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40013000 	.word	0x40013000

080006b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <MX_I2S2_Init+0x58>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2S2_Init+0x54>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_I2S2_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_I2S2_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_I2S2_Init+0x54>)
 80006dc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2S2_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2S2_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2S2_Init+0x54>)
 80006f6:	f001 f869 	bl	80017cc <HAL_I2S_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000700:	f000 f872 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000130 	.word	0x20000130
 800070c:	40003800 	.word	0x40003800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_DMA_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_DMA_Init+0x68>)
 8000720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_DMA_Init+0x68>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_DMA_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_DMA_Init+0x68>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_DMA_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200f      	movs	r0, #15
 8000754:	f000 fb85 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000758:	200f      	movs	r0, #15
 800075a:	f000 fb9e 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2038      	movs	r0, #56	; 0x38
 8000764:	f000 fb7d 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000768:	2038      	movs	r0, #56	; 0x38
 800076a:	f000 fb96 	bl	8000e9a <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x68>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a90      	ldr	r2, [pc, #576]	; (8000aa4 <HAL_I2S_MspInit+0x260>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d17b      	bne.n	800095e <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
 800086a:	4b8f      	ldr	r3, [pc, #572]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a8e      	ldr	r2, [pc, #568]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b8c      	ldr	r3, [pc, #560]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	623b      	str	r3, [r7, #32]
 8000880:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
 8000886:	4b88      	ldr	r3, [pc, #544]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a87      	ldr	r2, [pc, #540]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b85      	ldr	r3, [pc, #532]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b81      	ldr	r3, [pc, #516]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a80      	ldr	r2, [pc, #512]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80008ba:	23b0      	movs	r3, #176	; 0xb0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ca:	2305      	movs	r3, #5
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	4875      	ldr	r0, [pc, #468]	; (8000aac <HAL_I2S_MspInit+0x268>)
 80008d6:	f000 fde5 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008da:	2310      	movs	r3, #16
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ea:	2305      	movs	r3, #5
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	486e      	ldr	r0, [pc, #440]	; (8000ab0 <HAL_I2S_MspInit+0x26c>)
 80008f6:	f000 fdd5 	bl	80014a4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80008fa:	4b6e      	ldr	r3, [pc, #440]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 80008fc:	4a6e      	ldr	r2, [pc, #440]	; (8000ab8 <HAL_I2S_MspInit+0x274>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000900:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000902:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000906:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000908:	4b6a      	ldr	r3, [pc, #424]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800091c:	4b65      	ldr	r3, [pc, #404]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 800091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000922:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800092c:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 800092e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000932:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000934:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093a:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000940:	485c      	ldr	r0, [pc, #368]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000942:	f000 fac5 	bl	8000ed0 <HAL_DMA_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 800094c:	f7ff ff4c 	bl	80007e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a58      	ldr	r2, [pc, #352]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c
 8000956:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <HAL_I2S_MspInit+0x270>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800095c:	e09e      	b.n	8000a9c <HAL_I2S_MspInit+0x258>
  else if(hi2s->Instance==SPI2)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a56      	ldr	r2, [pc, #344]	; (8000abc <HAL_I2S_MspInit+0x278>)
 8000964:	4293      	cmp	r3, r2
 8000966:	f040 8099 	bne.w	8000a9c <HAL_I2S_MspInit+0x258>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a4d      	ldr	r2, [pc, #308]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a46      	ldr	r2, [pc, #280]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3f      	ldr	r2, [pc, #252]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a38      	ldr	r2, [pc, #224]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <HAL_I2S_MspInit+0x264>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009da:	2302      	movs	r3, #2
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <HAL_I2S_MspInit+0x26c>)
 80009f6:	f000 fd55 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4825      	ldr	r0, [pc, #148]	; (8000aac <HAL_I2S_MspInit+0x268>)
 8000a16:	f000 fd45 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <HAL_I2S_MspInit+0x27c>)
 8000a38:	f000 fd34 	bl	80014a4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_I2S_MspInit+0x284>)
 8000a40:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a62:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a72:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a82:	f000 fa25 	bl	8000ed0 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_I2S_MspInit+0x24c>
      Error_Handler();
 8000a8c:	f7ff feac 	bl	80007e8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_I2S_MspInit+0x280>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a9c:	bf00      	nop
 8000a9e:	3738      	adds	r7, #56	; 0x38
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40013000 	.word	0x40013000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	20000070 	.word	0x20000070
 8000ab8:	40026410 	.word	0x40026410
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	200000d0 	.word	0x200000d0
 8000ac8:	40026070 	.word	0x40026070

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8a8 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Stream4_IRQHandler+0x10>)
 8000b26:	f000 fa81 	bl	800102c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d0 	.word	0x200000d0

08000b34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA2_Stream0_IRQHandler+0x10>)
 8000b3a:	f000 fa77 	bl	800102c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000070 	.word	0x20000070

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <SystemInit+0x28>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <SystemInit+0x28>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SystemInit+0x28>)
 8000b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b62:	609a      	str	r2, [r3, #8]
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
  ldr  r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b94:	f842 3b04 	str.w	r3, [r2], #4

08000b98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9e:	f7ff ffd3 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 fab3 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fca9 	bl	80004fc <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bb0:	080031a4 	.word	0x080031a4
  ldr  r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bc0:	2000017c 	.word	0x2000017c

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_Init+0x40>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_Init+0x40>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x40>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f92b 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fdfa 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f943 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f90b 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000178 	.word	0x20000178

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000178 	.word	0x20000178

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff29 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff3e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff feda 	bl	8000c94 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e099      	b.n	8001020 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0c:	e00f      	b.n	8000f2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0e:	f7ff fec1 	bl	8000c94 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d908      	bls.n	8000f2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2220      	movs	r2, #32
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2203      	movs	r2, #3
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e078      	b.n	8001020 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e8      	bne.n	8000f0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_DMA_Init+0x158>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d107      	bne.n	8000f98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4313      	orrs	r3, r2
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f023 0307 	bic.w	r3, r3, #7
 8000fae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d117      	bne.n	8000ff2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00e      	beq.n	8000ff2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f9e9 	bl	80013ac <DMA_CheckFifoParam>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e016      	b.n	8001020 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f9a0 	bl	8001340 <DMA_CalcBaseAndBitshift>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001008:	223f      	movs	r2, #63	; 0x3f
 800100a:	409a      	lsls	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	f010803f 	.word	0xf010803f

0800102c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001038:	4b92      	ldr	r3, [pc, #584]	; (8001284 <HAL_DMA_IRQHandler+0x258>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a92      	ldr	r2, [pc, #584]	; (8001288 <HAL_DMA_IRQHandler+0x25c>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0a9b      	lsrs	r3, r3, #10
 8001044:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001056:	2208      	movs	r2, #8
 8001058:	409a      	lsls	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d01a      	beq.n	8001098 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0204 	bic.w	r2, r2, #4
 800107e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001084:	2208      	movs	r2, #8
 8001086:	409a      	lsls	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	2201      	movs	r2, #1
 800109e:	409a      	lsls	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d012      	beq.n	80010ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2201      	movs	r2, #1
 80010bc:	409a      	lsls	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	f043 0202 	orr.w	r2, r3, #2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d2:	2204      	movs	r2, #4
 80010d4:	409a      	lsls	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d012      	beq.n	8001104 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	2204      	movs	r2, #4
 80010f2:	409a      	lsls	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fc:	f043 0204 	orr.w	r2, r3, #4
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	2210      	movs	r2, #16
 800110a:	409a      	lsls	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d043      	beq.n	800119c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03c      	beq.n	800119c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	2210      	movs	r2, #16
 8001128:	409a      	lsls	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d108      	bne.n	800115c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d024      	beq.n	800119c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
 800115a:	e01f      	b.n	800119c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001160:	2b00      	cmp	r3, #0
 8001162:	d01b      	beq.n	800119c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
 800116c:	e016      	b.n	800119c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0208 	bic.w	r2, r2, #8
 800118a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	2220      	movs	r2, #32
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 808e 	beq.w	80012ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8086 	beq.w	80012ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2220      	movs	r2, #32
 80011c4:	409a      	lsls	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d136      	bne.n	8001244 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0216 	bic.w	r2, r2, #22
 80011e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <HAL_DMA_IRQHandler+0x1da>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0208 	bic.w	r2, r2, #8
 8001214:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121a:	223f      	movs	r2, #63	; 0x3f
 800121c:	409a      	lsls	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	2b00      	cmp	r3, #0
 8001238:	d07d      	beq.n	8001336 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
        }
        return;
 8001242:	e078      	b.n	8001336 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01c      	beq.n	800128c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d108      	bne.n	8001272 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	2b00      	cmp	r3, #0
 8001266:	d030      	beq.n	80012ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	4798      	blx	r3
 8001270:	e02b      	b.n	80012ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d027      	beq.n	80012ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
 8001282:	e022      	b.n	80012ca <HAL_DMA_IRQHandler+0x29e>
 8001284:	20000000 	.word	0x20000000
 8001288:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10f      	bne.n	80012ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0210 	bic.w	r2, r2, #16
 80012a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d032      	beq.n	8001338 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d022      	beq.n	8001324 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2205      	movs	r2, #5
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d307      	bcc.n	8001312 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f2      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x2ca>
 8001310:	e000      	b.n	8001314 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001312:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
 8001334:	e000      	b.n	8001338 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001336:	bf00      	nop
    }
  }
}
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop

08001340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b10      	subs	r3, #16
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <DMA_CalcBaseAndBitshift+0x68>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d909      	bls.n	8001382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	1d1a      	adds	r2, r3, #4
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	659a      	str	r2, [r3, #88]	; 0x58
 8001380:	e007      	b.n	8001392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	aaaaaaab 	.word	0xaaaaaaab
 80013a8:	0800318c 	.word	0x0800318c

080013ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11f      	bne.n	8001406 <DMA_CheckFifoParam+0x5a>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d856      	bhi.n	800147a <DMA_CheckFifoParam+0xce>
 80013cc:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <DMA_CheckFifoParam+0x28>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	080013e5 	.word	0x080013e5
 80013d8:	080013f7 	.word	0x080013f7
 80013dc:	080013e5 	.word	0x080013e5
 80013e0:	0800147b 	.word	0x0800147b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d046      	beq.n	800147e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f4:	e043      	b.n	800147e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013fe:	d140      	bne.n	8001482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001404:	e03d      	b.n	8001482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d121      	bne.n	8001454 <DMA_CheckFifoParam+0xa8>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d837      	bhi.n	8001486 <DMA_CheckFifoParam+0xda>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <DMA_CheckFifoParam+0x70>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001433 	.word	0x08001433
 8001424:	0800142d 	.word	0x0800142d
 8001428:	08001445 	.word	0x08001445
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
      break;
 8001430:	e030      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d025      	beq.n	800148a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001442:	e022      	b.n	800148a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800144c:	d11f      	bne.n	800148e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001452:	e01c      	b.n	800148e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d903      	bls.n	8001462 <DMA_CheckFifoParam+0xb6>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d003      	beq.n	8001468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001460:	e018      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
      break;
 8001466:	e015      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
      break;
 8001478:	e00b      	b.n	8001492 <DMA_CheckFifoParam+0xe6>
      break;
 800147a:	bf00      	nop
 800147c:	e00a      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;
 800147e:	bf00      	nop
 8001480:	e008      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;
 8001482:	bf00      	nop
 8001484:	e006      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;
 8001486:	bf00      	nop
 8001488:	e004      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;
 800148a:	bf00      	nop
 800148c:	e002      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;   
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
      break;
 8001492:	bf00      	nop
    }
  } 
  
  return status; 
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e165      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8154 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80ae 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_GPIO_Init+0x300>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <HAL_GPIO_Init+0x300>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_GPIO_Init+0x300>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4f      	ldr	r2, [pc, #316]	; (80017ac <HAL_GPIO_Init+0x308>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d025      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4e      	ldr	r2, [pc, #312]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01f      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x310>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <HAL_GPIO_Init+0x314>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_GPIO_Init+0x318>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x20a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x31c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x206>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_GPIO_Init+0x320>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x202>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e00c      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e00a      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x21c>
 80016be:	2300      	movs	r3, #0
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d0:	4935      	ldr	r1, [pc, #212]	; (80017a8 <HAL_GPIO_Init+0x304>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_GPIO_Init+0x324>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001702:	4a31      	ldr	r2, [pc, #196]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	f67f ae96 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40021400 	.word	0x40021400
 80017c4:	40021800 	.word	0x40021800
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0e1      	b.n	80019a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a6d      	ldr	r2, [pc, #436]	; (80019ac <HAL_I2S_Init+0x1e0>)
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff f823 	bl	8000844 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d06f      	beq.n	800190a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001832:	2310      	movs	r3, #16
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e001      	b.n	800183c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b20      	cmp	r3, #32
 8001842:	d802      	bhi.n	800184a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_I2S_Init+0x1e4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_I2S_Init+0x92>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a56      	ldr	r2, [pc, #344]	; (80019b4 <HAL_I2S_Init+0x1e8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d104      	bne.n	8001868 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800185e:	2001      	movs	r0, #1
 8001860:	f000 fe12 	bl	8002488 <HAL_RCCEx_GetPeriphCLKFreq>
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	e003      	b.n	8001870 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001868:	2002      	movs	r0, #2
 800186a:	f000 fe0d 	bl	8002488 <HAL_RCCEx_GetPeriphCLKFreq>
 800186e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001878:	d125      	bne.n	80018c6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d010      	beq.n	80018a4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	fbb2 f2f3 	udiv	r2, r2, r3
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	461a      	mov	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	3305      	adds	r3, #5
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e01f      	b.n	80018e4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	3305      	adds	r3, #5
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	e00e      	b.n	80018e4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	3305      	adds	r3, #5
 80018e2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_I2S_Init+0x1ec>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	e003      	b.n	8001912 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800190a:	2302      	movs	r3, #2
 800190c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d902      	bls.n	800191e <HAL_I2S_Init+0x152>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d907      	bls.n	800192e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e039      	b.n	80019a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	ea42 0103 	orr.w	r1, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800194c:	f023 030f 	bic.w	r3, r3, #15
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6851      	ldr	r1, [r2, #4]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6892      	ldr	r2, [r2, #8]
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6992      	ldr	r2, [r2, #24]
 8001964:	430a      	orrs	r2, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001970:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b30      	cmp	r3, #48	; 0x30
 8001978:	d003      	beq.n	8001982 <HAL_I2S_Init+0x1b6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2bb0      	cmp	r3, #176	; 0xb0
 8001980:	d107      	bne.n	8001992 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001990:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	08001ab3 	.word	0x08001ab3
 80019b0:	40003800 	.word	0x40003800
 80019b4:	40003c00 	.word	0x40003c00
 80019b8:	cccccccd 	.word	0xcccccccd

080019bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	881a      	ldrh	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	1c9a      	adds	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb8 	bl	80019bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	b292      	uxth	r2, r2
 8001a68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	1c9a      	adds	r2, r3, #2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10e      	bne.n	8001aaa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff93 	bl	80019d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d13a      	bne.n	8001b44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d109      	bne.n	8001aec <I2S_IRQHandler+0x3a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d102      	bne.n	8001aec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb4 	bl	8001a54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d126      	bne.n	8001b44 <I2S_IRQHandler+0x92>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d11f      	bne.n	8001b44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff50 	bl	80019e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d136      	bne.n	8001bbe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d109      	bne.n	8001b6e <I2S_IRQHandler+0xbc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b80      	cmp	r3, #128	; 0x80
 8001b66:	d102      	bne.n	8001b6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff45 	bl	80019f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d122      	bne.n	8001bbe <I2S_IRQHandler+0x10c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d11b      	bne.n	8001bbe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff13 	bl	80019e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_PWREx_EnableOverDrive+0x94>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff f84e 	bl	8000c94 <HAL_GetTick>
 8001bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bfa:	e009      	b.n	8001c10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfc:	f7ff f84a 	bl	8000c94 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0a:	d901      	bls.n	8001c10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e01f      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c24:	f7ff f836 	bl	8000c94 <HAL_GetTick>
 8001c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c2a:	e009      	b.n	8001c40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c2c:	f7ff f832 	bl	8000c94 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c3a:	d901      	bls.n	8001c40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e007      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c4c:	d1ee      	bne.n	8001c2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	420e0040 	.word	0x420e0040
 8001c60:	40007000 	.word	0x40007000
 8001c64:	420e0044 	.word	0x420e0044

08001c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cc      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d90c      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0b8      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	494d      	ldr	r1, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d044      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d119      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e07f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e067      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4934      	ldr	r1, [pc, #208]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7fe ff9c 	bl	8000c94 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7fe ff98 	bl	8000c94 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e04f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d20c      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e032      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4916      	ldr	r1, [pc, #88]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dee:	f000 fd93 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	490a      	ldr	r1, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fefc 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00
 8001e24:	40023800 	.word	0x40023800
 8001e28:	0800317c 	.word	0x0800317c
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e72:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	496c      	ldr	r1, [pc, #432]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	4960      	ldr	r1, [pc, #384]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec8:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4955      	ldr	r1, [pc, #340]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee6:	d101      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d017      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f04:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	4946      	ldr	r1, [pc, #280]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f22:	d101      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f30:	2301      	movs	r3, #1
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 808a 	beq.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a38      	ldr	r2, [pc, #224]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a33      	ldr	r2, [pc, #204]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fe93 	bl	8000c94 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe fe8f 	bl	8000c94 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e278      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02f      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d028      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d114      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fe5d 	bl	8000c94 <HAL_GetTick>
 8001fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fe59 	bl	8000c94 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e240      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ee      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800200c:	d114      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800201e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002022:	4902      	ldr	r1, [pc, #8]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
 8002028:	e00c      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40007000 	.word	0x40007000
 8002034:	42470e40 	.word	0x42470e40
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a49      	ldr	r2, [pc, #292]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800203e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002042:	6093      	str	r3, [r2, #8]
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	4944      	ldr	r1, [pc, #272]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002052:	4313      	orrs	r3, r2
 8002054:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800206a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002078:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4937      	ldr	r1, [pc, #220]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	492e      	ldr	r1, [pc, #184]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	4926      	ldr	r1, [pc, #152]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020da:	d101      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80020dc:	2301      	movs	r3, #1
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	491a      	ldr	r1, [pc, #104]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800212e:	2301      	movs	r3, #1
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d005      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002140:	f040 80ff 	bne.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800214a:	f7fe fda3 	bl	8000c94 <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002150:	e00e      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002152:	f7fe fd9f 	bl	8000c94 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d907      	bls.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e188      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002164:	40023800 	.word	0x40023800
 8002168:	424711e0 	.word	0x424711e0
 800216c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002170:	4b7e      	ldr	r3, [pc, #504]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ea      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002198:	2b00      	cmp	r3, #0
 800219a:	d028      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d124      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021a4:	4b71      	ldr	r3, [pc, #452]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	3301      	adds	r3, #1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021bc:	0e1b      	lsrs	r3, r3, #24
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	431a      	orrs	r2, r3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	431a      	orrs	r2, r3
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	071b      	lsls	r3, r3, #28
 80021e6:	4961      	ldr	r1, [pc, #388]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d035      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002218:	d130      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800221a:	4b54      	ldr	r3, [pc, #336]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800221c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002232:	0f1b      	lsrs	r3, r3, #28
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	431a      	orrs	r2, r3
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	431a      	orrs	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	071b      	lsls	r3, r3, #28
 800225c:	4943      	ldr	r1, [pc, #268]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800226a:	f023 021f 	bic.w	r2, r3, #31
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	493d      	ldr	r1, [pc, #244]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d029      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002290:	d124      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a4:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022aa:	0f1b      	lsrs	r3, r3, #28
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	071b      	lsls	r3, r3, #28
 80022d4:	4925      	ldr	r1, [pc, #148]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d016      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	3b01      	subs	r3, #1
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	4917      	ldr	r1, [pc, #92]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fcba 	bl	8000c94 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002324:	f7fe fcb6 	bl	8000c94 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e09f      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 8095 	bne.w	8002474 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002350:	f7fe fca0 	bl	8000c94 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002358:	f7fe fc9c 	bl	8000c94 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e085      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	42470068 	.word	0x42470068
 8002374:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002384:	d0e8      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02b      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d127      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	3301      	adds	r3, #1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	4928      	ldr	r1, [pc, #160]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023e4:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	3b01      	subs	r3, #1
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01d      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002412:	d118      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	0e1b      	lsrs	r3, r3, #24
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4910      	ldr	r1, [pc, #64]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fc22 	bl	8000c94 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002454:	f7fe fc1e 	bl	8000c94 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e007      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800246e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002472:	d1ef      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3730      	adds	r7, #48	; 0x30
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	42470070 	.word	0x42470070

08002488 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	f200 8224 	bhi.w	80028fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080026bb 	.word	0x080026bb
 80024bc:	080027e5 	.word	0x080027e5
 80024c0:	080028fb 	.word	0x080028fb
 80024c4:	080024d9 	.word	0x080024d9
 80024c8:	080028fb 	.word	0x080028fb
 80024cc:	080028fb 	.word	0x080028fb
 80024d0:	080028fb 	.word	0x080028fb
 80024d4:	080024d9 	.word	0x080024d9
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80024d8:	4ba8      	ldr	r3, [pc, #672]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80024da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024de:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ee:	f000 80d6 	beq.w	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f8:	f200 80dd 	bhi.w	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002502:	f000 809f 	beq.w	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800250c:	f200 80d3 	bhi.w	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002516:	d05b      	beq.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	f200 80ca 	bhi.w	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002528:	f000 80b6 	beq.w	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002532:	f200 80c0 	bhi.w	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253c:	f000 8082 	beq.w	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002546:	f200 80b6 	bhi.w	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002556:	d03b      	beq.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002558:	e0ad      	b.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002566:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002570:	4a83      	ldr	r2, [pc, #524]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e008      	b.n	800258c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800257a:	4b80      	ldr	r3, [pc, #512]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	0e1b      	lsrs	r3, r3, #24
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	fb02 f203 	mul.w	r2, r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80025b4:	4b71      	ldr	r3, [pc, #452]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	61fb      	str	r3, [r7, #28]
          break;
 80025ce:	e073      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80025dc:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e008      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80025f0:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fa:	4a62      	ldr	r2, [pc, #392]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002602:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002608:	0e1b      	lsrs	r3, r3, #24
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002610:	4b5a      	ldr	r3, [pc, #360]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	fb02 f203 	mul.w	r2, r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	3301      	adds	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	61fb      	str	r3, [r7, #28]
          break;
 8002642:	e039      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002644:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	4a49      	ldr	r2, [pc, #292]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e007      	b.n	8002672 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266a:	4a46      	ldr	r2, [pc, #280]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0f1b      	lsrs	r3, r3, #28
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	fb02 f203 	mul.w	r2, r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]
          break;
 8002696:	e00f      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800269a:	61fb      	str	r3, [r7, #28]
          break;
 800269c:	e00c      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80026ac:	61fb      	str	r3, [r7, #28]
          break;
 80026ae:	e003      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80026b2:	61fb      	str	r3, [r7, #28]
          break;
 80026b4:	e000      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80026b6:	bf00      	nop
        }
      }
      break;
 80026b8:	e11f      	b.n	80028fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80026cc:	d079      	beq.n	80027c2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80026d4:	f200 8082 	bhi.w	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026de:	d03c      	beq.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e6:	d879      	bhi.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f4:	d172      	bne.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80026f8:	61fb      	str	r3, [r7, #28]
          break;
 80026fa:	e072      	b.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002708:	d109      	bne.n	800271e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800270c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e008      	b.n	8002730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274a:	0f1b      	lsrs	r3, r3, #28
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	61fb      	str	r3, [r7, #28]
          break;
 8002758:	e043      	b.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002766:	d111      	bne.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e010      	b.n	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	017d7840 	.word	0x017d7840
 8002788:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800278c:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80027ae:	4b56      	ldr	r3, [pc, #344]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0f1b      	lsrs	r3, r3, #28
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	61fb      	str	r3, [r7, #28]
          break;
 80027c0:	e00f      	b.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d102      	bne.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80027d2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80027d4:	e005      	b.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80027d6:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80027d8:	61fb      	str	r3, [r7, #28]
          break;
 80027da:	e002      	b.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
          break;
 80027e0:	bf00      	nop
        }
      }
      break;
 80027e2:	e08a      	b.n	80028fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80027e4:	4b48      	ldr	r3, [pc, #288]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80027e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ea:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80027f6:	d06f      	beq.n	80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80027fe:	d878      	bhi.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002806:	d03c      	beq.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800280e:	d870      	bhi.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d169      	bne.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002820:	61fb      	str	r3, [r7, #28]
          break;
 8002822:	e069      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002824:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d109      	bne.n	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002832:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800283c:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e008      	b.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002850:	4a2e      	ldr	r2, [pc, #184]	; (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	099b      	lsrs	r3, r3, #6
 8002860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002872:	0f1b      	lsrs	r3, r3, #28
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	61fb      	str	r3, [r7, #28]
          break;
 8002880:	e03a      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288e:	d108      	bne.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0f1b      	lsrs	r3, r3, #28
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	61fb      	str	r3, [r7, #28]
          break;
 80028d6:	e00f      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e4:	d102      	bne.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80028e8:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80028ea:	e005      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80028ee:	61fb      	str	r3, [r7, #28]
          break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
          break;
 80028f6:	bf00      	nop
        }
      }
      break;
 80028f8:	bf00      	nop
    }
  }
  return frequency;
 80028fa:	69fb      	ldr	r3, [r7, #28]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3724      	adds	r7, #36	; 0x24
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	017d7840 	.word	0x017d7840
 8002914:	00bb8000 	.word	0x00bb8000

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800291c:	b087      	sub	sp, #28
 800291e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002920:	2600      	movs	r6, #0
 8002922:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002924:	2600      	movs	r6, #0
 8002926:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002928:	2600      	movs	r6, #0
 800292a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800292c:	2600      	movs	r6, #0
 800292e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002930:	2600      	movs	r6, #0
 8002932:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002934:	4ea3      	ldr	r6, [pc, #652]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002936:	68b6      	ldr	r6, [r6, #8]
 8002938:	f006 060c 	and.w	r6, r6, #12
 800293c:	2e0c      	cmp	r6, #12
 800293e:	f200 8137 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x298>
 8002942:	f20f 0c08 	addw	ip, pc, #8
 8002946:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002981 	.word	0x08002981
 8002950:	08002bb1 	.word	0x08002bb1
 8002954:	08002bb1 	.word	0x08002bb1
 8002958:	08002bb1 	.word	0x08002bb1
 800295c:	08002987 	.word	0x08002987
 8002960:	08002bb1 	.word	0x08002bb1
 8002964:	08002bb1 	.word	0x08002bb1
 8002968:	08002bb1 	.word	0x08002bb1
 800296c:	0800298d 	.word	0x0800298d
 8002970:	08002bb1 	.word	0x08002bb1
 8002974:	08002bb1 	.word	0x08002bb1
 8002978:	08002bb1 	.word	0x08002bb1
 800297c:	08002aa3 	.word	0x08002aa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002982:	613b      	str	r3, [r7, #16]
       break;
 8002984:	e117      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002986:	4b91      	ldr	r3, [pc, #580]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e114      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298c:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002994:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d024      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	461a      	mov	r2, r3
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029b2:	f04f 0500 	mov.w	r5, #0
 80029b6:	ea02 0004 	and.w	r0, r2, r4
 80029ba:	ea03 0105 	and.w	r1, r3, r5
 80029be:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80029c0:	fb03 f201 	mul.w	r2, r3, r1
 80029c4:	2300      	movs	r3, #0
 80029c6:	fb03 f300 	mul.w	r3, r3, r0
 80029ca:	4413      	add	r3, r2
 80029cc:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80029ce:	fba0 0102 	umull	r0, r1, r0, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	4619      	mov	r1, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f7fd fc11 	bl	8000204 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4613      	mov	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e04c      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	461a      	mov	r2, r3
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	ea02 0800 	and.w	r8, r2, r0
 8002a04:	ea03 0901 	and.w	r9, r3, r1
 8002a08:	4640      	mov	r0, r8
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	014b      	lsls	r3, r1, #5
 8002a16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a1a:	0142      	lsls	r2, r0, #5
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	ebb0 0008 	subs.w	r0, r0, r8
 8002a24:	eb61 0109 	sbc.w	r1, r1, r9
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	018b      	lsls	r3, r1, #6
 8002a32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a36:	0182      	lsls	r2, r0, #6
 8002a38:	1a12      	subs	r2, r2, r0
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	00d9      	lsls	r1, r3, #3
 8002a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a4c:	00d0      	lsls	r0, r2, #3
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	eb12 0208 	adds.w	r2, r2, r8
 8002a56:	eb43 0309 	adc.w	r3, r3, r9
 8002a5a:	f04f 0000 	mov.w	r0, #0
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	0299      	lsls	r1, r3, #10
 8002a64:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a68:	0290      	lsls	r0, r2, #10
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f7fd fbc3 	bl	8000204 <__aeabi_uldivmod>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4613      	mov	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	3301      	adds	r3, #1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	613b      	str	r3, [r7, #16]
      break;
 8002aa0:	e089      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa2:	4948      	ldr	r1, [pc, #288]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002aa4:	6849      	ldr	r1, [r1, #4]
 8002aa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002aaa:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aac:	4945      	ldr	r1, [pc, #276]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002aae:	6849      	ldr	r1, [r1, #4]
 8002ab0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	d024      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4942      	ldr	r1, [pc, #264]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002aba:	6849      	ldr	r1, [r1, #4]
 8002abc:	0989      	lsrs	r1, r1, #6
 8002abe:	4608      	mov	r0, r1
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ac8:	f04f 0500 	mov.w	r5, #0
 8002acc:	ea00 0204 	and.w	r2, r0, r4
 8002ad0:	ea01 0305 	and.w	r3, r1, r5
 8002ad4:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002ad6:	fb01 f003 	mul.w	r0, r1, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	fb01 f102 	mul.w	r1, r1, r2
 8002ae0:	1844      	adds	r4, r0, r1
 8002ae2:	493a      	ldr	r1, [pc, #232]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002ae4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ae8:	1863      	adds	r3, r4, r1
 8002aea:	4619      	mov	r1, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fd fb86 	bl	8000204 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e04a      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	ea02 0400 	and.w	r4, r2, r0
 8002b1a:	ea03 0501 	and.w	r5, r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	014b      	lsls	r3, r1, #5
 8002b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b30:	0142      	lsls	r2, r0, #5
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	1b00      	subs	r0, r0, r4
 8002b38:	eb61 0105 	sbc.w	r1, r1, r5
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	018b      	lsls	r3, r1, #6
 8002b46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b4a:	0182      	lsls	r2, r0, #6
 8002b4c:	1a12      	subs	r2, r2, r0
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	00d9      	lsls	r1, r3, #3
 8002b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b60:	00d0      	lsls	r0, r2, #3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	1912      	adds	r2, r2, r4
 8002b68:	eb45 0303 	adc.w	r3, r5, r3
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0299      	lsls	r1, r3, #10
 8002b76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b7a:	0290      	lsls	r0, r2, #10
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f7fd fb3a 	bl	8000204 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0f1b      	lsrs	r3, r3, #28
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	613b      	str	r3, [r7, #16]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002bb2:	613b      	str	r3, [r7, #16]
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	693b      	ldr	r3, [r7, #16]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	017d7840 	.word	0x017d7840

08002bd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e28d      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8083 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bf0:	4b94      	ldr	r3, [pc, #592]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfc:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c08:	4b8e      	ldr	r3, [pc, #568]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b8b      	ldr	r3, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05b      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x124>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d157      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e25a      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x90>
 8002c52:	4b7c      	ldr	r3, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7b      	ldr	r2, [pc, #492]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xcc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0xb4>
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a72      	ldr	r2, [pc, #456]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xcc>
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6b      	ldr	r2, [pc, #428]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fd fff6 	bl	8000c94 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fd fff2 	bl	8000c94 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e21f      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xdc>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fd ffe2 	bl	8000c94 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fd ffde 	bl	8000c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e20b      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x104>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06f      	beq.n	8002de2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d02:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x186>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1d3      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e03a      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_OscConfig+0x278>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fd ff8b 	bl	8000c94 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fd ff87 	bl	8000c94 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1b4      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4925      	ldr	r1, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x278>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fd ff6a 	bl	8000c94 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fd ff66 	bl	8000c94 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e193      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d036      	beq.n	8002e5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x27c>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fd ff4a 	bl	8000c94 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fd ff46 	bl	8000c94 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e173      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x234>
 8002e22:	e01b      	b.n	8002e5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x27c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fd ff33 	bl	8000c94 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	e00e      	b.n	8002e50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fd ff2f 	bl	8000c94 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d907      	bls.n	8002e50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e15c      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b8a      	ldr	r3, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ea      	bne.n	8002e32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8097 	beq.w	8002f98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b83      	ldr	r3, [pc, #524]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b79      	ldr	r3, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x4b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4b0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4b0>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fd feef 	bl	8000c94 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fd feeb 	bl	8000c94 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e118      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4b0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x31e>
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e01c      	b.n	8002f28 <HAL_RCC_OscConfig+0x358>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x340>
 8002ef6:	4b61      	ldr	r3, [pc, #388]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a60      	ldr	r2, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0x358>
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a59      	ldr	r2, [pc, #356]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fd feb0 	bl	8000c94 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fd feac 	bl	8000c94 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0d7      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ee      	beq.n	8002f38 <HAL_RCC_OscConfig+0x368>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fd fe9a 	bl	8000c94 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fd fe96 	bl	8000c94 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0c1      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ee      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a3a      	ldr	r2, [pc, #232]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80ad 	beq.w	80030fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d060      	beq.n	8003070 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d145      	bne.n	8003042 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_OscConfig+0x4b4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fd fe6a 	bl	8000c94 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd fe66 	bl	8000c94 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e093      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	491b      	ldr	r1, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x4b4>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fd fe3b 	bl	8000c94 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003022:	f7fd fe37 	bl	8000c94 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e064      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x452>
 8003040:	e05c      	b.n	80030fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x4b4>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd fe24 	bl	8000c94 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003050:	f7fd fe20 	bl	8000c94 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e04d      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x4ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x480>
 800306e:	e045      	b.n	80030fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e040      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
 800307c:	40023800 	.word	0x40023800
 8003080:	40007000 	.word	0x40007000
 8003084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003088:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <HAL_RCC_OscConfig+0x538>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d030      	beq.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d129      	bne.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d122      	bne.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d119      	bne.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	3b01      	subs	r3, #1
 80030d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10f      	bne.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4d0d      	ldr	r5, [pc, #52]	; (8003144 <__libc_init_array+0x38>)
 8003110:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	2600      	movs	r6, #0
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	4d0b      	ldr	r5, [pc, #44]	; (800314c <__libc_init_array+0x40>)
 800311e:	4c0c      	ldr	r4, [pc, #48]	; (8003150 <__libc_init_array+0x44>)
 8003120:	f000 f820 	bl	8003164 <_init>
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	2600      	movs	r6, #0
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f855 3b04 	ldr.w	r3, [r5], #4
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f855 3b04 	ldr.w	r3, [r5], #4
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	0800319c 	.word	0x0800319c
 8003148:	0800319c 	.word	0x0800319c
 800314c:	0800319c 	.word	0x0800319c
 8003150:	080031a0 	.word	0x080031a0

08003154 <memset>:
 8003154:	4402      	add	r2, r0
 8003156:	4603      	mov	r3, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	f803 1b01 	strb.w	r1, [r3], #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
