
SpectrumMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013484  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a50  08018a50  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08018a50  08018a50  00028a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a58  08018a58  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a58  08018a58  00028a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a5c  08018a5c  00028a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08018a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141e0  20000074  08018ad4  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014254  08018ad4  00034254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c507  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e5  00000000  00000000  0003c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0003f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213ce  00000000  00000000  0003f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd72  00000000  00000000  00060d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f34  00000000  00000000  0006cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00136a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  00136af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0013918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080055b4 	.word	0x080055b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	080055b4 	.word	0x080055b4

08000204 <arm_bitreversal_32>:
 8000204:	1c4b      	adds	r3, r1, #1
 8000206:	2b01      	cmp	r3, #1
 8000208:	bf98      	it	ls
 800020a:	4770      	bxls	lr
 800020c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000210:	1c91      	adds	r1, r2, #2
 8000212:	089b      	lsrs	r3, r3, #2

08000214 <arm_bitreversal_32_0>:
 8000214:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000218:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800021c:	880a      	ldrh	r2, [r1, #0]
 800021e:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000222:	4480      	add	r8, r0
 8000224:	4481      	add	r9, r0
 8000226:	4402      	add	r2, r0
 8000228:	4484      	add	ip, r0
 800022a:	f8d9 7000 	ldr.w	r7, [r9]
 800022e:	f8d8 6000 	ldr.w	r6, [r8]
 8000232:	6815      	ldr	r5, [r2, #0]
 8000234:	f8dc 4000 	ldr.w	r4, [ip]
 8000238:	f8c9 6000 	str.w	r6, [r9]
 800023c:	f8c8 7000 	str.w	r7, [r8]
 8000240:	f8cc 5000 	str.w	r5, [ip]
 8000244:	6014      	str	r4, [r2, #0]
 8000246:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800024a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024e:	6855      	ldr	r5, [r2, #4]
 8000250:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000254:	f8c9 6004 	str.w	r6, [r9, #4]
 8000258:	f8c8 7004 	str.w	r7, [r8, #4]
 800025c:	f8cc 5004 	str.w	r5, [ip, #4]
 8000260:	6054      	str	r4, [r2, #4]
 8000262:	3108      	adds	r1, #8
 8000264:	3b01      	subs	r3, #1
 8000266:	d1d5      	bne.n	8000214 <arm_bitreversal_32_0>
 8000268:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800026c:	4770      	bx	lr

0800026e <arm_bitreversal_16>:
 800026e:	1c4b      	adds	r3, r1, #1
 8000270:	2b01      	cmp	r3, #1
 8000272:	bf98      	it	ls
 8000274:	4770      	bxls	lr
 8000276:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800027a:	1c91      	adds	r1, r2, #2
 800027c:	089b      	lsrs	r3, r3, #2

0800027e <arm_bitreversal_16_0>:
 800027e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000282:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000286:	880a      	ldrh	r2, [r1, #0]
 8000288:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800028c:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000290:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000294:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000298:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 800029c:	f8d9 7000 	ldr.w	r7, [r9]
 80002a0:	f8d8 6000 	ldr.w	r6, [r8]
 80002a4:	6815      	ldr	r5, [r2, #0]
 80002a6:	f8dc 4000 	ldr.w	r4, [ip]
 80002aa:	f8c9 6000 	str.w	r6, [r9]
 80002ae:	f8c8 7000 	str.w	r7, [r8]
 80002b2:	f8cc 5000 	str.w	r5, [ip]
 80002b6:	6014      	str	r4, [r2, #0]
 80002b8:	3108      	adds	r1, #8
 80002ba:	3b01      	subs	r3, #1
 80002bc:	d1df      	bne.n	800027e <arm_bitreversal_16_0>
 80002be:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_uldivmod>:
 80002c4:	b953      	cbnz	r3, 80002dc <__aeabi_uldivmod+0x18>
 80002c6:	b94a      	cbnz	r2, 80002dc <__aeabi_uldivmod+0x18>
 80002c8:	2900      	cmp	r1, #0
 80002ca:	bf08      	it	eq
 80002cc:	2800      	cmpeq	r0, #0
 80002ce:	bf1c      	itt	ne
 80002d0:	f04f 31ff 	movne.w	r1, #4294967295
 80002d4:	f04f 30ff 	movne.w	r0, #4294967295
 80002d8:	f000 b96e 	b.w	80005b8 <__aeabi_idiv0>
 80002dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e4:	f000 f806 	bl	80002f4 <__udivmoddi4>
 80002e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f0:	b004      	add	sp, #16
 80002f2:	4770      	bx	lr

080002f4 <__udivmoddi4>:
 80002f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f8:	9d08      	ldr	r5, [sp, #32]
 80002fa:	4604      	mov	r4, r0
 80002fc:	468c      	mov	ip, r1
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8083 	bne.w	800040a <__udivmoddi4+0x116>
 8000304:	428a      	cmp	r2, r1
 8000306:	4617      	mov	r7, r2
 8000308:	d947      	bls.n	800039a <__udivmoddi4+0xa6>
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	b142      	cbz	r2, 8000322 <__udivmoddi4+0x2e>
 8000310:	f1c2 0020 	rsb	r0, r2, #32
 8000314:	fa24 f000 	lsr.w	r0, r4, r0
 8000318:	4091      	lsls	r1, r2
 800031a:	4097      	lsls	r7, r2
 800031c:	ea40 0c01 	orr.w	ip, r0, r1
 8000320:	4094      	lsls	r4, r2
 8000322:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fbbc f6f8 	udiv	r6, ip, r8
 800032c:	fa1f fe87 	uxth.w	lr, r7
 8000330:	fb08 c116 	mls	r1, r8, r6, ip
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f10e 	mul.w	r1, r6, lr
 800033c:	4299      	cmp	r1, r3
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x60>
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 8119 	bcs.w	800057c <__udivmoddi4+0x288>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 8116 	bls.w	800057c <__udivmoddi4+0x288>
 8000350:	3e02      	subs	r6, #2
 8000352:	443b      	add	r3, r7
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 fe0e 	mul.w	lr, r0, lr
 8000368:	45a6      	cmp	lr, r4
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x8c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	f080 8105 	bcs.w	8000580 <__udivmoddi4+0x28c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f240 8102 	bls.w	8000580 <__udivmoddi4+0x28c>
 800037c:	3802      	subs	r0, #2
 800037e:	443c      	add	r4, r7
 8000380:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa0>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	b902      	cbnz	r2, 800039e <__udivmoddi4+0xaa>
 800039c:	deff      	udf	#255	; 0xff
 800039e:	fab2 f282 	clz	r2, r2
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d150      	bne.n	8000448 <__udivmoddi4+0x154>
 80003a6:	1bcb      	subs	r3, r1, r7
 80003a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ac:	fa1f f887 	uxth.w	r8, r7
 80003b0:	2601      	movs	r6, #1
 80003b2:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b6:	0c21      	lsrs	r1, r4, #16
 80003b8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb08 f30c 	mul.w	r3, r8, ip
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xe4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0xe2>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	f200 80e9 	bhi.w	80005a8 <__udivmoddi4+0x2b4>
 80003d6:	4684      	mov	ip, r0
 80003d8:	1ac9      	subs	r1, r1, r3
 80003da:	b2a3      	uxth	r3, r4
 80003dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e8:	fb08 f800 	mul.w	r8, r8, r0
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x10c>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x10a>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	f200 80d9 	bhi.w	80005b0 <__udivmoddi4+0x2bc>
 80003fe:	4618      	mov	r0, r3
 8000400:	eba4 0408 	sub.w	r4, r4, r8
 8000404:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000408:	e7bf      	b.n	800038a <__udivmoddi4+0x96>
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x12e>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80b1 	beq.w	8000576 <__udivmoddi4+0x282>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x1cc>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0x140>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80b8 	bhi.w	80005a4 <__udivmoddi4+0x2b0>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0103 	sbc.w	r1, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	468c      	mov	ip, r1
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0a8      	beq.n	8000394 <__udivmoddi4+0xa0>
 8000442:	e9c5 4c00 	strd	r4, ip, [r5]
 8000446:	e7a5      	b.n	8000394 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f603 	lsr.w	r6, r0, r3
 8000450:	4097      	lsls	r7, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045a:	40d9      	lsrs	r1, r3
 800045c:	4330      	orrs	r0, r6
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	fbb1 f6fe 	udiv	r6, r1, lr
 8000464:	fa1f f887 	uxth.w	r8, r7
 8000468:	fb0e 1116 	mls	r1, lr, r6, r1
 800046c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000470:	fb06 f108 	mul.w	r1, r6, r8
 8000474:	4299      	cmp	r1, r3
 8000476:	fa04 f402 	lsl.w	r4, r4, r2
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x19c>
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000482:	f080 808d 	bcs.w	80005a0 <__udivmoddi4+0x2ac>
 8000486:	4299      	cmp	r1, r3
 8000488:	f240 808a 	bls.w	80005a0 <__udivmoddi4+0x2ac>
 800048c:	3e02      	subs	r6, #2
 800048e:	443b      	add	r3, r7
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b281      	uxth	r1, r0
 8000494:	fbb3 f0fe 	udiv	r0, r3, lr
 8000498:	fb0e 3310 	mls	r3, lr, r0, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb00 f308 	mul.w	r3, r0, r8
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x1c4>
 80004a8:	1879      	adds	r1, r7, r1
 80004aa:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ae:	d273      	bcs.n	8000598 <__udivmoddi4+0x2a4>
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d971      	bls.n	8000598 <__udivmoddi4+0x2a4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4439      	add	r1, r7
 80004b8:	1acb      	subs	r3, r1, r3
 80004ba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004be:	e778      	b.n	80003b2 <__udivmoddi4+0xbe>
 80004c0:	f1c6 0c20 	rsb	ip, r6, #32
 80004c4:	fa03 f406 	lsl.w	r4, r3, r6
 80004c8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004cc:	431c      	orrs	r4, r3
 80004ce:	fa20 f70c 	lsr.w	r7, r0, ip
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004da:	fa21 f10c 	lsr.w	r1, r1, ip
 80004de:	431f      	orrs	r7, r3
 80004e0:	0c3b      	lsrs	r3, r7, #16
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fa1f f884 	uxth.w	r8, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f2:	fb09 fa08 	mul.w	sl, r9, r8
 80004f6:	458a      	cmp	sl, r1
 80004f8:	fa02 f206 	lsl.w	r2, r2, r6
 80004fc:	fa00 f306 	lsl.w	r3, r0, r6
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x220>
 8000502:	1861      	adds	r1, r4, r1
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d248      	bcs.n	800059c <__udivmoddi4+0x2a8>
 800050a:	458a      	cmp	sl, r1
 800050c:	d946      	bls.n	800059c <__udivmoddi4+0x2a8>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	4421      	add	r1, r4
 8000514:	eba1 010a 	sub.w	r1, r1, sl
 8000518:	b2bf      	uxth	r7, r7
 800051a:	fbb1 f0fe 	udiv	r0, r1, lr
 800051e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000522:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45b8      	cmp	r8, r7
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x24a>
 800052e:	19e7      	adds	r7, r4, r7
 8000530:	f100 31ff 	add.w	r1, r0, #4294967295
 8000534:	d22e      	bcs.n	8000594 <__udivmoddi4+0x2a0>
 8000536:	45b8      	cmp	r8, r7
 8000538:	d92c      	bls.n	8000594 <__udivmoddi4+0x2a0>
 800053a:	3802      	subs	r0, #2
 800053c:	4427      	add	r7, r4
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba7 0708 	sub.w	r7, r7, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454f      	cmp	r7, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	4649      	mov	r1, r9
 8000550:	d31a      	bcc.n	8000588 <__udivmoddi4+0x294>
 8000552:	d017      	beq.n	8000584 <__udivmoddi4+0x290>
 8000554:	b15d      	cbz	r5, 800056e <__udivmoddi4+0x27a>
 8000556:	ebb3 020e 	subs.w	r2, r3, lr
 800055a:	eb67 0701 	sbc.w	r7, r7, r1
 800055e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000562:	40f2      	lsrs	r2, r6
 8000564:	ea4c 0202 	orr.w	r2, ip, r2
 8000568:	40f7      	lsrs	r7, r6
 800056a:	e9c5 2700 	strd	r2, r7, [r5]
 800056e:	2600      	movs	r6, #0
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	462e      	mov	r6, r5
 8000578:	4628      	mov	r0, r5
 800057a:	e70b      	b.n	8000394 <__udivmoddi4+0xa0>
 800057c:	4606      	mov	r6, r0
 800057e:	e6e9      	b.n	8000354 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fd      	b.n	8000380 <__udivmoddi4+0x8c>
 8000584:	4543      	cmp	r3, r8
 8000586:	d2e5      	bcs.n	8000554 <__udivmoddi4+0x260>
 8000588:	ebb8 0e02 	subs.w	lr, r8, r2
 800058c:	eb69 0104 	sbc.w	r1, r9, r4
 8000590:	3801      	subs	r0, #1
 8000592:	e7df      	b.n	8000554 <__udivmoddi4+0x260>
 8000594:	4608      	mov	r0, r1
 8000596:	e7d2      	b.n	800053e <__udivmoddi4+0x24a>
 8000598:	4660      	mov	r0, ip
 800059a:	e78d      	b.n	80004b8 <__udivmoddi4+0x1c4>
 800059c:	4681      	mov	r9, r0
 800059e:	e7b9      	b.n	8000514 <__udivmoddi4+0x220>
 80005a0:	4666      	mov	r6, ip
 80005a2:	e775      	b.n	8000490 <__udivmoddi4+0x19c>
 80005a4:	4630      	mov	r0, r6
 80005a6:	e74a      	b.n	800043e <__udivmoddi4+0x14a>
 80005a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005ac:	4439      	add	r1, r7
 80005ae:	e713      	b.n	80003d8 <__udivmoddi4+0xe4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	443c      	add	r4, r7
 80005b4:	e724      	b.n	8000400 <__udivmoddi4+0x10c>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fe0d 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f91d 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa75 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 fa3d 	bl	8000a4c <MX_DMA_Init>
  MX_I2S1_Init();
 80005d2:	f000 f9b5 	bl	8000940 <MX_I2S1_Init>
  MX_I2S2_Init();
 80005d6:	f000 f9e1 	bl	800099c <MX_I2S2_Init>
  MX_USART2_UART_Init();
 80005da:	f000 fa0d 	bl	80009f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s1, rxBuf, 8192);
 80005de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e2:	497f      	ldr	r1, [pc, #508]	; (80007e0 <main+0x224>)
 80005e4:	487f      	ldr	r0, [pc, #508]	; (80007e4 <main+0x228>)
 80005e6:	f001 fe23 	bl	8002230 <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, txBuf, 8192);
 80005ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ee:	497e      	ldr	r1, [pc, #504]	; (80007e8 <main+0x22c>)
 80005f0:	487e      	ldr	r0, [pc, #504]	; (80007ec <main+0x230>)
 80005f2:	f001 fd75 	bl	80020e0 <HAL_I2S_Transmit_DMA>

  arm_rfft_fast_init_f32(&fft_handler, 2048);
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	487d      	ldr	r0, [pc, #500]	; (80007f0 <main+0x234>)
 80005fc:	f003 fe26 	bl	800424c <arm_rfft_fast_init_f32>
  char faggot[5] = {'h', 'e', 'l', 'l', 'o'};
 8000600:	4a7c      	ldr	r2, [pc, #496]	; (80007f4 <main+0x238>)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	7019      	strb	r1, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //do audio loopback and push mono-sum to fft_in_buf
	  HAL_UART_Transmit(&huart2, faggot, 5, 100);
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2205      	movs	r2, #5
 8000614:	4878      	ldr	r0, [pc, #480]	; (80007f8 <main+0x23c>)
 8000616:	f003 fb74 	bl	8003d02 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, '\r', 1, 100);
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2201      	movs	r2, #1
 800061e:	210d      	movs	r1, #13
 8000620:	4875      	ldr	r0, [pc, #468]	; (80007f8 <main+0x23c>)
 8000622:	f003 fb6e 	bl	8003d02 <HAL_UART_Transmit>
	  int fft_in_ptr = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
	  if (callback_state == 1) {
 800062a:	4b74      	ldr	r3, [pc, #464]	; (80007fc <main+0x240>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d167      	bne.n	8000702 <main+0x146>
		  for (int i=0; i<8192; i=i+4) {
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	e05e      	b.n	80006f6 <main+0x13a>
			  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8000638:	4a69      	ldr	r2, [pc, #420]	; (80007e0 <main+0x224>)
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	3201      	adds	r2, #1
 8000646:	4966      	ldr	r1, [pc, #408]	; (80007e0 <main+0x224>)
 8000648:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800064c:	4313      	orrs	r3, r2
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000656:	4a6a      	ldr	r2, [pc, #424]	; (8000800 <main+0x244>)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	edc3 7a00 	vstr	s15, [r3]
			  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8000662:	4a67      	ldr	r2, [pc, #412]	; (8000800 <main+0x244>)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	ed93 7a00 	vldr	s14, [r3]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	3302      	adds	r3, #2
 8000672:	4a5b      	ldr	r2, [pc, #364]	; (80007e0 <main+0x224>)
 8000674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	3203      	adds	r2, #3
 800067e:	4958      	ldr	r1, [pc, #352]	; (80007e0 <main+0x224>)
 8000680:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000684:	4313      	orrs	r3, r2
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000692:	4a5b      	ldr	r2, [pc, #364]	; (8000800 <main+0x244>)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 800069e:	4a50      	ldr	r2, [pc, #320]	; (80007e0 <main+0x224>)
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006a6:	4a50      	ldr	r2, [pc, #320]	; (80007e8 <main+0x22c>)
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = rxBuf[i+1];
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3301      	adds	r3, #1
 80006b6:	494a      	ldr	r1, [pc, #296]	; (80007e0 <main+0x224>)
 80006b8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006bc:	4a4a      	ldr	r2, [pc, #296]	; (80007e8 <main+0x22c>)
 80006be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+2] = rxBuf[i+2];
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	1c9a      	adds	r2, r3, #2
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	3302      	adds	r3, #2
 80006ca:	4945      	ldr	r1, [pc, #276]	; (80007e0 <main+0x224>)
 80006cc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006d0:	4a45      	ldr	r2, [pc, #276]	; (80007e8 <main+0x22c>)
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = rxBuf[i+3];
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	1cda      	adds	r2, r3, #3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3303      	adds	r3, #3
 80006de:	4940      	ldr	r1, [pc, #256]	; (80007e0 <main+0x224>)
 80006e0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006e4:	4a40      	ldr	r2, [pc, #256]	; (80007e8 <main+0x22c>)
 80006e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  fft_in_ptr++;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
		  for (int i=0; i<8192; i=i+4) {
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3304      	adds	r3, #4
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fc:	db9c      	blt.n	8000638 <main+0x7c>
		  }

		  DoFFT();
 80006fe:	f000 fa2d 	bl	8000b5c <DoFFT>
	  }

	  if (callback_state == 2) {
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <main+0x240>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d181      	bne.n	800060e <main+0x52>
		  for (int i=8192; i<16384; i=i+4) {
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e05e      	b.n	80007d0 <main+0x214>
			  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8000712:	4a33      	ldr	r2, [pc, #204]	; (80007e0 <main+0x224>)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071a:	041b      	lsls	r3, r3, #16
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	3201      	adds	r2, #1
 8000720:	492f      	ldr	r1, [pc, #188]	; (80007e0 <main+0x224>)
 8000722:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000726:	4313      	orrs	r3, r2
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000730:	4a33      	ldr	r2, [pc, #204]	; (8000800 <main+0x244>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	edc3 7a00 	vstr	s15, [r3]
			  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 800073c:	4a30      	ldr	r2, [pc, #192]	; (8000800 <main+0x244>)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3302      	adds	r3, #2
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <main+0x224>)
 800074e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000752:	041b      	lsls	r3, r3, #16
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	3203      	adds	r2, #3
 8000758:	4921      	ldr	r1, [pc, #132]	; (80007e0 <main+0x224>)
 800075a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800075e:	4313      	orrs	r3, r2
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <main+0x244>)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <main+0x224>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <main+0x22c>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = rxBuf[i+1];
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	4913      	ldr	r1, [pc, #76]	; (80007e0 <main+0x224>)
 8000792:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <main+0x22c>)
 8000798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+2] = rxBuf[i+2];
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	1c9a      	adds	r2, r3, #2
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3302      	adds	r3, #2
 80007a4:	490e      	ldr	r1, [pc, #56]	; (80007e0 <main+0x224>)
 80007a6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <main+0x22c>)
 80007ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = rxBuf[i+3];
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	1cda      	adds	r2, r3, #3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3303      	adds	r3, #3
 80007b8:	4909      	ldr	r1, [pc, #36]	; (80007e0 <main+0x224>)
 80007ba:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <main+0x22c>)
 80007c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  fft_in_ptr++;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
		  for (int i=8192; i<16384; i=i+4) {
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3304      	adds	r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d6:	db9c      	blt.n	8000712 <main+0x156>
		  }


		  DoFFT();
 80007d8:	f000 f9c0 	bl	8000b5c <DoFFT>
  {
 80007dc:	e717      	b.n	800060e <main+0x52>
 80007de:	bf00      	nop
 80007e0:	200080ac 	.word	0x200080ac
 80007e4:	200100bc 	.word	0x200100bc
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	20014208 	.word	0x20014208
 80007f0:	20000094 	.word	0x20000094
 80007f4:	080055cc 	.word	0x080055cc
 80007f8:	20012104 	.word	0x20012104
 80007fc:	20000090 	.word	0x20000090
 8000800:	200121a8 	.word	0x200121a8

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ac      	sub	sp, #176	; 0xb0
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fd18 	bl	8005248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	225c      	movs	r2, #92	; 0x5c
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fd09 	bl	8005248 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <SystemClock_Config+0x134>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a3e      	ldr	r2, [pc, #248]	; (8000938 <SystemClock_Config+0x134>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <SystemClock_Config+0x134>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <SystemClock_Config+0x138>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a38      	ldr	r2, [pc, #224]	; (800093c <SystemClock_Config+0x138>)
 800085c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <SystemClock_Config+0x138>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086e:	2302      	movs	r3, #2
 8000870:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800088a:	2308      	movs	r3, #8
 800088c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000890:	23b4      	movs	r3, #180	; 0xb4
 8000892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 ff3d 	bl	800372c <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008b8:	f000 fa58 	bl	8000d6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008bc:	f001 fefe 	bl	80026bc <HAL_PWREx_EnableOverDrive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008c6:	f000 fa51 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e6:	2105      	movs	r1, #5
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 ff37 	bl	800275c <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008f4:	f000 fa3a 	bl	8000d6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 80008f8:	2303      	movs	r3, #3
 80008fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008fc:	23c0      	movs	r3, #192	; 0xc0
 80008fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000904:	2310      	movs	r3, #16
 8000906:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000914:	2300      	movs	r3, #0
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000918:	2300      	movs	r3, #0
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f835 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800092c:	f000 fa1e 	bl	8000d6c <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	37b0      	adds	r7, #176	; 0xb0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_I2S1_Init+0x54>)
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <MX_I2S1_Init+0x58>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2S1_Init+0x54>)
 800094c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000950:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_I2S1_Init+0x54>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_I2S1_Init+0x54>)
 800095a:	2203      	movs	r2, #3
 800095c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_I2S1_Init+0x54>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_I2S1_Init+0x54>)
 8000968:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800096c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_I2S1_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_I2S1_Init+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_I2S1_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_I2S1_Init+0x54>)
 8000982:	f001 fab5 	bl	8001ef0 <HAL_I2S_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 800098c:	f000 f9ee 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200100bc 	.word	0x200100bc
 8000998:	40013000 	.word	0x40013000

0800099c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <MX_I2S2_Init+0x58>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009c4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009c8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2S2_Init+0x54>)
 80009de:	f001 fa87 	bl	8001ef0 <HAL_I2S_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80009e8:	f000 f9c0 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20014208 	.word	0x20014208
 80009f4:	40003800 	.word	0x40003800

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f003 f91a 	bl	8003c68 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f997 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20012104 	.word	0x20012104
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_DMA_Init+0x68>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 fcf3 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a94:	200f      	movs	r0, #15
 8000a96:	f000 fd0c 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2038      	movs	r0, #56	; 0x38
 8000aa0:	f000 fceb 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa4:	2038      	movs	r0, #56	; 0x38
 8000aa6:	f000 fd04 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_GPIO_Init+0x68>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <complexABS>:

/* USER CODE BEGIN 4 */
float complexABS(float real, float compl)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b2e:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8000b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b36:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b3a:	edd7 7a00 	vldr	s15, [r7]
 8000b3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b46:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4a:	f004 fbbb 	bl	80052c4 <sqrtf>
 8000b4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DoFFT>:

void DoFFT()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, &fft_in_buf,&fft_out_buf,0);
 8000b66:	2300      	movs	r3, #0
 8000b68:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <DoFFT+0x130>)
 8000b6a:	4949      	ldr	r1, [pc, #292]	; (8000c90 <DoFFT+0x134>)
 8000b6c:	4849      	ldr	r0, [pc, #292]	; (8000c94 <DoFFT+0x138>)
 8000b6e:	f003 fbf1 	bl	8004354 <arm_rfft_fast_f32>

	int freqs[1024];
	int freqpoint = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b78:	f102 020c 	add.w	r2, r2, #12
 8000b7c:	6013      	str	r3, [r2, #0]
	int offset = 150; //variable noisefloor offset
 8000b7e:	2396      	movs	r3, #150	; 0x96
 8000b80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b84:	f102 0204 	add.w	r2, r2, #4
 8000b88:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b90:	f102 0208 	add.w	r2, r2, #8
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e067      	b.n	8000c68 <DoFFT+0x10c>
		freqs[freqpoint] = (int)(20*log10f(complexABS(fft_out_buf[i], fft_out_buf[i+1])))-offset;
 8000b98:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <DoFFT+0x130>)
 8000b9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b9e:	f103 0308 	add.w	r3, r3, #8
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bb0:	f103 0308 	add.w	r3, r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a34      	ldr	r2, [pc, #208]	; (8000c8c <DoFFT+0x130>)
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	eef0 0a47 	vmov.f32	s1, s14
 8000bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bca:	f7ff ffab 	bl	8000b24 <complexABS>
 8000bce:	eef0 7a40 	vmov.f32	s15, s0
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	f004 fb3f 	bl	8005258 <log10f>
 8000bda:	eef0 7a40 	vmov.f32	s15, s0
 8000bde:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bea:	ee17 2a90 	vmov	r2, s15
 8000bee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bf2:	f103 0304 	add.w	r3, r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1ad1      	subs	r1, r2, r3
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	3b0c      	subs	r3, #12
 8000c00:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c04:	f102 020c 	add.w	r2, r2, #12
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (freqs[freqpoint]<0) freqs[freqpoint]=0;
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	3b0c      	subs	r3, #12
 8000c14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c18:	f102 020c 	add.w	r2, r2, #12
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	da0a      	bge.n	8000c3c <DoFFT+0xe0>
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	3b0c      	subs	r3, #12
 8000c2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c30:	f102 020c 	add.w	r2, r2, #12
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	2100      	movs	r1, #0
 8000c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		freqpoint++;
 8000c3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c40:	f103 030c 	add.w	r3, r3, #12
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c4c:	f102 020c 	add.w	r2, r2, #12
 8000c50:	6013      	str	r3, [r2, #0]
	for (int i=0; i<2048; i=i+2) {
 8000c52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c56:	f103 0308 	add.w	r3, r3, #8
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c62:	f102 0208 	add.w	r2, r2, #8
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c6c:	f103 0308 	add.w	r3, r3, #8
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c76:	db8f      	blt.n	8000b98 <DoFFT+0x3c>


	//if (uartfree==1) HAL_UART_Transmit_DMA(&huart2, &outarray[0], 11);
	uartfree = 0;
	*/
	callback_state=0;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <DoFFT+0x13c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20010104 	.word	0x20010104
 8000c90:	200121a8 	.word	0x200121a8
 8000c94:	20000094 	.word	0x20000094
 8000c98:	20000090 	.word	0x20000090

08000c9c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	  int left=(rxBuf[0]<<16 | rxBuf[1]);
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	041b      	lsls	r3, r3, #16
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000cac:	8852      	ldrh	r2, [r2, #2]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
	  int right=(rxBuf[2]<<16 | rxBuf[3]);
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	041b      	lsls	r3, r3, #16
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000cba:	88d2      	ldrh	r2, [r2, #6]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
	  txBuf[0]=(left>>16)&0xFFFF;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	  txBuf[1]=left&0xFFFF;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000cd0:	805a      	strh	r2, [r3, #2]
	  txBuf[2]=(right>>16)&0xFFFF;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000cda:	809a      	strh	r2, [r3, #4]
	  txBuf[3]=right&0xFFFF;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000ce2:	80da      	strh	r2, [r3, #6]

	  callback_state = 1;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200080ac 	.word	0x200080ac
 8000cfc:	200000ac 	.word	0x200000ac
 8000d00:	20000090 	.word	0x20000090

08000d04 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	  int left=(rxBuf[4]<<16 | rxBuf[5]);
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_I2S_RxCpltCallback+0x5c>)
 8000d0e:	891b      	ldrh	r3, [r3, #8]
 8000d10:	041b      	lsls	r3, r3, #16
 8000d12:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_I2S_RxCpltCallback+0x5c>)
 8000d14:	8952      	ldrh	r2, [r2, #10]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	  int right=(rxBuf[6]<<16 | rxBuf[7]);
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_I2S_RxCpltCallback+0x5c>)
 8000d1c:	899b      	ldrh	r3, [r3, #12]
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_I2S_RxCpltCallback+0x5c>)
 8000d22:	89d2      	ldrh	r2, [r2, #14]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
	  txBuf[4]=(left>>16)&0xFFFF;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_I2S_RxCpltCallback+0x60>)
 8000d30:	811a      	strh	r2, [r3, #8]
	  txBuf[5]=left&0xFFFF;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_I2S_RxCpltCallback+0x60>)
 8000d38:	815a      	strh	r2, [r3, #10]
	  txBuf[6]=(right>>16)&0xFFFF;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_I2S_RxCpltCallback+0x60>)
 8000d42:	819a      	strh	r2, [r3, #12]
	  txBuf[7]=right&0xFFFF;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_I2S_RxCpltCallback+0x60>)
 8000d4a:	81da      	strh	r2, [r3, #14]

	  callback_state = 2;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_I2S_RxCpltCallback+0x64>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200080ac 	.word	0x200080ac
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	20000090 	.word	0x20000090

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a91      	ldr	r2, [pc, #580]	; (800102c <HAL_I2S_MspInit+0x264>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d17c      	bne.n	8000ee4 <HAL_I2S_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	4b90      	ldr	r3, [pc, #576]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a8f      	ldr	r2, [pc, #572]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b8d      	ldr	r3, [pc, #564]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	4b89      	ldr	r3, [pc, #548]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a88      	ldr	r2, [pc, #544]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b86      	ldr	r3, [pc, #536]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b82      	ldr	r3, [pc, #520]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a81      	ldr	r2, [pc, #516]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000e3e:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e50:	2305      	movs	r3, #5
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4876      	ldr	r0, [pc, #472]	; (8001034 <HAL_I2S_MspInit+0x26c>)
 8000e5c:	f000 feb4 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e60:	2310      	movs	r3, #16
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e70:	2305      	movs	r3, #5
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	486f      	ldr	r0, [pc, #444]	; (8001038 <HAL_I2S_MspInit+0x270>)
 8000e7c:	f000 fea4 	bl	8001bc8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000e80:	4b6e      	ldr	r3, [pc, #440]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000e82:	4a6f      	ldr	r2, [pc, #444]	; (8001040 <HAL_I2S_MspInit+0x278>)
 8000e84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000e86:	4b6d      	ldr	r3, [pc, #436]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000e88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b69      	ldr	r3, [pc, #420]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b68      	ldr	r3, [pc, #416]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eaa:	4b64      	ldr	r3, [pc, #400]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000eb2:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b60      	ldr	r3, [pc, #384]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ec6:	485d      	ldr	r0, [pc, #372]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000ec8:	f000 fb0e 	bl	80014e8 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8000ed2:	f7ff ff4b 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a58      	ldr	r2, [pc, #352]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000edc:	4a57      	ldr	r2, [pc, #348]	; (800103c <HAL_I2S_MspInit+0x274>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ee2:	e09e      	b.n	8001022 <HAL_I2S_MspInit+0x25a>
  else if(hi2s->Instance==SPI2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_I2S_MspInit+0x27c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 8099 	bne.w	8001022 <HAL_I2S_MspInit+0x25a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a38      	ldr	r2, [pc, #224]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_I2S_MspInit+0x268>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f60:	2302      	movs	r3, #2
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000f70:	2307      	movs	r3, #7
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <HAL_I2S_MspInit+0x270>)
 8000f7c:	f000 fe24 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000f90:	2306      	movs	r3, #6
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4826      	ldr	r0, [pc, #152]	; (8001034 <HAL_I2S_MspInit+0x26c>)
 8000f9c:	f000 fe14 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <HAL_I2S_MspInit+0x280>)
 8000fbe:	f000 fe03 	bl	8001bc8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_I2S_MspInit+0x288>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_I2S_MspInit+0x284>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_I2S_MspInit+0x284>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <HAL_I2S_MspInit+0x284>)
 8001008:	f000 fa6e 	bl	80014e8 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2S_MspInit+0x24e>
      Error_Handler();
 8001012:	f7ff feab 	bl	8000d6c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_I2S_MspInit+0x284>)
 800101a:	639a      	str	r2, [r3, #56]	; 0x38
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_I2S_MspInit+0x284>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	; 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020800 	.word	0x40020800
 800103c:	20012148 	.word	0x20012148
 8001040:	40026410 	.word	0x40026410
 8001044:	40003800 	.word	0x40003800
 8001048:	40020400 	.word	0x40020400
 800104c:	200141a8 	.word	0x200141a8
 8001050:	40026070 	.word	0x40026070

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_UART_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12b      	bne.n	80010ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_UART_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_UART_MspInit+0x88>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ae:	230c      	movs	r3, #12
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 80010ca:	f000 fd7d 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8a8 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Stream4_IRQHandler+0x10>)
 800113e:	f000 fad9 	bl	80016f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200141a8 	.word	0x200141a8

0800114c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA2_Stream0_IRQHandler+0x10>)
 8001152:	f000 facf 	bl	80016f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20012148 	.word	0x20012148

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SystemInit+0x28>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <SystemInit+0x28>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SystemInit+0x28>)
 8001176:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117a:	609a      	str	r2, [r3, #8]
#endif
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001192:	e003      	b.n	800119c <LoopCopyDataInit>

08001194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119a:	3104      	adds	r1, #4

0800119c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a4:	d3f6      	bcc.n	8001194 <CopyDataInit>
  ldr  r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a8:	e002      	b.n	80011b0 <LoopFillZerobss>

080011aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011ac:	f842 3b04 	str.w	r3, [r2], #4

080011b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b4:	d3f9      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b6:	f7ff ffd3 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f004 f821 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff f9fd 	bl	80005bc <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011c8:	08018a60 	.word	0x08018a60
  ldr  r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80011d4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80011d8:	20014254 	.word	0x20014254

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f92b 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fdb0 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f943 	bl	80014ce <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f90b 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20014250 	.word	0x20014250

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20014250 	.word	0x20014250

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff feda 	bl	80012ac <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e099      	b.n	8001638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2202      	movs	r2, #2
 8001510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	e00f      	b.n	8001546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001526:	f7ff fec1 	bl	80012ac <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b05      	cmp	r3, #5
 8001532:	d908      	bls.n	8001546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e078      	b.n	8001638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e8      	bne.n	8001526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_DMA_Init+0x158>)
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2b04      	cmp	r3, #4
 800159e:	d107      	bne.n	80015b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4313      	orrs	r3, r2
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d117      	bne.n	800160a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fa6f 	bl	8001ad0 <DMA_CheckFifoParam>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001606:	2301      	movs	r3, #1
 8001608:	e016      	b.n	8001638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fa26 	bl	8001a64 <DMA_CalcBaseAndBitshift>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	f010803f 	.word	0xf010803f

08001644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_DMA_Start_IT+0x26>
 8001666:	2302      	movs	r3, #2
 8001668:	e040      	b.n	80016ec <HAL_DMA_Start_IT+0xa8>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d12f      	bne.n	80016de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f9b8 	bl	8001a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	409a      	lsls	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0216 	orr.w	r2, r2, #22
 80016b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0208 	orr.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e005      	b.n	80016ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016e6:	2302      	movs	r3, #2
 80016e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001700:	4b92      	ldr	r3, [pc, #584]	; (800194c <HAL_DMA_IRQHandler+0x258>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a92      	ldr	r2, [pc, #584]	; (8001950 <HAL_DMA_IRQHandler+0x25c>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2208      	movs	r2, #8
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2208      	movs	r2, #8
 800174e:	409a      	lsls	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2204      	movs	r2, #4
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d012      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	2210      	movs	r2, #16
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d043      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03c      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2210      	movs	r2, #16
 80017f0:	409a      	lsls	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
 8001822:	e01f      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
 8001834:	e016      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0208 	bic.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2220      	movs	r2, #32
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 808e 	beq.w	8001992 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8086 	beq.w	8001992 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2220      	movs	r2, #32
 800188c:	409a      	lsls	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b05      	cmp	r3, #5
 800189c:	d136      	bne.n	800190c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_IRQHandler+0x1da>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	223f      	movs	r2, #63	; 0x3f
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07d      	beq.n	80019fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
        }
        return;
 800190a:	e078      	b.n	80019fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01c      	beq.n	8001954 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d108      	bne.n	800193a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	2b00      	cmp	r3, #0
 800192e:	d030      	beq.n	8001992 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e02b      	b.n	8001992 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d027      	beq.n	8001992 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
 800194a:	e022      	b.n	8001992 <HAL_DMA_IRQHandler+0x29e>
 800194c:	20000000 	.word	0x20000000
 8001950:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0210 	bic.w	r2, r2, #16
 8001970:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	2b00      	cmp	r3, #0
 8001998:	d032      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d022      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2205      	movs	r2, #5
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d307      	bcc.n	80019da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f2      	bne.n	80019be <HAL_DMA_IRQHandler+0x2ca>
 80019d8:	e000      	b.n	80019dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
 80019fc:	e000      	b.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019fe:	bf00      	nop
    }
  }
}
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop

08001a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b40      	cmp	r3, #64	; 0x40
 8001a34:	d108      	bne.n	8001a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a46:	e007      	b.n	8001a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b10      	subs	r3, #16
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <DMA_CalcBaseAndBitshift+0x68>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d909      	bls.n	8001aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	1d1a      	adds	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa4:	e007      	b.n	8001ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	aaaaaaab 	.word	0xaaaaaaab
 8001acc:	080055ec 	.word	0x080055ec

08001ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <DMA_CheckFifoParam+0x5a>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d856      	bhi.n	8001b9e <DMA_CheckFifoParam+0xce>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <DMA_CheckFifoParam+0x28>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b1b 	.word	0x08001b1b
 8001b00:	08001b09 	.word	0x08001b09
 8001b04:	08001b9f 	.word	0x08001b9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d046      	beq.n	8001ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b18:	e043      	b.n	8001ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b22:	d140      	bne.n	8001ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b28:	e03d      	b.n	8001ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b32:	d121      	bne.n	8001b78 <DMA_CheckFifoParam+0xa8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d837      	bhi.n	8001baa <DMA_CheckFifoParam+0xda>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <DMA_CheckFifoParam+0x70>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b57 	.word	0x08001b57
 8001b48:	08001b51 	.word	0x08001b51
 8001b4c:	08001b69 	.word	0x08001b69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      break;
 8001b54:	e030      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d025      	beq.n	8001bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b66:	e022      	b.n	8001bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b70:	d11f      	bne.n	8001bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b76:	e01c      	b.n	8001bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d903      	bls.n	8001b86 <DMA_CheckFifoParam+0xb6>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d003      	beq.n	8001b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b84:	e018      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
      break;
 8001b8a:	e015      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9c:	e00b      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001b9e:	bf00      	nop
 8001ba0:	e00a      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
 8001ba4:	e008      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba6:	bf00      	nop
 8001ba8:	e006      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001baa:	bf00      	nop
 8001bac:	e004      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e002      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e165      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8154 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80ae 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a5c      	ldr	r2, [pc, #368]	; (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_GPIO_Init+0x308>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_GPIO_Init+0x314>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <HAL_GPIO_Init+0x318>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x206>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <HAL_GPIO_Init+0x320>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x202>
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001de2:	2300      	movs	r3, #0
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df4:	4935      	ldr	r1, [pc, #212]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e26:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a11      	ldr	r2, [pc, #68]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	f67f ae96 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40013c00 	.word	0x40013c00

08001ef0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e1      	b.n	80020c6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <HAL_I2S_Init+0x1e0>)
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7fe ff53 	bl	8000dc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f38:	f023 030f 	bic.w	r3, r3, #15
 8001f3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2202      	movs	r2, #2
 8001f44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d06f      	beq.n	800202e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f56:	2310      	movs	r3, #16
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e001      	b.n	8001f60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d802      	bhi.n	8001f6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_I2S_Init+0x1e4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_I2S_Init+0x92>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_I2S_Init+0x1e8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d104      	bne.n	8001f8c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f001 f82e 	bl	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	e003      	b.n	8001f94 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f001 f829 	bl	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f92:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d125      	bne.n	8001fea <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e01f      	b.n	8002008 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	461a      	mov	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e00e      	b.n	8002008 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	3305      	adds	r3, #5
 8002006:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_I2S_Init+0x1ec>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	e003      	b.n	8002036 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800202e:	2302      	movs	r3, #2
 8002030:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d902      	bls.n	8002042 <HAL_I2S_Init+0x152>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d907      	bls.n	8002052 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e039      	b.n	80020c6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	430a      	orrs	r2, r1
 8002064:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002070:	f023 030f 	bic.w	r3, r3, #15
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6851      	ldr	r1, [r2, #4]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6892      	ldr	r2, [r2, #8]
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68d2      	ldr	r2, [r2, #12]
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6992      	ldr	r2, [r2, #24]
 8002088:	430a      	orrs	r2, r1
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002094:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b30      	cmp	r3, #48	; 0x30
 800209c:	d003      	beq.n	80020a6 <HAL_I2S_Init+0x1b6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2bb0      	cmp	r3, #176	; 0xb0
 80020a4:	d107      	bne.n	80020b6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020b4:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	080025a7 	.word	0x080025a7
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003c00 	.word	0x40003c00
 80020dc:	cccccccd 	.word	0xcccccccd

080020e0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_I2S_Transmit_DMA+0x1a>
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08e      	b.n	800221c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2S_Transmit_DMA+0x2e>
 800210a:	2302      	movs	r3, #2
 800210c:	e086      	b.n	800221c <HAL_I2S_Transmit_DMA+0x13c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	e076      	b.n	800221c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d002      	beq.n	800215a <HAL_I2S_Transmit_DMA+0x7a>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10a      	bne.n	8002170 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800216e:	e005      	b.n	800217c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_I2S_Transmit_DMA+0x144>)
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_I2S_Transmit_DMA+0x148>)
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <HAL_I2S_Transmit_DMA+0x14c>)
 8002192:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800219c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021a4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021ac:	f7ff fa4a 	bl	8001644 <HAL_DMA_Start_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00f      	beq.n	80021d6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0208 	orr.w	r2, r3, #8
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e022      	b.n	800221c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0202 	orr.w	r2, r2, #2
 8002210:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	08002427 	.word	0x08002427
 8002228:	080023e5 	.word	0x080023e5
 800222c:	080024a1 	.word	0x080024a1

08002230 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_I2S_Receive_DMA+0x1a>
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0a1      	b.n	8002392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_I2S_Receive_DMA+0x2e>
 800225a:	2302      	movs	r3, #2
 800225c:	e099      	b.n	8002392 <HAL_I2S_Receive_DMA+0x162>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	e089      	b.n	8002392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2204      	movs	r2, #4
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d002      	beq.n	80022aa <HAL_I2S_Receive_DMA+0x7a>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10a      	bne.n	80022c0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	865a      	strh	r2, [r3, #50]	; 0x32
 80022be:	e005      	b.n	80022cc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	4a32      	ldr	r2, [pc, #200]	; (800239c <HAL_I2S_Receive_DMA+0x16c>)
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <HAL_I2S_Receive_DMA+0x170>)
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_I2S_Receive_DMA+0x174>)
 80022e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022f2:	d10a      	bne.n	800230a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	4619      	mov	r1, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002320:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002322:	f7ff f98f 	bl	8001644 <HAL_DMA_Start_IT>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00f      	beq.n	800234c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f043 0208 	orr.w	r2, r3, #8
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e022      	b.n	8002392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002368:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	08002485 	.word	0x08002485
 80023a0:	08002443 	.word	0x08002443
 80023a4:	080024a1 	.word	0x080024a1

080023a8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff ffcf 	bl	80023bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ffb7 	bl	80023a8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10e      	bne.n	8002476 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7fe fc44 	bl	8000d04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7fe fc02 	bl	8000c9c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0203 	bic.w	r2, r2, #3
 80024bc:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f043 0208 	orr.w	r2, r3, #8
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff ff76 	bl	80023d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c9a      	adds	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff3e 	bl	80023bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	b292      	uxth	r2, r2
 800255c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	1c9a      	adds	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10e      	bne.n	800259e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800258e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe fbb3 	bl	8000d04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d13a      	bne.n	8002638 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d109      	bne.n	80025e0 <I2S_IRQHandler+0x3a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d102      	bne.n	80025e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffb4 	bl	8002548 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d126      	bne.n	8002638 <I2S_IRQHandler+0x92>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d11f      	bne.n	8002638 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002606:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fecc 	bl	80023d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d136      	bne.n	80026b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d109      	bne.n	8002662 <I2S_IRQHandler+0xbc>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d102      	bne.n	8002662 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff45 	bl	80024ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d122      	bne.n	80026b2 <I2S_IRQHandler+0x10c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d11b      	bne.n	80026b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002688:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f043 0204 	orr.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fe8f 	bl	80023d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_PWREx_EnableOverDrive+0x90>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_PWREx_EnableOverDrive+0x90>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_PWREx_EnableOverDrive+0x90>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_PWREx_EnableOverDrive+0x94>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7fe fde0 	bl	80012ac <HAL_GetTick>
 80026ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026ee:	e009      	b.n	8002704 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026f0:	f7fe fddc 	bl	80012ac <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026fe:	d901      	bls.n	8002704 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e01f      	b.n	8002744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_PWREx_EnableOverDrive+0x98>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002710:	d1ee      	bne.n	80026f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002718:	f7fe fdc8 	bl	80012ac <HAL_GetTick>
 800271c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800271e:	e009      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002720:	f7fe fdc4 	bl	80012ac <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272e:	d901      	bls.n	8002734 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e007      	b.n	8002744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_PWREx_EnableOverDrive+0x98>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002740:	d1ee      	bne.n	8002720 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	420e0040 	.word	0x420e0040
 8002754:	40007000 	.word	0x40007000
 8002758:	420e0044 	.word	0x420e0044

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0cc      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d90c      	bls.n	8002798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0b8      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b0:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	494d      	ldr	r1, [pc, #308]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d044      	beq.n	800287c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d119      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	2b03      	cmp	r3, #3
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e067      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4934      	ldr	r1, [pc, #208]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe fd2e 	bl	80012ac <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe fd2a 	bl	80012ac <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e04f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d20c      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e032      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e2:	f000 fdc7 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	490a      	ldr	r1, [pc, #40]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fc8e 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00
 8002918:	40023800 	.word	0x40023800
 800291c:	080055d4 	.word	0x080055d4
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	080055e4 	.word	0x080055e4

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffdc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0b5b      	lsrs	r3, r3, #13
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	080055e4 	.word	0x080055e4

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80029c8:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	496c      	ldr	r1, [pc, #432]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80029e6:	2301      	movs	r3, #1
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80029f6:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	4960      	ldr	r1, [pc, #384]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002a14:	2301      	movs	r3, #1
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4955      	ldr	r1, [pc, #340]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a42:	d101      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002a44:	2301      	movs	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d017      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	4946      	ldr	r1, [pc, #280]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002a80:	2301      	movs	r3, #1
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 808a 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe fbf1 	bl	80012ac <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fbed 	bl	80012ac <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e278      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d028      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d114      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe fbbb 	bl	80012ac <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fbb7 	bl	80012ac <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e240      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ee      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b68:	d114      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7e:	4902      	ldr	r1, [pc, #8]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470e40 	.word	0x42470e40
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	4944      	ldr	r1, [pc, #272]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002bc6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bf6:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c04:	492e      	ldr	r1, [pc, #184]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	4926      	ldr	r1, [pc, #152]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c36:	d101      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	491a      	ldr	r1, [pc, #104]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	4911      	ldr	r1, [pc, #68]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c88:	d101      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9c:	f040 80ff 	bne.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fb01 	bl	80012ac <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cac:	e00e      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cae:	f7fe fafd 	bl	80012ac <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d907      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e188      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	424711e0 	.word	0x424711e0
 8002cc8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ea      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d028      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d124      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d18:	0e1b      	lsrs	r3, r3, #24
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	3b01      	subs	r3, #1
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	4961      	ldr	r1, [pc, #388]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d035      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d74:	d130      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d76:	4b54      	ldr	r3, [pc, #336]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	0f1b      	lsrs	r3, r3, #28
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	019b      	lsls	r3, r3, #6
 8002da0:	431a      	orrs	r2, r3
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	071b      	lsls	r3, r3, #28
 8002db8:	4943      	ldr	r1, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	f023 021f 	bic.w	r2, r3, #31
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	493d      	ldr	r1, [pc, #244]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d029      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d124      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	0f1b      	lsrs	r3, r3, #28
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	071b      	lsls	r3, r3, #28
 8002e30:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	019b      	lsls	r3, r3, #6
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	4917      	ldr	r1, [pc, #92]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fa18 	bl	80012ac <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e80:	f7fe fa14 	bl	80012ac <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e09f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 8095 	bne.w	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eac:	f7fe f9fe 	bl	80012ac <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002eb4:	f7fe f9fa 	bl	80012ac <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d908      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e085      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470068 	.word	0x42470068
 8002ed0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed4:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee0:	d0e8      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02b      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d127      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002f0a:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	431a      	orrs	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	4928      	ldr	r1, [pc, #160]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4922      	ldr	r1, [pc, #136]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01d      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6e:	d118      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	0e1b      	lsrs	r3, r3, #24
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	019b      	lsls	r3, r3, #6
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	3b01      	subs	r3, #1
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	4910      	ldr	r1, [pc, #64]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe f980 	bl	80012ac <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fb0:	f7fe f97c 	bl	80012ac <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e007      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fce:	d1ef      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3730      	adds	r7, #48	; 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	42470070 	.word	0x42470070

08002fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	2b07      	cmp	r3, #7
 800300a:	f200 8224 	bhi.w	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003217 	.word	0x08003217
 8003018:	08003341 	.word	0x08003341
 800301c:	08003457 	.word	0x08003457
 8003020:	08003035 	.word	0x08003035
 8003024:	08003457 	.word	0x08003457
 8003028:	08003457 	.word	0x08003457
 800302c:	08003457 	.word	0x08003457
 8003030:	08003035 	.word	0x08003035
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003034:	4ba8      	ldr	r3, [pc, #672]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800304a:	f000 80d6 	beq.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003054:	f200 80dd 	bhi.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800305e:	f000 809f 	beq.w	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003068:	f200 80d3 	bhi.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003072:	d05b      	beq.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	f200 80ca 	bhi.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003084:	f000 80b6 	beq.w	80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308e:	f200 80c0 	bhi.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	f000 8082 	beq.w	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a2:	f200 80b6 	bhi.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d03b      	beq.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80030b4:	e0ad      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	4a83      	ldr	r2, [pc, #524]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e008      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80030d6:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e0:	4a7f      	ldr	r2, [pc, #508]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80030e8:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	0e1b      	lsrs	r3, r3, #24
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80030f6:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	fb02 f203 	mul.w	r2, r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003110:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	61fb      	str	r3, [r7, #28]
          break;
 800312a:	e073      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003138:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003142:	4a66      	ldr	r2, [pc, #408]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e008      	b.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800314c:	4b62      	ldr	r3, [pc, #392]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003156:	4a62      	ldr	r2, [pc, #392]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800315e:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	0e1b      	lsrs	r3, r3, #24
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800316c:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	fb02 f203 	mul.w	r2, r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]
          break;
 800319e:	e039      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80031a0:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80031ac:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e007      	b.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80031be:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c6:	4a46      	ldr	r2, [pc, #280]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0f1b      	lsrs	r3, r3, #28
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	fb02 f203 	mul.w	r2, r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	61fb      	str	r3, [r7, #28]
          break;
 80031f2:	e00f      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80031f6:	61fb      	str	r3, [r7, #28]
          break;
 80031f8:	e00c      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003208:	61fb      	str	r3, [r7, #28]
          break;
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800320e:	61fb      	str	r3, [r7, #28]
          break;
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003212:	bf00      	nop
        }
      }
      break;
 8003214:	e11f      	b.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003228:	d079      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003230:	f200 8082 	bhi.w	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323a:	d03c      	beq.n	80032b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003242:	d879      	bhi.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003250:	d172      	bne.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003254:	61fb      	str	r3, [r7, #28]
          break;
 8003256:	e072      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003264:	d109      	bne.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	e008      	b.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a6:	0f1b      	lsrs	r3, r3, #28
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	61fb      	str	r3, [r7, #28]
          break;
 80032b4:	e043      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d111      	bne.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	e010      	b.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	017d7840 	.word	0x017d7840
 80032e4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032e8:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80032f8:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800330a:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0f1b      	lsrs	r3, r3, #28
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	61fb      	str	r3, [r7, #28]
          break;
 800331c:	e00f      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332a:	d102      	bne.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800332e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003330:	e005      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003332:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003334:	61fb      	str	r3, [r7, #28]
          break;
 8003336:	e002      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
          break;
 800333c:	bf00      	nop
        }
      }
      break;
 800333e:	e08a      	b.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003346:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003352:	d06f      	beq.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800335a:	d878      	bhi.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003362:	d03c      	beq.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336a:	d870      	bhi.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003378:	d169      	bne.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800337c:	61fb      	str	r3, [r7, #28]
          break;
 800337e:	e069      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80033b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ce:	0f1b      	lsrs	r3, r3, #28
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	61fb      	str	r3, [r7, #28]
          break;
 80033dc:	e03a      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d108      	bne.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e007      	b.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0f1b      	lsrs	r3, r3, #28
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	61fb      	str	r3, [r7, #28]
          break;
 8003432:	e00f      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003440:	d102      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003444:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003446:	e005      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800344a:	61fb      	str	r3, [r7, #28]
          break;
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
          break;
 8003452:	bf00      	nop
        }
      }
      break;
 8003454:	bf00      	nop
    }
  }
  return frequency;
 8003456:	69fb      	ldr	r3, [r7, #28]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3724      	adds	r7, #36	; 0x24
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400
 800346c:	017d7840 	.word	0x017d7840
 8003470:	00bb8000 	.word	0x00bb8000

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2600      	movs	r6, #0
 800347e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003480:	2600      	movs	r6, #0
 8003482:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003484:	2600      	movs	r6, #0
 8003486:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003488:	2600      	movs	r6, #0
 800348a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800348c:	2600      	movs	r6, #0
 800348e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4ea3      	ldr	r6, [pc, #652]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003492:	68b6      	ldr	r6, [r6, #8]
 8003494:	f006 060c 	and.w	r6, r6, #12
 8003498:	2e0c      	cmp	r6, #12
 800349a:	f200 8137 	bhi.w	800370c <HAL_RCC_GetSysClockFreq+0x298>
 800349e:	f20f 0c08 	addw	ip, pc, #8
 80034a2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	0800370d 	.word	0x0800370d
 80034b0:	0800370d 	.word	0x0800370d
 80034b4:	0800370d 	.word	0x0800370d
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	0800370d 	.word	0x0800370d
 80034c0:	0800370d 	.word	0x0800370d
 80034c4:	0800370d 	.word	0x0800370d
 80034c8:	080034e9 	.word	0x080034e9
 80034cc:	0800370d 	.word	0x0800370d
 80034d0:	0800370d 	.word	0x0800370d
 80034d4:	0800370d 	.word	0x0800370d
 80034d8:	080035ff 	.word	0x080035ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80034de:	613b      	str	r3, [r7, #16]
       break;
 80034e0:	e117      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e2:	4b91      	ldr	r3, [pc, #580]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80034e4:	613b      	str	r3, [r7, #16]
      break;
 80034e6:	e114      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	461a      	mov	r2, r3
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800350e:	f04f 0500 	mov.w	r5, #0
 8003512:	ea02 0004 	and.w	r0, r2, r4
 8003516:	ea03 0105 	and.w	r1, r3, r5
 800351a:	4b83      	ldr	r3, [pc, #524]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800351c:	fb03 f201 	mul.w	r2, r3, r1
 8003520:	2300      	movs	r3, #0
 8003522:	fb03 f300 	mul.w	r3, r3, r0
 8003526:	4413      	add	r3, r2
 8003528:	4a7f      	ldr	r2, [pc, #508]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800352a:	fba0 0102 	umull	r0, r1, r0, r2
 800352e:	440b      	add	r3, r1
 8003530:	4619      	mov	r1, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f7fc fec3 	bl	80002c4 <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4613      	mov	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e04c      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4b75      	ldr	r3, [pc, #468]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	461a      	mov	r2, r3
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	ea02 0800 	and.w	r8, r2, r0
 8003560:	ea03 0901 	and.w	r9, r3, r1
 8003564:	4640      	mov	r0, r8
 8003566:	4649      	mov	r1, r9
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	014b      	lsls	r3, r1, #5
 8003572:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003576:	0142      	lsls	r2, r0, #5
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	ebb0 0008 	subs.w	r0, r0, r8
 8003580:	eb61 0109 	sbc.w	r1, r1, r9
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	018b      	lsls	r3, r1, #6
 800358e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003592:	0182      	lsls	r2, r0, #6
 8003594:	1a12      	subs	r2, r2, r0
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a8:	00d0      	lsls	r0, r2, #3
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	eb12 0208 	adds.w	r2, r2, r8
 80035b2:	eb43 0309 	adc.w	r3, r3, r9
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0299      	lsls	r1, r3, #10
 80035c0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035c4:	0290      	lsls	r0, r2, #10
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f7fc fe75 	bl	80002c4 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4613      	mov	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e2:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	3301      	adds	r3, #1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	613b      	str	r3, [r7, #16]
      break;
 80035fc:	e089      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fe:	4948      	ldr	r1, [pc, #288]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003600:	6849      	ldr	r1, [r1, #4]
 8003602:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003606:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003608:	4945      	ldr	r1, [pc, #276]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800360a:	6849      	ldr	r1, [r1, #4]
 800360c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003610:	2900      	cmp	r1, #0
 8003612:	d024      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	4942      	ldr	r1, [pc, #264]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003616:	6849      	ldr	r1, [r1, #4]
 8003618:	0989      	lsrs	r1, r1, #6
 800361a:	4608      	mov	r0, r1
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003624:	f04f 0500 	mov.w	r5, #0
 8003628:	ea00 0204 	and.w	r2, r0, r4
 800362c:	ea01 0305 	and.w	r3, r1, r5
 8003630:	493d      	ldr	r1, [pc, #244]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003632:	fb01 f003 	mul.w	r0, r1, r3
 8003636:	2100      	movs	r1, #0
 8003638:	fb01 f102 	mul.w	r1, r1, r2
 800363c:	1844      	adds	r4, r0, r1
 800363e:	493a      	ldr	r1, [pc, #232]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003640:	fba2 0101 	umull	r0, r1, r2, r1
 8003644:	1863      	adds	r3, r4, r1
 8003646:	4619      	mov	r1, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	461a      	mov	r2, r3
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	f7fc fe38 	bl	80002c4 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4613      	mov	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	e04a      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	ea02 0400 	and.w	r4, r2, r0
 8003676:	ea03 0501 	and.w	r5, r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	014b      	lsls	r3, r1, #5
 8003688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800368c:	0142      	lsls	r2, r0, #5
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	1b00      	subs	r0, r0, r4
 8003694:	eb61 0105 	sbc.w	r1, r1, r5
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	018b      	lsls	r3, r1, #6
 80036a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036a6:	0182      	lsls	r2, r0, #6
 80036a8:	1a12      	subs	r2, r2, r0
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	f04f 0000 	mov.w	r0, #0
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	00d9      	lsls	r1, r3, #3
 80036b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036bc:	00d0      	lsls	r0, r2, #3
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	1912      	adds	r2, r2, r4
 80036c4:	eb45 0303 	adc.w	r3, r5, r3
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0299      	lsls	r1, r3, #10
 80036d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036d6:	0290      	lsls	r0, r2, #10
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f7fc fdec 	bl	80002c4 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	0f1b      	lsrs	r3, r3, #28
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	613b      	str	r3, [r7, #16]
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800370e:	613b      	str	r3, [r7, #16]
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	693b      	ldr	r3, [r7, #16]
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	00f42400 	.word	0x00f42400
 8003728:	017d7840 	.word	0x017d7840

0800372c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e28d      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8083 	beq.w	8003852 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800374c:	4b94      	ldr	r3, [pc, #592]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d019      	beq.n	800378c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003758:	4b91      	ldr	r3, [pc, #580]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003760:	2b08      	cmp	r3, #8
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003764:	4b8e      	ldr	r3, [pc, #568]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b8b      	ldr	r3, [pc, #556]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377e:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05b      	beq.n	8003850 <HAL_RCC_OscConfig+0x124>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d157      	bne.n	8003850 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e25a      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x90>
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7b      	ldr	r2, [pc, #492]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xcc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xb4>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xcc>
 80037e0:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fd54 	bl	80012ac <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fd fd50 	bl	80012ac <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e21f      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xdc>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fd40 	bl	80012ac <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003830:	f7fd fd3c 	bl	80012ac <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e20b      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x104>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d06f      	beq.n	800393e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800385e:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800386a:	4b4d      	ldr	r3, [pc, #308]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x186>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1d3      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x278>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fd fce9 	bl	80012ac <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7fd fce5 	bl	80012ac <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1b4      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4925      	ldr	r1, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_OscConfig+0x278>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fd fcc8 	bl	80012ac <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003920:	f7fd fcc4 	bl	80012ac <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e193      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x27c>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd fca8 	bl	80012ac <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7fd fca4 	bl	80012ac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e173      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x234>
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x27c>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fd fc91 	bl	80012ac <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7fd fc8d 	bl	80012ac <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e15c      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b8a      	ldr	r3, [pc, #552]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b83      	ldr	r3, [pc, #524]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b7c      	ldr	r3, [pc, #496]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b79      	ldr	r3, [pc, #484]	; (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fd fc4d 	bl	80012ac <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fd fc49 	bl	80012ac <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e118      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x31e>
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a65      	ldr	r2, [pc, #404]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x358>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x340>
 8003a52:	4b61      	ldr	r3, [pc, #388]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a60      	ldr	r2, [pc, #384]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b5e      	ldr	r3, [pc, #376]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x358>
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b57      	ldr	r3, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a56      	ldr	r2, [pc, #344]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fc0e 	bl	80012ac <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fd fc0a 	bl	80012ac <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0d7      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCC_OscConfig+0x368>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fbf8 	bl	80012ac <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fbf4 	bl	80012ac <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0c1      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a3a      	ldr	r2, [pc, #232]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80ad 	beq.w	8003c58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d060      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d145      	bne.n	8003b9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fd fbc8 	bl	80012ac <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd fbc4 	bl	80012ac <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e093      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	491b      	ldr	r1, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd fb99 	bl	80012ac <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd fb95 	bl	80012ac <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e064      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x452>
 8003b9c:	e05c      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fb82 	bl	80012ac <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fb7e 	bl	80012ac <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e04d      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x480>
 8003bca:	e045      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e040      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x538>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d030      	beq.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d129      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d122      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d119      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e03f      	b.n	8003cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f9e0 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f905 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d17c      	bne.n	8003e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_Transmit+0x2c>
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e075      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Transmit+0x3e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e06e      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2221      	movs	r2, #33	; 0x21
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d56:	f7fd faa9 	bl	80012ac <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d108      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e003      	b.n	8003d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d94:	e02a      	b.n	8003dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f840 	bl	8003e26 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e036      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e007      	b.n	8003dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cf      	bne.n	8003d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2140      	movs	r1, #64	; 0x40
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f810 	bl	8003e26 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e36:	e02c      	b.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d028      	beq.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e46:	f7fd fa31 	bl	80012ac <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d21d      	bcs.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e00f      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2301      	moveq	r3, #1
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d0c3      	beq.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	b09f      	sub	sp, #124	; 0x7c
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	68d9      	ldr	r1, [r3, #12]
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	ea40 0301 	orr.w	r3, r0, r1
 8003edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f00:	f021 010c 	bic.w	r1, r1, #12
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	6999      	ldr	r1, [r3, #24]
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	ea40 0301 	orr.w	r3, r0, r1
 8003f24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4bc5      	ldr	r3, [pc, #788]	; (8004240 <UART_SetConfig+0x384>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d004      	beq.n	8003f3a <UART_SetConfig+0x7e>
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4bc3      	ldr	r3, [pc, #780]	; (8004244 <UART_SetConfig+0x388>)
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d103      	bne.n	8003f42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f3a:	f7fe fd15 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003f3e:	6778      	str	r0, [r7, #116]	; 0x74
 8003f40:	e002      	b.n	8003f48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f42:	f7fe fcfd 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003f46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f50:	f040 80b6 	bne.w	80040c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f56:	461c      	mov	r4, r3
 8003f58:	f04f 0500 	mov.w	r5, #0
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	462b      	mov	r3, r5
 8003f60:	1891      	adds	r1, r2, r2
 8003f62:	6439      	str	r1, [r7, #64]	; 0x40
 8003f64:	415b      	adcs	r3, r3
 8003f66:	647b      	str	r3, [r7, #68]	; 0x44
 8003f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f6c:	1912      	adds	r2, r2, r4
 8003f6e:	eb45 0303 	adc.w	r3, r5, r3
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	00d9      	lsls	r1, r3, #3
 8003f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f80:	00d0      	lsls	r0, r2, #3
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	1911      	adds	r1, r2, r4
 8003f88:	6639      	str	r1, [r7, #96]	; 0x60
 8003f8a:	416b      	adcs	r3, r5
 8003f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fa8:	f7fc f98c 	bl	80002c4 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <UART_SetConfig+0x38c>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011e      	lsls	r6, r3, #4
 8003fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	f04f 0500 	mov.w	r5, #0
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	1891      	adds	r1, r2, r2
 8003fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fca:	415b      	adcs	r3, r3
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fd2:	1912      	adds	r2, r2, r4
 8003fd4:	eb45 0303 	adc.w	r3, r5, r3
 8003fd8:	f04f 0000 	mov.w	r0, #0
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	00d9      	lsls	r1, r3, #3
 8003fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe6:	00d0      	lsls	r0, r2, #3
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	1911      	adds	r1, r2, r4
 8003fee:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ff0:	416b      	adcs	r3, r5
 8003ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	1891      	adds	r1, r2, r2
 8004000:	62b9      	str	r1, [r7, #40]	; 0x28
 8004002:	415b      	adcs	r3, r3
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800400a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800400e:	f7fc f959 	bl	80002c4 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4b8c      	ldr	r3, [pc, #560]	; (8004248 <UART_SetConfig+0x38c>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	4a87      	ldr	r2, [pc, #540]	; (8004248 <UART_SetConfig+0x38c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004038:	441e      	add	r6, r3
 800403a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403c:	4618      	mov	r0, r3
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	1894      	adds	r4, r2, r2
 8004048:	623c      	str	r4, [r7, #32]
 800404a:	415b      	adcs	r3, r3
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004052:	1812      	adds	r2, r2, r0
 8004054:	eb41 0303 	adc.w	r3, r1, r3
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	f04f 0500 	mov.w	r5, #0
 8004060:	00dd      	lsls	r5, r3, #3
 8004062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004066:	00d4      	lsls	r4, r2, #3
 8004068:	4622      	mov	r2, r4
 800406a:	462b      	mov	r3, r5
 800406c:	1814      	adds	r4, r2, r0
 800406e:	653c      	str	r4, [r7, #80]	; 0x50
 8004070:	414b      	adcs	r3, r1
 8004072:	657b      	str	r3, [r7, #84]	; 0x54
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	461a      	mov	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	1891      	adds	r1, r2, r2
 8004080:	61b9      	str	r1, [r7, #24]
 8004082:	415b      	adcs	r3, r3
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800408e:	f7fc f919 	bl	80002c4 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4b6c      	ldr	r3, [pc, #432]	; (8004248 <UART_SetConfig+0x38c>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	; 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <UART_SetConfig+0x38c>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 0207 	and.w	r2, r3, #7
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4432      	add	r2, r6
 80040bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040be:	e0b9      	b.n	8004234 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c2:	461c      	mov	r4, r3
 80040c4:	f04f 0500 	mov.w	r5, #0
 80040c8:	4622      	mov	r2, r4
 80040ca:	462b      	mov	r3, r5
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	6139      	str	r1, [r7, #16]
 80040d0:	415b      	adcs	r3, r3
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040d8:	1912      	adds	r2, r2, r4
 80040da:	eb45 0303 	adc.w	r3, r5, r3
 80040de:	f04f 0000 	mov.w	r0, #0
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	00d9      	lsls	r1, r3, #3
 80040e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ec:	00d0      	lsls	r0, r2, #3
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	eb12 0804 	adds.w	r8, r2, r4
 80040f6:	eb43 0905 	adc.w	r9, r3, r5
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	008b      	lsls	r3, r1, #2
 800410e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004112:	0082      	lsls	r2, r0, #2
 8004114:	4640      	mov	r0, r8
 8004116:	4649      	mov	r1, r9
 8004118:	f7fc f8d4 	bl	80002c4 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4b49      	ldr	r3, [pc, #292]	; (8004248 <UART_SetConfig+0x38c>)
 8004122:	fba3 2302 	umull	r2, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	011e      	lsls	r6, r3, #4
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	4618      	mov	r0, r3
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	1894      	adds	r4, r2, r2
 8004138:	60bc      	str	r4, [r7, #8]
 800413a:	415b      	adcs	r3, r3
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004142:	1812      	adds	r2, r2, r0
 8004144:	eb41 0303 	adc.w	r3, r1, r3
 8004148:	f04f 0400 	mov.w	r4, #0
 800414c:	f04f 0500 	mov.w	r5, #0
 8004150:	00dd      	lsls	r5, r3, #3
 8004152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004156:	00d4      	lsls	r4, r2, #3
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	1814      	adds	r4, r2, r0
 800415e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004160:	414b      	adcs	r3, r1
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	008b      	lsls	r3, r1, #2
 8004178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800417c:	0082      	lsls	r2, r0, #2
 800417e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004182:	f7fc f89f 	bl	80002c4 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <UART_SetConfig+0x38c>)
 800418c:	fba3 1302 	umull	r1, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	2164      	movs	r1, #100	; 0x64
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	3332      	adds	r3, #50	; 0x32
 800419e:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <UART_SetConfig+0x38c>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	441e      	add	r6, r3
 80041ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ae:	4618      	mov	r0, r3
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	1894      	adds	r4, r2, r2
 80041ba:	603c      	str	r4, [r7, #0]
 80041bc:	415b      	adcs	r3, r3
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c4:	1812      	adds	r2, r2, r0
 80041c6:	eb41 0303 	adc.w	r3, r1, r3
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	f04f 0500 	mov.w	r5, #0
 80041d2:	00dd      	lsls	r5, r3, #3
 80041d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d8:	00d4      	lsls	r4, r2, #3
 80041da:	4622      	mov	r2, r4
 80041dc:	462b      	mov	r3, r5
 80041de:	eb12 0a00 	adds.w	sl, r2, r0
 80041e2:	eb43 0b01 	adc.w	fp, r3, r1
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fe:	0082      	lsls	r2, r0, #2
 8004200:	4650      	mov	r0, sl
 8004202:	4659      	mov	r1, fp
 8004204:	f7fc f85e 	bl	80002c4 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <UART_SetConfig+0x38c>)
 800420e:	fba3 1302 	umull	r1, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2164      	movs	r1, #100	; 0x64
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <UART_SetConfig+0x38c>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4432      	add	r2, r6
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	377c      	adds	r7, #124	; 0x7c
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423e:	bf00      	nop
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <arm_rfft_fast_init_f32>:
 800424c:	084b      	lsrs	r3, r1, #1
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	b410      	push	{r4}
 8004252:	8201      	strh	r1, [r0, #16]
 8004254:	8003      	strh	r3, [r0, #0]
 8004256:	d047      	beq.n	80042e8 <arm_rfft_fast_init_f32+0x9c>
 8004258:	d917      	bls.n	800428a <arm_rfft_fast_init_f32+0x3e>
 800425a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425e:	d03d      	beq.n	80042dc <arm_rfft_fast_init_f32+0x90>
 8004260:	d929      	bls.n	80042b6 <arm_rfft_fast_init_f32+0x6a>
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d020      	beq.n	80042aa <arm_rfft_fast_init_f32+0x5e>
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d113      	bne.n	8004296 <arm_rfft_fast_init_f32+0x4a>
 800426e:	4921      	ldr	r1, [pc, #132]	; (80042f4 <arm_rfft_fast_init_f32+0xa8>)
 8004270:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <arm_rfft_fast_init_f32+0xac>)
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <arm_rfft_fast_init_f32+0xb0>)
 8004274:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004278:	8184      	strh	r4, [r0, #12]
 800427a:	6081      	str	r1, [r0, #8]
 800427c:	6042      	str	r2, [r0, #4]
 800427e:	6143      	str	r3, [r0, #20]
 8004280:	2000      	movs	r0, #0
 8004282:	b240      	sxtb	r0, r0
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	2b20      	cmp	r3, #32
 800428c:	d01c      	beq.n	80042c8 <arm_rfft_fast_init_f32+0x7c>
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d006      	beq.n	80042a0 <arm_rfft_fast_init_f32+0x54>
 8004292:	2b10      	cmp	r3, #16
 8004294:	d01d      	beq.n	80042d2 <arm_rfft_fast_init_f32+0x86>
 8004296:	20ff      	movs	r0, #255	; 0xff
 8004298:	b240      	sxtb	r0, r0
 800429a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2438      	movs	r4, #56	; 0x38
 80042a2:	4917      	ldr	r1, [pc, #92]	; (8004300 <arm_rfft_fast_init_f32+0xb4>)
 80042a4:	4a17      	ldr	r2, [pc, #92]	; (8004304 <arm_rfft_fast_init_f32+0xb8>)
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <arm_rfft_fast_init_f32+0xbc>)
 80042a8:	e7e6      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042aa:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80042ae:	4917      	ldr	r1, [pc, #92]	; (800430c <arm_rfft_fast_init_f32+0xc0>)
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <arm_rfft_fast_init_f32+0xc4>)
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <arm_rfft_fast_init_f32+0xc8>)
 80042b4:	e7e0      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ba:	d1ec      	bne.n	8004296 <arm_rfft_fast_init_f32+0x4a>
 80042bc:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80042c0:	4915      	ldr	r1, [pc, #84]	; (8004318 <arm_rfft_fast_init_f32+0xcc>)
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <arm_rfft_fast_init_f32+0xd0>)
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <arm_rfft_fast_init_f32+0xd4>)
 80042c6:	e7d7      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042c8:	2430      	movs	r4, #48	; 0x30
 80042ca:	4916      	ldr	r1, [pc, #88]	; (8004324 <arm_rfft_fast_init_f32+0xd8>)
 80042cc:	4a16      	ldr	r2, [pc, #88]	; (8004328 <arm_rfft_fast_init_f32+0xdc>)
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <arm_rfft_fast_init_f32+0xe0>)
 80042d0:	e7d2      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042d2:	2414      	movs	r4, #20
 80042d4:	4916      	ldr	r1, [pc, #88]	; (8004330 <arm_rfft_fast_init_f32+0xe4>)
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <arm_rfft_fast_init_f32+0xe8>)
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <arm_rfft_fast_init_f32+0xec>)
 80042da:	e7cd      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042dc:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80042e0:	4916      	ldr	r1, [pc, #88]	; (800433c <arm_rfft_fast_init_f32+0xf0>)
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <arm_rfft_fast_init_f32+0xf4>)
 80042e4:	4b17      	ldr	r3, [pc, #92]	; (8004344 <arm_rfft_fast_init_f32+0xf8>)
 80042e6:	e7c7      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042e8:	24d0      	movs	r4, #208	; 0xd0
 80042ea:	4917      	ldr	r1, [pc, #92]	; (8004348 <arm_rfft_fast_init_f32+0xfc>)
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <arm_rfft_fast_init_f32+0x100>)
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <arm_rfft_fast_init_f32+0x104>)
 80042f0:	e7c2      	b.n	8004278 <arm_rfft_fast_init_f32+0x2c>
 80042f2:	bf00      	nop
 80042f4:	080143fc 	.word	0x080143fc
 80042f8:	080055f4 	.word	0x080055f4
 80042fc:	0800b764 	.word	0x0800b764
 8004300:	080096f4 	.word	0x080096f4
 8004304:	080161bc 	.word	0x080161bc
 8004308:	080186ac 	.word	0x080186ac
 800430c:	080120e4 	.word	0x080120e4
 8004310:	0800ffe4 	.word	0x0800ffe4
 8004314:	08009764 	.word	0x08009764
 8004318:	0801833c 	.word	0x0801833c
 800431c:	0800f764 	.word	0x0800f764
 8004320:	080163bc 	.word	0x080163bc
 8004324:	08012f9c 	.word	0x08012f9c
 8004328:	08011fe4 	.word	0x08011fe4
 800432c:	080095f4 	.word	0x080095f4
 8004330:	08012ef4 	.word	0x08012ef4
 8004334:	0800ff64 	.word	0x0800ff64
 8004338:	08012f1c 	.word	0x08012f1c
 800433c:	08016bbc 	.word	0x08016bbc
 8004340:	080133fc 	.word	0x080133fc
 8004344:	08016f3c 	.word	0x08016f3c
 8004348:	080188ac 	.word	0x080188ac
 800434c:	08012ffc 	.word	0x08012ffc
 8004350:	08017f3c 	.word	0x08017f3c

08004354 <arm_rfft_fast_f32>:
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	8a06      	ldrh	r6, [r0, #16]
 800435a:	0876      	lsrs	r6, r6, #1
 800435c:	4607      	mov	r7, r0
 800435e:	4615      	mov	r5, r2
 8004360:	8006      	strh	r6, [r0, #0]
 8004362:	460c      	mov	r4, r1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d15c      	bne.n	8004422 <arm_rfft_fast_f32+0xce>
 8004368:	461a      	mov	r2, r3
 800436a:	2301      	movs	r3, #1
 800436c:	f000 fbe6 	bl	8004b3c <arm_cfft_f32>
 8004370:	edd4 7a00 	vldr	s15, [r4]
 8004374:	ed94 7a01 	vldr	s14, [r4, #4]
 8004378:	883e      	ldrh	r6, [r7, #0]
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004380:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004384:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004388:	ee77 6a87 	vadd.f32	s13, s15, s14
 800438c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004390:	3e01      	subs	r6, #1
 8004392:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004396:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800439a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800439e:	ed85 7a00 	vstr	s14, [r5]
 80043a2:	edc5 7a01 	vstr	s15, [r5, #4]
 80043a6:	3010      	adds	r0, #16
 80043a8:	f105 0210 	add.w	r2, r5, #16
 80043ac:	3b08      	subs	r3, #8
 80043ae:	f104 0110 	add.w	r1, r4, #16
 80043b2:	ed51 4a02 	vldr	s9, [r1, #-8]
 80043b6:	ed93 5a02 	vldr	s10, [r3, #8]
 80043ba:	ed11 7a01 	vldr	s14, [r1, #-4]
 80043be:	ed10 6a02 	vldr	s12, [r0, #-8]
 80043c2:	edd3 5a03 	vldr	s11, [r3, #12]
 80043c6:	ed50 6a01 	vldr	s13, [r0, #-4]
 80043ca:	ee75 7a64 	vsub.f32	s15, s10, s9
 80043ce:	ee35 4a87 	vadd.f32	s8, s11, s14
 80043d2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80043d6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80043da:	ee66 4a27 	vmul.f32	s9, s12, s15
 80043de:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80043e2:	ee34 5a85 	vadd.f32	s10, s9, s10
 80043e6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80043ea:	ee66 6a84 	vmul.f32	s13, s13, s8
 80043ee:	ee77 7a25 	vadd.f32	s15, s14, s11
 80043f2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80043f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80043fa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80043fe:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004402:	3e01      	subs	r6, #1
 8004404:	ed42 6a02 	vstr	s13, [r2, #-8]
 8004408:	ed42 7a01 	vstr	s15, [r2, #-4]
 800440c:	f1a3 0308 	sub.w	r3, r3, #8
 8004410:	f101 0108 	add.w	r1, r1, #8
 8004414:	f100 0008 	add.w	r0, r0, #8
 8004418:	f102 0208 	add.w	r2, r2, #8
 800441c:	d1c9      	bne.n	80043b2 <arm_rfft_fast_f32+0x5e>
 800441e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004422:	edd1 7a00 	vldr	s15, [r1]
 8004426:	edd1 6a01 	vldr	s13, [r1, #4]
 800442a:	6941      	ldr	r1, [r0, #20]
 800442c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004430:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004434:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004438:	ee27 7a23 	vmul.f32	s14, s14, s7
 800443c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004440:	3e01      	subs	r6, #1
 8004442:	ed82 7a00 	vstr	s14, [r2]
 8004446:	edc2 7a01 	vstr	s15, [r2, #4]
 800444a:	00f0      	lsls	r0, r6, #3
 800444c:	b3ee      	cbz	r6, 80044ca <arm_rfft_fast_f32+0x176>
 800444e:	3808      	subs	r0, #8
 8004450:	f101 0e10 	add.w	lr, r1, #16
 8004454:	4420      	add	r0, r4
 8004456:	f104 0110 	add.w	r1, r4, #16
 800445a:	f102 0c10 	add.w	ip, r2, #16
 800445e:	ed90 7a02 	vldr	s14, [r0, #8]
 8004462:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004466:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800446a:	ed90 4a03 	vldr	s8, [r0, #12]
 800446e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004472:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004476:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800447a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800447e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004482:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004486:	ee35 5a44 	vsub.f32	s10, s10, s8
 800448a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800448e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004492:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004496:	ee26 6a24 	vmul.f32	s12, s12, s9
 800449a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800449e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80044a2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80044a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80044aa:	ee27 7a23 	vmul.f32	s14, s14, s7
 80044ae:	3e01      	subs	r6, #1
 80044b0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80044b4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80044b8:	f1a0 0008 	sub.w	r0, r0, #8
 80044bc:	f101 0108 	add.w	r1, r1, #8
 80044c0:	f10e 0e08 	add.w	lr, lr, #8
 80044c4:	f10c 0c08 	add.w	ip, ip, #8
 80044c8:	d1c9      	bne.n	800445e <arm_rfft_fast_f32+0x10a>
 80044ca:	4638      	mov	r0, r7
 80044cc:	4629      	mov	r1, r5
 80044ce:	461a      	mov	r2, r3
 80044d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	2301      	movs	r3, #1
 80044d6:	f000 bb31 	b.w	8004b3c <arm_cfft_f32>
 80044da:	bf00      	nop

080044dc <arm_cfft_radix8by2_f32>:
 80044dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e0:	ed2d 8b08 	vpush	{d8-d11}
 80044e4:	f8b0 e000 	ldrh.w	lr, [r0]
 80044e8:	6842      	ldr	r2, [r0, #4]
 80044ea:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80044ee:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80044f2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80044f6:	4607      	mov	r7, r0
 80044f8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80044fc:	f000 80af 	beq.w	800465e <arm_cfft_radix8by2_f32+0x182>
 8004500:	3310      	adds	r3, #16
 8004502:	18ce      	adds	r6, r1, r3
 8004504:	3210      	adds	r2, #16
 8004506:	4443      	add	r3, r8
 8004508:	f101 0510 	add.w	r5, r1, #16
 800450c:	f108 0410 	add.w	r4, r8, #16
 8004510:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004514:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004518:	ed53 3a03 	vldr	s7, [r3, #-12]
 800451c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004520:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004524:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004528:	ed14 0a02 	vldr	s0, [r4, #-8]
 800452c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004530:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004534:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004538:	ed15 7a01 	vldr	s14, [r5, #-4]
 800453c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004540:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004544:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004548:	ed16 1a01 	vldr	s2, [r6, #-4]
 800454c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004550:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004554:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004558:	ee37 aa27 	vadd.f32	s20, s14, s15
 800455c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004560:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004564:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004568:	ee74 aa80 	vadd.f32	s21, s9, s0
 800456c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004570:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004574:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004578:	ed45 aa02 	vstr	s21, [r5, #-8]
 800457c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004580:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004584:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004588:	ed06 9a03 	vstr	s18, [r6, #-12]
 800458c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004590:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004594:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004598:	ed12 6a03 	vldr	s12, [r2, #-12]
 800459c:	ed52 2a04 	vldr	s5, [r2, #-16]
 80045a0:	ee33 3a61 	vsub.f32	s6, s6, s3
 80045a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80045a8:	ee26 8a86 	vmul.f32	s16, s13, s12
 80045ac:	ee24 2a06 	vmul.f32	s4, s8, s12
 80045b0:	ee63 1a22 	vmul.f32	s3, s6, s5
 80045b4:	ee24 4a22 	vmul.f32	s8, s8, s5
 80045b8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80045bc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80045c0:	ee23 6a86 	vmul.f32	s12, s7, s12
 80045c4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80045c8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80045cc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80045d0:	ee72 3a63 	vsub.f32	s7, s4, s7
 80045d4:	ee71 2a88 	vadd.f32	s5, s3, s16
 80045d8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80045dc:	ed44 2a04 	vstr	s5, [r4, #-16]
 80045e0:	ed43 3a04 	vstr	s7, [r3, #-16]
 80045e4:	ed03 6a03 	vstr	s12, [r3, #-12]
 80045e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ec:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80045f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80045f4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80045f8:	ee35 6a41 	vsub.f32	s12, s10, s2
 80045fc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004600:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004604:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004608:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800460c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004610:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004614:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004618:	ee26 7a07 	vmul.f32	s14, s12, s14
 800461c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004620:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004624:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004628:	ee35 6a46 	vsub.f32	s12, s10, s12
 800462c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004630:	f1be 0e01 	subs.w	lr, lr, #1
 8004634:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004638:	f105 0510 	add.w	r5, r5, #16
 800463c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004640:	f106 0610 	add.w	r6, r6, #16
 8004644:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004648:	ed03 7a01 	vstr	s14, [r3, #-4]
 800464c:	f102 0210 	add.w	r2, r2, #16
 8004650:	f104 0410 	add.w	r4, r4, #16
 8004654:	f103 0310 	add.w	r3, r3, #16
 8004658:	f47f af5a 	bne.w	8004510 <arm_cfft_radix8by2_f32+0x34>
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	fa1f f48c 	uxth.w	r4, ip
 8004662:	4608      	mov	r0, r1
 8004664:	2302      	movs	r3, #2
 8004666:	4621      	mov	r1, r4
 8004668:	f000 fae2 	bl	8004c30 <arm_radix8_butterfly_f32>
 800466c:	ecbd 8b08 	vpop	{d8-d11}
 8004670:	4640      	mov	r0, r8
 8004672:	4621      	mov	r1, r4
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	2302      	movs	r3, #2
 8004678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	f000 bad8 	b.w	8004c30 <arm_radix8_butterfly_f32>

08004680 <arm_cfft_radix8by4_f32>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	ed2d 8b0a 	vpush	{d8-d12}
 8004688:	8802      	ldrh	r2, [r0, #0]
 800468a:	ed91 6a00 	vldr	s12, [r1]
 800468e:	b08f      	sub	sp, #60	; 0x3c
 8004690:	460f      	mov	r7, r1
 8004692:	0852      	lsrs	r2, r2, #1
 8004694:	0093      	lsls	r3, r2, #2
 8004696:	900c      	str	r0, [sp, #48]	; 0x30
 8004698:	9103      	str	r1, [sp, #12]
 800469a:	6841      	ldr	r1, [r0, #4]
 800469c:	ed97 7a01 	vldr	s14, [r7, #4]
 80046a0:	4638      	mov	r0, r7
 80046a2:	4418      	add	r0, r3
 80046a4:	4606      	mov	r6, r0
 80046a6:	9009      	str	r0, [sp, #36]	; 0x24
 80046a8:	4418      	add	r0, r3
 80046aa:	edd0 6a00 	vldr	s13, [r0]
 80046ae:	edd6 3a00 	vldr	s7, [r6]
 80046b2:	edd6 2a01 	vldr	s5, [r6, #4]
 80046b6:	edd0 7a01 	vldr	s15, [r0, #4]
 80046ba:	900a      	str	r0, [sp, #40]	; 0x28
 80046bc:	ee76 5a26 	vadd.f32	s11, s12, s13
 80046c0:	4604      	mov	r4, r0
 80046c2:	4625      	mov	r5, r4
 80046c4:	441c      	add	r4, r3
 80046c6:	ed94 4a00 	vldr	s8, [r4]
 80046ca:	ed94 5a01 	vldr	s10, [r4, #4]
 80046ce:	9401      	str	r4, [sp, #4]
 80046d0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80046d4:	4630      	mov	r0, r6
 80046d6:	ee74 4a24 	vadd.f32	s9, s8, s9
 80046da:	463e      	mov	r6, r7
 80046dc:	ee14 ea90 	vmov	lr, s9
 80046e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80046e4:	f846 eb08 	str.w	lr, [r6], #8
 80046e8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80046ec:	edd0 4a01 	vldr	s9, [r0, #4]
 80046f0:	9604      	str	r6, [sp, #16]
 80046f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f6:	9e01      	ldr	r6, [sp, #4]
 80046f8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80046fc:	ed96 2a01 	vldr	s4, [r6, #4]
 8004700:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004704:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8004708:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800470c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004710:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004714:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004718:	ee73 3a45 	vsub.f32	s7, s6, s10
 800471c:	4604      	mov	r4, r0
 800471e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004722:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004726:	46a3      	mov	fp, r4
 8004728:	ee37 7a02 	vadd.f32	s14, s14, s4
 800472c:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004730:	ee13 8a90 	vmov	r8, s7
 8004734:	46a4      	mov	ip, r4
 8004736:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800473a:	ed87 7a01 	vstr	s14, [r7, #4]
 800473e:	f84b 8b08 	str.w	r8, [fp], #8
 8004742:	f1ac 0704 	sub.w	r7, ip, #4
 8004746:	ed8c 5a01 	vstr	s10, [ip, #4]
 800474a:	f101 0c08 	add.w	ip, r1, #8
 800474e:	462c      	mov	r4, r5
 8004750:	f8cd c014 	str.w	ip, [sp, #20]
 8004754:	ee15 ca90 	vmov	ip, s11
 8004758:	f844 cb08 	str.w	ip, [r4], #8
 800475c:	9407      	str	r4, [sp, #28]
 800475e:	f101 0410 	add.w	r4, r1, #16
 8004762:	ed85 6a01 	vstr	s12, [r5, #4]
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	9402      	str	r4, [sp, #8]
 800476a:	462c      	mov	r4, r5
 800476c:	f101 0518 	add.w	r5, r1, #24
 8004770:	920b      	str	r2, [sp, #44]	; 0x2c
 8004772:	46b2      	mov	sl, r6
 8004774:	9506      	str	r5, [sp, #24]
 8004776:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800477a:	3a02      	subs	r2, #2
 800477c:	ee16 5a90 	vmov	r5, s13
 8004780:	46b6      	mov	lr, r6
 8004782:	4630      	mov	r0, r6
 8004784:	0852      	lsrs	r2, r2, #1
 8004786:	f84a 5b08 	str.w	r5, [sl], #8
 800478a:	f1a0 0604 	sub.w	r6, r0, #4
 800478e:	edce 7a01 	vstr	s15, [lr, #4]
 8004792:	9208      	str	r2, [sp, #32]
 8004794:	f000 8130 	beq.w	80049f8 <arm_cfft_radix8by4_f32+0x378>
 8004798:	4691      	mov	r9, r2
 800479a:	9a03      	ldr	r2, [sp, #12]
 800479c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80047a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80047a4:	3b08      	subs	r3, #8
 80047a6:	f102 0510 	add.w	r5, r2, #16
 80047aa:	f101 0c20 	add.w	ip, r1, #32
 80047ae:	f1a4 020c 	sub.w	r2, r4, #12
 80047b2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80047b6:	4433      	add	r3, r6
 80047b8:	3410      	adds	r4, #16
 80047ba:	4650      	mov	r0, sl
 80047bc:	4659      	mov	r1, fp
 80047be:	ed55 3a02 	vldr	s7, [r5, #-8]
 80047c2:	ed14 5a02 	vldr	s10, [r4, #-8]
 80047c6:	ed91 7a00 	vldr	s14, [r1]
 80047ca:	edd0 7a00 	vldr	s15, [r0]
 80047ce:	ed15 4a01 	vldr	s8, [r5, #-4]
 80047d2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80047d6:	edd0 6a01 	vldr	s13, [r0, #4]
 80047da:	ed91 6a01 	vldr	s12, [r1, #4]
 80047de:	ee33 8a85 	vadd.f32	s16, s7, s10
 80047e2:	ee34 0a25 	vadd.f32	s0, s8, s11
 80047e6:	ee78 4a07 	vadd.f32	s9, s16, s14
 80047ea:	ee74 5a65 	vsub.f32	s11, s8, s11
 80047ee:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80047f2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80047f6:	ed45 4a02 	vstr	s9, [r5, #-8]
 80047fa:	edd1 4a01 	vldr	s9, [r1, #4]
 80047fe:	ed90 4a01 	vldr	s8, [r0, #4]
 8004802:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004806:	ee76 aa05 	vadd.f32	s21, s12, s10
 800480a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800480e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004812:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004816:	edd6 1a00 	vldr	s3, [r6]
 800481a:	edd7 0a00 	vldr	s1, [r7]
 800481e:	ed92 4a02 	vldr	s8, [r2, #8]
 8004822:	edd3 3a02 	vldr	s7, [r3, #8]
 8004826:	ed93 2a01 	vldr	s4, [r3, #4]
 800482a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800482e:	edd2 2a01 	vldr	s5, [r2, #4]
 8004832:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004836:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800483a:	ee39 3a81 	vadd.f32	s6, s19, s2
 800483e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004842:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004846:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800484a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800484e:	ee18 aa90 	vmov	sl, s17
 8004852:	f847 a908 	str.w	sl, [r7], #-8
 8004856:	edd2 8a01 	vldr	s17, [r2, #4]
 800485a:	ed93 9a01 	vldr	s18, [r3, #4]
 800485e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004862:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004866:	ee78 8a89 	vadd.f32	s17, s17, s18
 800486a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800486e:	edc7 8a01 	vstr	s17, [r7, #4]
 8004872:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004876:	ed58 8a01 	vldr	s17, [r8, #-4]
 800487a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800487e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004882:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004886:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800488a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800488e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8004892:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004896:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800489a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800489e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80048a2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80048a6:	ee69 8a28 	vmul.f32	s17, s18, s17
 80048aa:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80048ae:	ee1c aa10 	vmov	sl, s24
 80048b2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80048b6:	f841 ab08 	str.w	sl, [r1], #8
 80048ba:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80048be:	ee3b bacb 	vsub.f32	s22, s23, s22
 80048c2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80048c6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80048ca:	ed01 aa01 	vstr	s20, [r1, #-4]
 80048ce:	edc2 8a01 	vstr	s17, [r2, #4]
 80048d2:	ed82 ba02 	vstr	s22, [r2, #8]
 80048d6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80048da:	ee74 3a63 	vsub.f32	s7, s8, s7
 80048de:	ee38 8a47 	vsub.f32	s16, s16, s14
 80048e2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80048e6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80048ea:	ee33 3a42 	vsub.f32	s6, s6, s4
 80048ee:	ee38 8a67 	vsub.f32	s16, s16, s15
 80048f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80048f6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80048fa:	ee63 8a04 	vmul.f32	s17, s6, s8
 80048fe:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004902:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004906:	ee28 8a04 	vmul.f32	s16, s16, s8
 800490a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800490e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004912:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004916:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800491a:	ee14 aa10 	vmov	sl, s8
 800491e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004922:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004926:	ed44 9a02 	vstr	s19, [r4, #-8]
 800492a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800492e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004932:	f846 a908 	str.w	sl, [r6], #-8
 8004936:	ee35 6a46 	vsub.f32	s12, s10, s12
 800493a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800493e:	edc6 3a01 	vstr	s7, [r6, #4]
 8004942:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800494e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8004952:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004956:	ee26 5a87 	vmul.f32	s10, s13, s14
 800495a:	ee72 2a62 	vsub.f32	s5, s4, s5
 800495e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004962:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004966:	ee75 5a25 	vadd.f32	s11, s10, s11
 800496a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800496e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004976:	ee21 6a06 	vmul.f32	s12, s2, s12
 800497a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800497e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8004982:	ee15 aa90 	vmov	sl, s11
 8004986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800498a:	f840 ab08 	str.w	sl, [r0], #8
 800498e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004992:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004996:	f1b9 0901 	subs.w	r9, r9, #1
 800499a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800499e:	f105 0508 	add.w	r5, r5, #8
 80049a2:	ed83 1a02 	vstr	s2, [r3, #8]
 80049a6:	edc3 2a01 	vstr	s5, [r3, #4]
 80049aa:	f108 0808 	add.w	r8, r8, #8
 80049ae:	f1a2 0208 	sub.w	r2, r2, #8
 80049b2:	f10c 0c10 	add.w	ip, ip, #16
 80049b6:	f104 0408 	add.w	r4, r4, #8
 80049ba:	f10e 0e18 	add.w	lr, lr, #24
 80049be:	f1a3 0308 	sub.w	r3, r3, #8
 80049c2:	f47f aefc 	bne.w	80047be <arm_cfft_radix8by4_f32+0x13e>
 80049c6:	9908      	ldr	r1, [sp, #32]
 80049c8:	9802      	ldr	r0, [sp, #8]
 80049ca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80049d4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80049d8:	9102      	str	r1, [sp, #8]
 80049da:	9904      	ldr	r1, [sp, #16]
 80049dc:	4419      	add	r1, r3
 80049de:	9104      	str	r1, [sp, #16]
 80049e0:	9905      	ldr	r1, [sp, #20]
 80049e2:	4419      	add	r1, r3
 80049e4:	9105      	str	r1, [sp, #20]
 80049e6:	9907      	ldr	r1, [sp, #28]
 80049e8:	449b      	add	fp, r3
 80049ea:	4419      	add	r1, r3
 80049ec:	449a      	add	sl, r3
 80049ee:	9b06      	ldr	r3, [sp, #24]
 80049f0:	9107      	str	r1, [sp, #28]
 80049f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049f6:	9306      	str	r3, [sp, #24]
 80049f8:	9a04      	ldr	r2, [sp, #16]
 80049fa:	9807      	ldr	r0, [sp, #28]
 80049fc:	edd2 3a00 	vldr	s7, [r2]
 8004a00:	ed90 4a00 	vldr	s8, [r0]
 8004a04:	eddb 7a00 	vldr	s15, [fp]
 8004a08:	ed9a 3a00 	vldr	s6, [sl]
 8004a0c:	edd2 4a01 	vldr	s9, [r2, #4]
 8004a10:	ed90 7a01 	vldr	s14, [r0, #4]
 8004a14:	ed9b 2a01 	vldr	s4, [fp, #4]
 8004a18:	edda 5a01 	vldr	s11, [sl, #4]
 8004a1c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004a20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004a22:	ee73 6a84 	vadd.f32	s13, s7, s8
 8004a26:	ee34 6a87 	vadd.f32	s12, s9, s14
 8004a2a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8004a2e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8004a32:	ee33 5a05 	vadd.f32	s10, s6, s10
 8004a36:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004a3a:	ed82 5a00 	vstr	s10, [r2]
 8004a3e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004a42:	edda 4a01 	vldr	s9, [sl, #4]
 8004a46:	ee36 5a05 	vadd.f32	s10, s12, s10
 8004a4a:	ee72 3a04 	vadd.f32	s7, s4, s8
 8004a4e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004a52:	ee77 4a67 	vsub.f32	s9, s14, s15
 8004a56:	ed82 5a01 	vstr	s10, [r2, #4]
 8004a5a:	9a05      	ldr	r2, [sp, #20]
 8004a5c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004a60:	edd2 1a00 	vldr	s3, [r2]
 8004a64:	edd2 2a01 	vldr	s5, [r2, #4]
 8004a68:	9a02      	ldr	r2, [sp, #8]
 8004a6a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8004a6e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8004a72:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8004a76:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004a7a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004a7e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004a82:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004a86:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004a8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a8e:	edcb 2a00 	vstr	s5, [fp]
 8004a92:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004a96:	edd2 3a01 	vldr	s7, [r2, #4]
 8004a9a:	ed92 5a00 	vldr	s10, [r2]
 8004a9e:	9a06      	ldr	r2, [sp, #24]
 8004aa0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004aa4:	ee36 6a65 	vsub.f32	s12, s12, s11
 8004aa8:	ee66 4a85 	vmul.f32	s9, s13, s10
 8004aac:	ee26 5a05 	vmul.f32	s10, s12, s10
 8004ab0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004ab4:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004ab8:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004abc:	ee34 6a86 	vadd.f32	s12, s9, s12
 8004ac0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac8:	edc0 6a01 	vstr	s13, [r0, #4]
 8004acc:	ed80 6a00 	vstr	s12, [r0]
 8004ad0:	ed92 6a01 	vldr	s12, [r2, #4]
 8004ad4:	9803      	ldr	r0, [sp, #12]
 8004ad6:	ee77 7a43 	vsub.f32	s15, s14, s6
 8004ada:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004ade:	ed92 7a00 	vldr	s14, [r2]
 8004ae2:	ee65 6a87 	vmul.f32	s13, s11, s14
 8004ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aea:	ee65 5a86 	vmul.f32	s11, s11, s12
 8004aee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004af2:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	edca 5a01 	vstr	s11, [sl, #4]
 8004afe:	edca 7a00 	vstr	s15, [sl]
 8004b02:	6872      	ldr	r2, [r6, #4]
 8004b04:	4621      	mov	r1, r4
 8004b06:	2304      	movs	r3, #4
 8004b08:	f000 f892 	bl	8004c30 <arm_radix8_butterfly_f32>
 8004b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b0e:	6872      	ldr	r2, [r6, #4]
 8004b10:	4621      	mov	r1, r4
 8004b12:	2304      	movs	r3, #4
 8004b14:	f000 f88c 	bl	8004c30 <arm_radix8_butterfly_f32>
 8004b18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b1a:	6872      	ldr	r2, [r6, #4]
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	2304      	movs	r3, #4
 8004b20:	f000 f886 	bl	8004c30 <arm_radix8_butterfly_f32>
 8004b24:	9801      	ldr	r0, [sp, #4]
 8004b26:	6872      	ldr	r2, [r6, #4]
 8004b28:	4621      	mov	r1, r4
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	b00f      	add	sp, #60	; 0x3c
 8004b2e:	ecbd 8b0a 	vpop	{d8-d12}
 8004b32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b36:	f000 b87b 	b.w	8004c30 <arm_radix8_butterfly_f32>
 8004b3a:	bf00      	nop

08004b3c <arm_cfft_f32>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	2a01      	cmp	r2, #1
 8004b42:	4606      	mov	r6, r0
 8004b44:	4617      	mov	r7, r2
 8004b46:	460c      	mov	r4, r1
 8004b48:	4698      	mov	r8, r3
 8004b4a:	8805      	ldrh	r5, [r0, #0]
 8004b4c:	d054      	beq.n	8004bf8 <arm_cfft_f32+0xbc>
 8004b4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004b52:	d04c      	beq.n	8004bee <arm_cfft_f32+0xb2>
 8004b54:	d916      	bls.n	8004b84 <arm_cfft_f32+0x48>
 8004b56:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004b5a:	d01a      	beq.n	8004b92 <arm_cfft_f32+0x56>
 8004b5c:	d95c      	bls.n	8004c18 <arm_cfft_f32+0xdc>
 8004b5e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004b62:	d044      	beq.n	8004bee <arm_cfft_f32+0xb2>
 8004b64:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004b68:	d105      	bne.n	8004b76 <arm_cfft_f32+0x3a>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	6872      	ldr	r2, [r6, #4]
 8004b70:	2301      	movs	r3, #1
 8004b72:	f000 f85d 	bl	8004c30 <arm_radix8_butterfly_f32>
 8004b76:	f1b8 0f00 	cmp.w	r8, #0
 8004b7a:	d111      	bne.n	8004ba0 <arm_cfft_f32+0x64>
 8004b7c:	2f01      	cmp	r7, #1
 8004b7e:	d016      	beq.n	8004bae <arm_cfft_f32+0x72>
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	2d20      	cmp	r5, #32
 8004b86:	d032      	beq.n	8004bee <arm_cfft_f32+0xb2>
 8004b88:	d94a      	bls.n	8004c20 <arm_cfft_f32+0xe4>
 8004b8a:	2d40      	cmp	r5, #64	; 0x40
 8004b8c:	d0ed      	beq.n	8004b6a <arm_cfft_f32+0x2e>
 8004b8e:	2d80      	cmp	r5, #128	; 0x80
 8004b90:	d1f1      	bne.n	8004b76 <arm_cfft_f32+0x3a>
 8004b92:	4630      	mov	r0, r6
 8004b94:	4621      	mov	r1, r4
 8004b96:	f7ff fca1 	bl	80044dc <arm_cfft_radix8by2_f32>
 8004b9a:	f1b8 0f00 	cmp.w	r8, #0
 8004b9e:	d0ed      	beq.n	8004b7c <arm_cfft_f32+0x40>
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	89b1      	ldrh	r1, [r6, #12]
 8004ba4:	68b2      	ldr	r2, [r6, #8]
 8004ba6:	f7fb fb2d 	bl	8000204 <arm_bitreversal_32>
 8004baa:	2f01      	cmp	r7, #1
 8004bac:	d1e8      	bne.n	8004b80 <arm_cfft_f32+0x44>
 8004bae:	ee07 5a90 	vmov	s15, r5
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004bba:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	d0de      	beq.n	8004b80 <arm_cfft_f32+0x44>
 8004bc2:	f104 0108 	add.w	r1, r4, #8
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	3301      	adds	r3, #1
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	f101 0108 	add.w	r1, r1, #8
 8004bd0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004bd4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004bd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004bdc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004be0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004be4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004be8:	d1ee      	bne.n	8004bc8 <arm_cfft_f32+0x8c>
 8004bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bee:	4630      	mov	r0, r6
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7ff fd45 	bl	8004680 <arm_cfft_radix8by4_f32>
 8004bf6:	e7be      	b.n	8004b76 <arm_cfft_f32+0x3a>
 8004bf8:	b1ad      	cbz	r5, 8004c26 <arm_cfft_f32+0xea>
 8004bfa:	f101 030c 	add.w	r3, r1, #12
 8004bfe:	2200      	movs	r2, #0
 8004c00:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004c04:	3201      	adds	r2, #1
 8004c06:	eef1 7a67 	vneg.f32	s15, s15
 8004c0a:	4295      	cmp	r5, r2
 8004c0c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004c10:	f103 0308 	add.w	r3, r3, #8
 8004c14:	d1f4      	bne.n	8004c00 <arm_cfft_f32+0xc4>
 8004c16:	e79a      	b.n	8004b4e <arm_cfft_f32+0x12>
 8004c18:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004c1c:	d0a5      	beq.n	8004b6a <arm_cfft_f32+0x2e>
 8004c1e:	e7aa      	b.n	8004b76 <arm_cfft_f32+0x3a>
 8004c20:	2d10      	cmp	r5, #16
 8004c22:	d0b6      	beq.n	8004b92 <arm_cfft_f32+0x56>
 8004c24:	e7a7      	b.n	8004b76 <arm_cfft_f32+0x3a>
 8004c26:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004c2a:	d894      	bhi.n	8004b56 <arm_cfft_f32+0x1a>
 8004c2c:	e7aa      	b.n	8004b84 <arm_cfft_f32+0x48>
 8004c2e:	bf00      	nop

08004c30 <arm_radix8_butterfly_f32>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	ed2d 8b10 	vpush	{d8-d15}
 8004c38:	b09d      	sub	sp, #116	; 0x74
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	ed9f bac8 	vldr	s22, [pc, #800]	; 8004f60 <arm_radix8_butterfly_f32+0x330>
 8004c40:	921a      	str	r2, [sp, #104]	; 0x68
 8004c42:	1d03      	adds	r3, r0, #4
 8004c44:	4682      	mov	sl, r0
 8004c46:	4689      	mov	r9, r1
 8004c48:	468b      	mov	fp, r1
 8004c4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c4c:	9400      	str	r4, [sp, #0]
 8004c4e:	469e      	mov	lr, r3
 8004c50:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004c54:	005a      	lsls	r2, r3, #1
 8004c56:	18d6      	adds	r6, r2, r3
 8004c58:	18f5      	adds	r5, r6, r3
 8004c5a:	9203      	str	r2, [sp, #12]
 8004c5c:	195a      	adds	r2, r3, r5
 8004c5e:	18d0      	adds	r0, r2, r3
 8004c60:	00df      	lsls	r7, r3, #3
 8004c62:	1819      	adds	r1, r3, r0
 8004c64:	463c      	mov	r4, r7
 8004c66:	9701      	str	r7, [sp, #4]
 8004c68:	4457      	add	r7, sl
 8004c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c6c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004c76:	eb07 0c04 	add.w	ip, r7, r4
 8004c7a:	9c00      	ldr	r4, [sp, #0]
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8004c82:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004c86:	3204      	adds	r2, #4
 8004c88:	3104      	adds	r1, #4
 8004c8a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8004c8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c92:	f04f 0800 	mov.w	r8, #0
 8004c96:	eddc 7a00 	vldr	s15, [ip]
 8004c9a:	edd7 6a00 	vldr	s13, [r7]
 8004c9e:	edd6 3a00 	vldr	s7, [r6]
 8004ca2:	ed5e aa01 	vldr	s21, [lr, #-4]
 8004ca6:	edd5 4a00 	vldr	s9, [r5]
 8004caa:	ed90 2a00 	vldr	s4, [r0]
 8004cae:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004cb2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004cb6:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004cba:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8004cbe:	ee76 1a87 	vadd.f32	s3, s13, s14
 8004cc2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004cc6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004cca:	ee33 5a28 	vadd.f32	s10, s6, s17
 8004cce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004cd2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004cd6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004cda:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8004cde:	ed85 5a00 	vstr	s10, [r5]
 8004ce2:	ed96 1a01 	vldr	s2, [r6, #4]
 8004ce6:	edd7 5a01 	vldr	s11, [r7, #4]
 8004cea:	ed92 aa00 	vldr	s20, [r2]
 8004cee:	ed91 6a00 	vldr	s12, [r1]
 8004cf2:	ed9e 9a00 	vldr	s18, [lr]
 8004cf6:	ed95 5a01 	vldr	s10, [r5, #4]
 8004cfa:	eddc 6a01 	vldr	s13, [ip, #4]
 8004cfe:	edd0 9a01 	vldr	s19, [r0, #4]
 8004d02:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004d06:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004d0a:	ee75 3aca 	vsub.f32	s7, s11, s20
 8004d0e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004d12:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004d16:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004d1a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8004d1e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004d22:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004d26:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004d2a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004d2e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004d32:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004d36:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004d3a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004d3e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004d42:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004d46:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004d4a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004d4e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004d52:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004d56:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004d5a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004d5e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004d62:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004d66:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004d6a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004d6e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004d72:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004d76:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004d7a:	ee75 4a22 	vadd.f32	s9, s10, s5
 8004d7e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004d82:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004d86:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004d8a:	ee75 2a87 	vadd.f32	s5, s11, s14
 8004d8e:	ee31 9a28 	vadd.f32	s18, s2, s17
 8004d92:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004d96:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004d9a:	ee33 2a80 	vadd.f32	s4, s7, s0
 8004d9e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004da2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004da6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004daa:	ee31 1a68 	vsub.f32	s2, s2, s17
 8004dae:	ee34 4a21 	vadd.f32	s8, s8, s3
 8004db2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004db6:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004dba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004dbe:	44d8      	add	r8, fp
 8004dc0:	45c1      	cmp	r9, r8
 8004dc2:	ed8e 9a00 	vstr	s18, [lr]
 8004dc6:	ed85 1a01 	vstr	s2, [r5, #4]
 8004dca:	449e      	add	lr, r3
 8004dcc:	ed8c 8a00 	vstr	s16, [ip]
 8004dd0:	441d      	add	r5, r3
 8004dd2:	ed80 6a00 	vstr	s12, [r0]
 8004dd6:	edcc 0a01 	vstr	s1, [ip, #4]
 8004dda:	ed80 4a01 	vstr	s8, [r0, #4]
 8004dde:	449c      	add	ip, r3
 8004de0:	ed87 2a00 	vstr	s4, [r7]
 8004de4:	4418      	add	r0, r3
 8004de6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004dea:	ed42 2a01 	vstr	s5, [r2, #-4]
 8004dee:	ed86 7a00 	vstr	s14, [r6]
 8004df2:	ed87 3a01 	vstr	s6, [r7, #4]
 8004df6:	edc1 4a00 	vstr	s9, [r1]
 8004dfa:	441f      	add	r7, r3
 8004dfc:	edc2 5a00 	vstr	s11, [r2]
 8004e00:	4419      	add	r1, r3
 8004e02:	edc6 6a01 	vstr	s13, [r6, #4]
 8004e06:	441a      	add	r2, r3
 8004e08:	441e      	add	r6, r3
 8004e0a:	f63f af44 	bhi.w	8004c96 <arm_radix8_butterfly_f32+0x66>
 8004e0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e10:	2907      	cmp	r1, #7
 8004e12:	4620      	mov	r0, r4
 8004e14:	f240 81e9 	bls.w	80051ea <arm_radix8_butterfly_f32+0x5ba>
 8004e18:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004e1c:	193e      	adds	r6, r7, r4
 8004e1e:	1935      	adds	r5, r6, r4
 8004e20:	9c03      	ldr	r4, [sp, #12]
 8004e22:	9000      	str	r0, [sp, #0]
 8004e24:	4622      	mov	r2, r4
 8004e26:	3201      	adds	r2, #1
 8004e28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004e2c:	9900      	ldr	r1, [sp, #0]
 8004e2e:	1828      	adds	r0, r5, r0
 8004e30:	eb00 0e01 	add.w	lr, r0, r1
 8004e34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e36:	440a      	add	r2, r1
 8004e38:	eb04 0c01 	add.w	ip, r4, r1
 8004e3c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004e40:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004e44:	9a00      	ldr	r2, [sp, #0]
 8004e46:	940f      	str	r4, [sp, #60]	; 0x3c
 8004e48:	00ed      	lsls	r5, r5, #3
 8004e4a:	9511      	str	r5, [sp, #68]	; 0x44
 8004e4c:	00d5      	lsls	r5, r2, #3
 8004e4e:	950d      	str	r5, [sp, #52]	; 0x34
 8004e50:	9d01      	ldr	r5, [sp, #4]
 8004e52:	3508      	adds	r5, #8
 8004e54:	9516      	str	r5, [sp, #88]	; 0x58
 8004e56:	9d02      	ldr	r5, [sp, #8]
 8004e58:	3508      	adds	r5, #8
 8004e5a:	0114      	lsls	r4, r2, #4
 8004e5c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004e62:	940e      	str	r4, [sp, #56]	; 0x38
 8004e64:	00c0      	lsls	r0, r0, #3
 8004e66:	9010      	str	r0, [sp, #64]	; 0x40
 8004e68:	18aa      	adds	r2, r5, r2
 8004e6a:	9207      	str	r2, [sp, #28]
 8004e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e70:	18aa      	adds	r2, r5, r2
 8004e72:	9208      	str	r2, [sp, #32]
 8004e74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e76:	18aa      	adds	r2, r5, r2
 8004e78:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e7e:	f10e 0204 	add.w	r2, lr, #4
 8004e82:	920a      	str	r2, [sp, #40]	; 0x28
 8004e84:	00c9      	lsls	r1, r1, #3
 8004e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e88:	310c      	adds	r1, #12
 8004e8a:	00f6      	lsls	r6, r6, #3
 8004e8c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8004e90:	9114      	str	r1, [sp, #80]	; 0x50
 8004e92:	18a9      	adds	r1, r5, r2
 8004e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e96:	9612      	str	r6, [sp, #72]	; 0x48
 8004e98:	00ff      	lsls	r7, r7, #3
 8004e9a:	19ae      	adds	r6, r5, r6
 8004e9c:	3008      	adds	r0, #8
 8004e9e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004ea2:	9606      	str	r6, [sp, #24]
 8004ea4:	9019      	str	r0, [sp, #100]	; 0x64
 8004ea6:	18aa      	adds	r2, r5, r2
 8004ea8:	0164      	lsls	r4, r4, #5
 8004eaa:	19ee      	adds	r6, r5, r7
 8004eac:	f10c 000c 	add.w	r0, ip, #12
 8004eb0:	9713      	str	r7, [sp, #76]	; 0x4c
 8004eb2:	9604      	str	r6, [sp, #16]
 8004eb4:	9015      	str	r0, [sp, #84]	; 0x54
 8004eb6:	9103      	str	r1, [sp, #12]
 8004eb8:	9205      	str	r2, [sp, #20]
 8004eba:	f104 0208 	add.w	r2, r4, #8
 8004ebe:	9218      	str	r2, [sp, #96]	; 0x60
 8004ec0:	f04f 0801 	mov.w	r8, #1
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f102 0108 	add.w	r1, r2, #8
 8004eca:	460f      	mov	r7, r1
 8004ecc:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ece:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ed0:	188e      	adds	r6, r1, r2
 8004ed2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ed4:	188d      	adds	r5, r1, r2
 8004ed6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004ed8:	188c      	adds	r4, r1, r2
 8004eda:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004edc:	1888      	adds	r0, r1, r2
 8004ede:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004ee0:	eb01 0c02 	add.w	ip, r1, r2
 8004ee4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004ee6:	440a      	add	r2, r1
 8004ee8:	9903      	ldr	r1, [sp, #12]
 8004eea:	edd1 fa00 	vldr	s31, [r1]
 8004eee:	9905      	ldr	r1, [sp, #20]
 8004ef0:	ed91 fa00 	vldr	s30, [r1]
 8004ef4:	9904      	ldr	r1, [sp, #16]
 8004ef6:	edd1 ea00 	vldr	s29, [r1]
 8004efa:	9906      	ldr	r1, [sp, #24]
 8004efc:	ed91 ea00 	vldr	s28, [r1]
 8004f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f02:	edd1 da00 	vldr	s27, [r1]
 8004f06:	9908      	ldr	r1, [sp, #32]
 8004f08:	ed91 da00 	vldr	s26, [r1]
 8004f0c:	9907      	ldr	r1, [sp, #28]
 8004f0e:	edd1 ca00 	vldr	s25, [r1]
 8004f12:	9903      	ldr	r1, [sp, #12]
 8004f14:	ed91 ca01 	vldr	s24, [r1, #4]
 8004f18:	9905      	ldr	r1, [sp, #20]
 8004f1a:	edd1 ba01 	vldr	s23, [r1, #4]
 8004f1e:	9904      	ldr	r1, [sp, #16]
 8004f20:	edd1 aa01 	vldr	s21, [r1, #4]
 8004f24:	9906      	ldr	r1, [sp, #24]
 8004f26:	ed91 aa01 	vldr	s20, [r1, #4]
 8004f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f2c:	edd1 7a01 	vldr	s15, [r1, #4]
 8004f30:	9908      	ldr	r1, [sp, #32]
 8004f32:	edcd 7a00 	vstr	s15, [sp]
 8004f36:	edd1 7a01 	vldr	s15, [r1, #4]
 8004f3a:	9907      	ldr	r1, [sp, #28]
 8004f3c:	edcd 7a01 	vstr	s15, [sp, #4]
 8004f40:	edd1 7a01 	vldr	s15, [r1, #4]
 8004f44:	eb0a 0e07 	add.w	lr, sl, r7
 8004f48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004f4a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004f4e:	eb0c 010a 	add.w	r1, ip, sl
 8004f52:	4456      	add	r6, sl
 8004f54:	4455      	add	r5, sl
 8004f56:	4454      	add	r4, sl
 8004f58:	4450      	add	r0, sl
 8004f5a:	4452      	add	r2, sl
 8004f5c:	46c4      	mov	ip, r8
 8004f5e:	e001      	b.n	8004f64 <arm_radix8_butterfly_f32+0x334>
 8004f60:	3f3504f3 	.word	0x3f3504f3
 8004f64:	ed96 5a00 	vldr	s10, [r6]
 8004f68:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004f6c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004f70:	edd0 7a00 	vldr	s15, [r0]
 8004f74:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004f78:	edde 3a00 	vldr	s7, [lr]
 8004f7c:	ed94 3a00 	vldr	s6, [r4]
 8004f80:	ed95 2a00 	vldr	s4, [r5]
 8004f84:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004f88:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004f8c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004f90:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004f94:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004f98:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004f9c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004fa0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004fa4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fac:	ed8e 6a00 	vstr	s12, [lr]
 8004fb0:	edd0 8a01 	vldr	s17, [r0, #4]
 8004fb4:	ed95 9a01 	vldr	s18, [r5, #4]
 8004fb8:	edd1 2a00 	vldr	s5, [r1]
 8004fbc:	ed97 7a00 	vldr	s14, [r7]
 8004fc0:	edd4 0a01 	vldr	s1, [r4, #4]
 8004fc4:	ed96 6a01 	vldr	s12, [r6, #4]
 8004fc8:	edd2 5a00 	vldr	s11, [r2]
 8004fcc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004fd0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004fd4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004fd8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004fdc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004fe0:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004fe4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004fe8:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004fec:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004ff0:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004ff4:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004ff8:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004ffc:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005000:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005004:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005008:	ee32 9a08 	vadd.f32	s18, s4, s16
 800500c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005010:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005014:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005018:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800501c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005020:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005024:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005028:	ee30 6a46 	vsub.f32	s12, s0, s12
 800502c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005030:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005034:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005038:	ee32 7a64 	vsub.f32	s14, s4, s9
 800503c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005040:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005044:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005048:	ee75 8a85 	vadd.f32	s17, s11, s10
 800504c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005050:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005054:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005058:	ee79 1a41 	vsub.f32	s3, s18, s2
 800505c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005060:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005064:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005068:	ee72 4a24 	vadd.f32	s9, s4, s9
 800506c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005070:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005074:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005078:	ee77 9a85 	vadd.f32	s19, s15, s10
 800507c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8005080:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005084:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005088:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800508c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005090:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005094:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005098:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800509c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80050a0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80050a4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80050a8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80050ac:	ee35 3a03 	vadd.f32	s6, s10, s6
 80050b0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80050b4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80050b8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80050bc:	ed9d 4a02 	vldr	s8, [sp, #8]
 80050c0:	ed8e 1a01 	vstr	s2, [lr, #4]
 80050c4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80050c8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80050cc:	ed9d 7a01 	vldr	s14, [sp, #4]
 80050d0:	ed86 3a00 	vstr	s6, [r6]
 80050d4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80050d8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80050dc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80050e0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80050e4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80050e8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80050ec:	ee27 7a24 	vmul.f32	s14, s14, s9
 80050f0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80050f4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80050f8:	ee64 8a28 	vmul.f32	s17, s8, s17
 80050fc:	ed9d 4a00 	vldr	s8, [sp]
 8005100:	edc6 6a01 	vstr	s13, [r6, #4]
 8005104:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005108:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800510c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005110:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005114:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005118:	ee74 4a84 	vadd.f32	s9, s9, s8
 800511c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005120:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005124:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005128:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800512c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005130:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005134:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005138:	ee30 0a68 	vsub.f32	s0, s0, s17
 800513c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005140:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005144:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005148:	44dc      	add	ip, fp
 800514a:	45e1      	cmp	r9, ip
 800514c:	ed84 9a00 	vstr	s18, [r4]
 8005150:	edc4 3a01 	vstr	s7, [r4, #4]
 8005154:	449e      	add	lr, r3
 8005156:	ed02 7a01 	vstr	s14, [r2, #-4]
 800515a:	edc2 2a00 	vstr	s5, [r2]
 800515e:	441e      	add	r6, r3
 8005160:	ed85 2a00 	vstr	s4, [r5]
 8005164:	ed85 8a01 	vstr	s16, [r5, #4]
 8005168:	441c      	add	r4, r3
 800516a:	ed47 1a01 	vstr	s3, [r7, #-4]
 800516e:	ed87 0a00 	vstr	s0, [r7]
 8005172:	441a      	add	r2, r3
 8005174:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005178:	edc1 9a00 	vstr	s19, [r1]
 800517c:	441d      	add	r5, r3
 800517e:	edc0 0a00 	vstr	s1, [r0]
 8005182:	441f      	add	r7, r3
 8005184:	ed80 6a01 	vstr	s12, [r0, #4]
 8005188:	4419      	add	r1, r3
 800518a:	4418      	add	r0, r3
 800518c:	f63f aeea 	bhi.w	8004f64 <arm_radix8_butterfly_f32+0x334>
 8005190:	9a03      	ldr	r2, [sp, #12]
 8005192:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005194:	440a      	add	r2, r1
 8005196:	9203      	str	r2, [sp, #12]
 8005198:	990e      	ldr	r1, [sp, #56]	; 0x38
 800519a:	9a05      	ldr	r2, [sp, #20]
 800519c:	440a      	add	r2, r1
 800519e:	9205      	str	r2, [sp, #20]
 80051a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	440a      	add	r2, r1
 80051a6:	9204      	str	r2, [sp, #16]
 80051a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80051aa:	9a06      	ldr	r2, [sp, #24]
 80051ac:	440a      	add	r2, r1
 80051ae:	9206      	str	r2, [sp, #24]
 80051b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80051b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b4:	440a      	add	r2, r1
 80051b6:	9209      	str	r2, [sp, #36]	; 0x24
 80051b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80051ba:	9a08      	ldr	r2, [sp, #32]
 80051bc:	440a      	add	r2, r1
 80051be:	9208      	str	r2, [sp, #32]
 80051c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051c2:	9a07      	ldr	r2, [sp, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	9207      	str	r2, [sp, #28]
 80051c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051cc:	f108 0801 	add.w	r8, r8, #1
 80051d0:	3208      	adds	r2, #8
 80051d2:	4588      	cmp	r8, r1
 80051d4:	920a      	str	r2, [sp, #40]	; 0x28
 80051d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051d8:	f47f ae75 	bne.w	8004ec6 <arm_radix8_butterfly_f32+0x296>
 80051dc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	46c3      	mov	fp, r8
 80051e4:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80051e8:	e532      	b.n	8004c50 <arm_radix8_butterfly_f32+0x20>
 80051ea:	b01d      	add	sp, #116	; 0x74
 80051ec:	ecbd 8b10 	vpop	{d8-d15}
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	; (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	2000000c 	.word	0x2000000c

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	; (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	; (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	; (8005244 <__libc_init_array+0x44>)
 8005214:	f000 f9ce 	bl	80055b4 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08018a58 	.word	0x08018a58
 800523c:	08018a58 	.word	0x08018a58
 8005240:	08018a58 	.word	0x08018a58
 8005244:	08018a5c 	.word	0x08018a5c

08005248 <memset>:
 8005248:	4402      	add	r2, r0
 800524a:	4603      	mov	r3, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <log10f>:
 8005258:	b508      	push	{r3, lr}
 800525a:	ed2d 8b02 	vpush	{d8}
 800525e:	eeb0 8a40 	vmov.f32	s16, s0
 8005262:	f000 f855 	bl	8005310 <__ieee754_log10f>
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <log10f+0x60>)
 8005268:	f993 3000 	ldrsb.w	r3, [r3]
 800526c:	3301      	adds	r3, #1
 800526e:	d014      	beq.n	800529a <log10f+0x42>
 8005270:	eeb4 8a48 	vcmp.f32	s16, s16
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d60f      	bvs.n	800529a <log10f+0x42>
 800527a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	d80a      	bhi.n	800529a <log10f+0x42>
 8005284:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d108      	bne.n	80052a0 <log10f+0x48>
 800528e:	f7ff ffb1 	bl	80051f4 <__errno>
 8005292:	2322      	movs	r3, #34	; 0x22
 8005294:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80052bc <log10f+0x64>
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	ecbd 8b02 	vpop	{d8}
 800529e:	bd08      	pop	{r3, pc}
 80052a0:	f7ff ffa8 	bl	80051f4 <__errno>
 80052a4:	ecbd 8b02 	vpop	{d8}
 80052a8:	2321      	movs	r3, #33	; 0x21
 80052aa:	6003      	str	r3, [r0, #0]
 80052ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <log10f+0x68>)
 80052b2:	f000 b889 	b.w	80053c8 <nanf>
 80052b6:	bf00      	nop
 80052b8:	20000070 	.word	0x20000070
 80052bc:	ff800000 	.word	0xff800000
 80052c0:	08018a4c 	.word	0x08018a4c

080052c4 <sqrtf>:
 80052c4:	b508      	push	{r3, lr}
 80052c6:	ed2d 8b02 	vpush	{d8}
 80052ca:	eeb0 8a40 	vmov.f32	s16, s0
 80052ce:	f000 f877 	bl	80053c0 <__ieee754_sqrtf>
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <sqrtf+0x44>)
 80052d4:	f993 3000 	ldrsb.w	r3, [r3]
 80052d8:	3301      	adds	r3, #1
 80052da:	d011      	beq.n	8005300 <sqrtf+0x3c>
 80052dc:	eeb4 8a48 	vcmp.f32	s16, s16
 80052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e4:	d60c      	bvs.n	8005300 <sqrtf+0x3c>
 80052e6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800530c <sqrtf+0x48>
 80052ea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d505      	bpl.n	8005300 <sqrtf+0x3c>
 80052f4:	f7ff ff7e 	bl	80051f4 <__errno>
 80052f8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80052fc:	2321      	movs	r3, #33	; 0x21
 80052fe:	6003      	str	r3, [r0, #0]
 8005300:	ecbd 8b02 	vpop	{d8}
 8005304:	bd08      	pop	{r3, pc}
 8005306:	bf00      	nop
 8005308:	20000070 	.word	0x20000070
 800530c:	00000000 	.word	0x00000000

08005310 <__ieee754_log10f>:
 8005310:	b508      	push	{r3, lr}
 8005312:	ee10 2a10 	vmov	r2, s0
 8005316:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800531a:	ed2d 8b02 	vpush	{d8}
 800531e:	d108      	bne.n	8005332 <__ieee754_log10f+0x22>
 8005320:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80053a8 <__ieee754_log10f+0x98>
 8005324:	eddf 7a21 	vldr	s15, [pc, #132]	; 80053ac <__ieee754_log10f+0x9c>
 8005328:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800532c:	ecbd 8b02 	vpop	{d8}
 8005330:	bd08      	pop	{r3, pc}
 8005332:	2a00      	cmp	r2, #0
 8005334:	da02      	bge.n	800533c <__ieee754_log10f+0x2c>
 8005336:	ee30 7a40 	vsub.f32	s14, s0, s0
 800533a:	e7f3      	b.n	8005324 <__ieee754_log10f+0x14>
 800533c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005340:	db02      	blt.n	8005348 <__ieee754_log10f+0x38>
 8005342:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005346:	e7f1      	b.n	800532c <__ieee754_log10f+0x1c>
 8005348:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800534c:	bfbf      	itttt	lt
 800534e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80053b0 <__ieee754_log10f+0xa0>
 8005352:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005356:	f06f 0118 	mvnlt.w	r1, #24
 800535a:	ee17 2a90 	vmovlt	r2, s15
 800535e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005362:	bfa8      	it	ge
 8005364:	2100      	movge	r1, #0
 8005366:	3b7f      	subs	r3, #127	; 0x7f
 8005368:	440b      	add	r3, r1
 800536a:	0fd9      	lsrs	r1, r3, #31
 800536c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005378:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800537c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005380:	ee00 3a10 	vmov	s0, r3
 8005384:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005388:	f000 f824 	bl	80053d4 <__ieee754_logf>
 800538c:	eddf 7a09 	vldr	s15, [pc, #36]	; 80053b4 <__ieee754_log10f+0xa4>
 8005390:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005394:	eddf 7a08 	vldr	s15, [pc, #32]	; 80053b8 <__ieee754_log10f+0xa8>
 8005398:	eea8 0a27 	vfma.f32	s0, s16, s15
 800539c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80053bc <__ieee754_log10f+0xac>
 80053a0:	eea8 0a27 	vfma.f32	s0, s16, s15
 80053a4:	e7c2      	b.n	800532c <__ieee754_log10f+0x1c>
 80053a6:	bf00      	nop
 80053a8:	cc000000 	.word	0xcc000000
 80053ac:	00000000 	.word	0x00000000
 80053b0:	4c000000 	.word	0x4c000000
 80053b4:	3ede5bd9 	.word	0x3ede5bd9
 80053b8:	355427db 	.word	0x355427db
 80053bc:	3e9a2080 	.word	0x3e9a2080

080053c0 <__ieee754_sqrtf>:
 80053c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80053c4:	4770      	bx	lr
	...

080053c8 <nanf>:
 80053c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80053d0 <nanf+0x8>
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	7fc00000 	.word	0x7fc00000

080053d4 <__ieee754_logf>:
 80053d4:	ee10 3a10 	vmov	r3, s0
 80053d8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80053dc:	d106      	bne.n	80053ec <__ieee754_logf+0x18>
 80053de:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005574 <__ieee754_logf+0x1a0>
 80053e2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8005578 <__ieee754_logf+0x1a4>
 80053e6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80053ea:	4770      	bx	lr
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	da02      	bge.n	80053f6 <__ieee754_logf+0x22>
 80053f0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80053f4:	e7f5      	b.n	80053e2 <__ieee754_logf+0xe>
 80053f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80053fa:	db02      	blt.n	8005402 <__ieee754_logf+0x2e>
 80053fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005400:	4770      	bx	lr
 8005402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005406:	bfb8      	it	lt
 8005408:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800557c <__ieee754_logf+0x1a8>
 800540c:	485c      	ldr	r0, [pc, #368]	; (8005580 <__ieee754_logf+0x1ac>)
 800540e:	bfbe      	ittt	lt
 8005410:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005414:	f06f 0118 	mvnlt.w	r1, #24
 8005418:	ee17 3a90 	vmovlt	r3, s15
 800541c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8005420:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005424:	4418      	add	r0, r3
 8005426:	bfa8      	it	ge
 8005428:	2100      	movge	r1, #0
 800542a:	3a7f      	subs	r2, #127	; 0x7f
 800542c:	440a      	add	r2, r1
 800542e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8005432:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8005436:	4319      	orrs	r1, r3
 8005438:	ee00 1a10 	vmov	s0, r1
 800543c:	4951      	ldr	r1, [pc, #324]	; (8005584 <__ieee754_logf+0x1b0>)
 800543e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8005442:	f103 000f 	add.w	r0, r3, #15
 8005446:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800544a:	4001      	ands	r1, r0
 800544c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005450:	bb89      	cbnz	r1, 80054b6 <__ieee754_logf+0xe2>
 8005452:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	d10f      	bne.n	800547c <__ieee754_logf+0xa8>
 800545c:	2a00      	cmp	r2, #0
 800545e:	f000 8085 	beq.w	800556c <__ieee754_logf+0x198>
 8005462:	ee07 2a90 	vmov	s15, r2
 8005466:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8005588 <__ieee754_logf+0x1b4>
 800546a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800558c <__ieee754_logf+0x1b8>
 800546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005472:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005476:	eea7 0a87 	vfma.f32	s0, s15, s14
 800547a:	4770      	bx	lr
 800547c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005590 <__ieee754_logf+0x1bc>
 8005480:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005484:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005488:	ee20 7a00 	vmul.f32	s14, s0, s0
 800548c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005490:	b912      	cbnz	r2, 8005498 <__ieee754_logf+0xc4>
 8005492:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005496:	4770      	bx	lr
 8005498:	ee07 2a90 	vmov	s15, r2
 800549c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005588 <__ieee754_logf+0x1b4>
 80054a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80054a8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80054ac:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800558c <__ieee754_logf+0x1b8>
 80054b0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80054b4:	4770      	bx	lr
 80054b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80054ba:	ee70 7a27 	vadd.f32	s15, s0, s15
 80054be:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005594 <__ieee754_logf+0x1c0>
 80054c2:	eddf 4a35 	vldr	s9, [pc, #212]	; 8005598 <__ieee754_logf+0x1c4>
 80054c6:	4935      	ldr	r1, [pc, #212]	; (800559c <__ieee754_logf+0x1c8>)
 80054c8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80054cc:	4419      	add	r1, r3
 80054ce:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80054d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054d6:	430b      	orrs	r3, r1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	ee07 2a90 	vmov	s15, r2
 80054de:	ee26 5a06 	vmul.f32	s10, s12, s12
 80054e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80054e6:	ee25 7a05 	vmul.f32	s14, s10, s10
 80054ea:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80055a0 <__ieee754_logf+0x1cc>
 80054ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 80054f2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80055a4 <__ieee754_logf+0x1d0>
 80054f6:	eee7 5a87 	vfma.f32	s11, s15, s14
 80054fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80055a8 <__ieee754_logf+0x1d4>
 80054fe:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005502:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80055ac <__ieee754_logf+0x1d8>
 8005506:	eee7 4a87 	vfma.f32	s9, s15, s14
 800550a:	eddf 7a29 	vldr	s15, [pc, #164]	; 80055b0 <__ieee754_logf+0x1dc>
 800550e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005512:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005516:	eee5 7a87 	vfma.f32	s15, s11, s14
 800551a:	dd1c      	ble.n	8005556 <__ieee754_logf+0x182>
 800551c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005520:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005524:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800552c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005530:	b922      	cbnz	r2, 800553c <__ieee754_logf+0x168>
 8005532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005536:	ee30 0a67 	vsub.f32	s0, s0, s15
 800553a:	4770      	bx	lr
 800553c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8005588 <__ieee754_logf+0x1b4>
 8005540:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005548:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800554c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800558c <__ieee754_logf+0x1b8>
 8005550:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005554:	4770      	bx	lr
 8005556:	ee70 7a67 	vsub.f32	s15, s0, s15
 800555a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800555e:	2a00      	cmp	r2, #0
 8005560:	d0e9      	beq.n	8005536 <__ieee754_logf+0x162>
 8005562:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005588 <__ieee754_logf+0x1b4>
 8005566:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800556a:	e7ed      	b.n	8005548 <__ieee754_logf+0x174>
 800556c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005578 <__ieee754_logf+0x1a4>
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	cc000000 	.word	0xcc000000
 8005578:	00000000 	.word	0x00000000
 800557c:	4c000000 	.word	0x4c000000
 8005580:	004afb20 	.word	0x004afb20
 8005584:	007ffff0 	.word	0x007ffff0
 8005588:	3717f7d1 	.word	0x3717f7d1
 800558c:	3f317180 	.word	0x3f317180
 8005590:	3eaaaaab 	.word	0x3eaaaaab
 8005594:	3e1cd04f 	.word	0x3e1cd04f
 8005598:	3e178897 	.word	0x3e178897
 800559c:	ffcf5c30 	.word	0xffcf5c30
 80055a0:	3e638e29 	.word	0x3e638e29
 80055a4:	3ecccccd 	.word	0x3ecccccd
 80055a8:	3e3a3325 	.word	0x3e3a3325
 80055ac:	3e924925 	.word	0x3e924925
 80055b0:	3f2aaaab 	.word	0x3f2aaaab

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
